<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fashion.Framework.Common</name>
    </assembly>
    <members>
        <member name="T:Fashion.Framework.Common.Email.Configuration.Email">
            <summary>
            Acessa as configurações de envio de Emails
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.Email.EmailConfiguration">
            <summary>
            Obtem as configurações de envio de Email
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Email.Configuration.EmailConfiguration">
            <summary>
            Obtem as configurações do envio de Email
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.IsBodyHtml">
            <summary>
            Define se o formato do Email é HTML ou Texto puro
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Login">
            <summary>
            Login para autenticação da conta de Email
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Password">
            <summary>
            Senha para autenticação da conta de Email
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Smtp">
            <summary>
            Obtém ou define o nome ou o endereço IP do host usado para transações de SMTP.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Port">
            <summary>
            Obtém ou define a porta usada para transações de SMTP.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Ssl">
            <summary>
            Especifique se o SmtpClient usa Secure Sockets Layer (SSL) para criptografar a conexão.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Network">
            <summary>
            Especifica como e-mails enviados serão tratados.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.Email">
            <summary>
            Email utilizado para enviar outros Emails
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Email.Configuration.EmailConfiguration.DisplayName">
            <summary>
            Nome do remetente do email
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Email.Email">
            <summary>
            Classe de envio de Emails
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Email.Email.Send(System.String,System.String,System.String[])">
            <summary>
            Envia Email
            Obs.: Verifique se existe configuração da conta de envio de Emails no arquivo .config
            </summary>
            <param name="email">Email de destino</param>
            <param name="subject">Assunto</param>
            <param name="message">Mensagem do Email</param>
        </member>
        <member name="T:Fashion.Framework.Common.Exceptions.BusinessFaultException">
            <summary>
             Detalhes de exceção do tipo BusinessFault
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Exceptions.BusinessFaultException.#ctor(Fashion.Framework.Common.Exceptions.FaultDetail)">
            <summary>
             Construtor BusinessFault
            </summary>
            <param name="errorDetail">Detalhes do erro</param>
        </member>
        <member name="M:Fashion.Framework.Common.Exceptions.BusinessFaultException.#ctor">
            <summary>
            Construtor BusinessFault
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.BusinessFaultException.Code">
            <summary>
             Código do Erro
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.BusinessFaultException.ErrorMessage">
            <summary>
             Descrição do Erro
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Exceptions.DataContractFaultException">
            <summary>
             Detalhes de exceção do tipo DataContractFault
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.DataContractFaultException.Entity">
            <summary>
             Código do Erro
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.DataContractFaultException.ErrorsMessages">
            <summary>
             Descrição do Erro
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Exceptions.FaultDetail">
            <summary>
             Detalhes do erro
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Exceptions.FaultDetail.#ctor(System.String,System.String)">
            <summary>
             Construtor da Classe ErrorDetail
            </summary>
            <param name="code"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.FaultDetail.Code">
            <summary>
             Código do erro
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Exceptions.FaultDetail.ErrorMessage">
            <summary>
             Descrição do erro
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Arrays">
            <summary>
            Métodos de extensão para o Array.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Arrays.ForEach(System.Array,System.Action{System.Array,System.Int32[]})">
            <summary>
            Executa uma Action para cada item do Array, passando como parâmetros o próprio Array e sua posição no looping.
            </summary>
            <param name="array"></param>
            <param name="action"></param>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Database">
            <summary>
            Extensões comuns para tipos relacionadas a banco de dados.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.GetSqlDBType(System.Data.DbType)">
            <summary>
            Returns the SqlDbType for a give DbType
            </summary>
            <returns>Retorna um SqlDbType.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.GetDbType(System.Type)">
            <summary>
            Busca o tipo de dados do banco relacionado o tipo de dados passado como argumento.
            </summary>
            <param name="type">Tipo do objeto.</param>
            <returns>Retorna o DbType relacionado.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.Load``1(System.Data.IDataReader,``0,System.Collections.Generic.List{System.String})">
            <summary>
            Coerces an IDataReader to try and load an object using name/property matching
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.LoadValueType``1(System.Data.IDataReader,``0@)">
            <summary>
            Loads a single primitive value type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.ToEnumerableValueType``1(System.Data.IDataReader)">
            <summary>
            Toes the type of the enumerable value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rdr">The IDataReader to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.IsCoreSystemType(System.Type)">
            <summary>
            Determines whether [is core system type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is core system type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.ToEnumerable``1(System.Data.IDataReader,System.Collections.Generic.List{System.String},System.Func{System.Object,System.Object})">
            <summary>
            Coerces an IDataReader to load an enumerable of T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rdr"></param>
            <param name="columnNames"></param>
            <param name="onItemCreated">Invoked when a new item is created</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.ToList``1(System.Data.IDataReader)">
            <summary>
            Converte um DataReader para uma lista.
            </summary>
            <param name="rdr"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Database.ToList``1(System.Data.IDataReader,System.Func{System.Object,System.Object})">
            <summary>
            Creates a typed list from an IDataReader
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Dates">
            <summary>
            Extensões comuns para tipos relacionadas a datas.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Ago">
            <summary>
            Atrás.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Day">
            <summary>
            Dia.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Hour">
            <summary>
            Hora.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Minute">
            <summary>
            Minuto.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Month">
            <summary>
            Mês.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Second">
            <summary>
            Segundo.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Space">
            <summary>
            Espaço em branco.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Dates.Year">
            <summary>
            Ano.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DaysAgo(System.Int32)">
            <summary>
            Returns a date in the past by days.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DaysFromNow(System.Int32)">
            <summary>
             Returns a date in the future by days.
            </summary>
            <param name="days">The days.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.HoursAgo(System.Int32)">
            <summary>
            Returns a date in the past by hours.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.HoursFromNow(System.Int32)">
            <summary>
            Returns a date in the future by hours.
            </summary>
            <param name="hours">The hours.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.MinutesAgo(System.Int32)">
            <summary>
            Returns a date in the past by minutes
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.MinutesFromNow(System.Int32)">
            <summary>
            Returns a date in the future by minutes.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.SecondsAgo(System.Int32)">
            <summary>
            Gets a date in the past according to seconds
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.SecondsFromNow(System.Int32)">
            <summary>
            Gets a date in the future by seconds.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.Diff(System.DateTime,System.DateTime)">
            <summary>
            Diffs the specified date.
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffDays(System.String,System.String)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffHours(System.String,System.String)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffHours(System.DateTime,System.DateTime)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffMinutes(System.String,System.String)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.DiffMinutes(System.DateTime,System.DateTime)">
            <summary>
            Returns a double indicating the number of days between two dates (past is negative)
            </summary>
            <param name="dateOne">The date one.</param>
            <param name="dateTwo">The date two.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.ReadableDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.CountWeekdays(System.DateTime,System.DateTime)">
            <summary>
            Counts the number of weekdays between two dates.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.CountWeekends(System.DateTime,System.DateTime)">
            <summary>
            Counts the number of weekends between two dates.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.IsDate(System.Object)">
            <summary>
            Verifies if the object is a date
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if the specified dt is date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.IsWeekDay(System.DateTime)">
            <summary>
            Checks to see if the date is a week day (Mon - Fri)
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if [is week day] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.IsWeekEnd(System.DateTime)">
            <summary>
            Checks to see if the date is Saturday or Sunday
            </summary>
            <param name="dt">The dt.</param>
            <returns>
            	<c>true</c> if [is week end] [the specified dt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.TimeDiff(System.DateTime,System.DateTime)">
            <summary>
            Displays the difference in time between the two dates. Return example is "12 years 4 months 24 days 8 hours 33 minutes 5 seconds"
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.GetFormattedMonthAndDay(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted month and day, i.e. "April 15th"
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.GetDateDayWithSuffix(System.DateTime)">
            <summary>
            Given a datetime object, returns the formatted day, "15th"
            </summary>
            <param name="date">The date to extract the string from</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.FormatString(System.String,System.String,System.Int32)">
            <summary>
            Remove leading strings with zeros and adjust for singular/plural
            </summary>
            <param name="str">The STR.</param>
            <param name="previousStr">The previous STR.</param>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Dates.GetAge(System.DateTime,System.DateTime)">
            <summary>
            Calc age with date at
            </summary>
            <param name="dateOfBirth">Date of Birth</param>
            <param name="dateAsAt">Date as at</param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Exceptions">
            <summary>
            Extensões comuns para tipos relacionadas a exceções.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Exceptions.GetMessage(System.Exception)">
            <summary>
            Retorna recursivamente todas as mensagens da excessão.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Images">
            <summary>
            Extensões comuns para tipos relacionadas a imagens.
            Atenção: as imagens são descartadas depois de manipuladas!
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Images._encoders">
            <summary>
            A quick lookup for getting image encoders
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.CreateThumbnail(System.Drawing.Image,System.Int32)">
            <summary>
            Cria uma miniatura da imagem
            </summary>
            <param name="image">Imagem original</param>
            <param name="width">A (máxima) largura.</param>
            <returns>Retorna a imagem</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.CreateThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Cria uma miniatura da imagem
            </summary>
            <param name="image">Imagem original</param>
            <param name="maxWidth">A (máxima) largura.</param>
            <param name="maxHeight">A (máxima) altura.</param>
            <returns>Retorna a imagem</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.Crop(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Método de corte de uma imagem
            </summary>
            <param name="image">Imagem a ser recortada</param>
            <param name="width">Altura</param>
            <param name="height">Largura</param>
            <param name="x">Coordenada X</param>
            <param name="y">Coordenada Y</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.ToImage(System.Byte[])">
            <summary>
            Converte um byte[] em uma Imagem
            </summary>
            <param name="image">Byte array contendo uma imagem.</param>
            <returns>Uma imagem se a conversão ocorrer com sucesso.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.SaveJpeg(System.Drawing.Image,System.String,System.Int32)">
            <summary> 
            Saves an image as a jpeg image, with the given quality 
            </summary> 
            <param name="path">Path to which the image would be saved.</param>
            <param name="image">Imagem a ser salva como jpeg.</param>
            <param name="quality">An integer from 0 to 100, with 100 being the 
            highest quality</param> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            An invalid value was entered for image quality.
            </exception>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.GetEncoderInfo(System.String)">
            <summary> 
            Returns the image codec with the given mime type 
            </summary> 
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Images.ToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converte uma imagem para um byte[].
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Extensions.Images.Encoders">
            <summary>
            A quick lookup for getting image encoders
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Inflector">
            <summary>
            Extensões comuns para tipos relacionadas ao Inflector.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.#cctor">
            <summary>
            Initializes the <see cref="T:Fashion.Framework.Common.Extensions.Inflector"/> class.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddIrregularRule(System.String,System.String)">
            <summary>
            Adds the irregular rule.
            </summary>
            <param name="singular">The singular.</param>
            <param name="plural">The plural.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddUnknownCountRule(System.String)">
            <summary>
            Adds the unknown count rule.
            </summary>
            <param name="word">The word.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddPluralRule(System.String,System.String)">
            <summary>
            Adds the plural rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddSingularRule(System.String,System.String)">
            <summary>
            Adds the singular rule.
            </summary>
            <param name="rule">The rule.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.MakePlural(System.String)">
            <summary>
            Makes the plural.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.MakeSingular(System.String)">
            <summary>
            Makes the singular.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ApplyRules(System.Collections.Generic.IList{Fashion.Framework.Common.Extensions.Inflector.InflectorRule},System.String)">
            <summary>
            Applies the rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToTitleCase(System.String)">
            <summary>
            Converts the string to title case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToHumanCase(System.String)">
            <summary>
            Converts the string to human case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToProper(System.String)">
            <summary>
            Convert string to proper case
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToPascalCase(System.String)">
            <summary>
            Converts the string to pascal case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToPascalCase(System.String,System.Boolean)">
            <summary>
            Converts text to pascal case...
            </summary>
            <param name="text">The text.</param>
            <param name="removeUnderscores">if set to <c>true</c> [remove underscores].</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ToCamelCase(System.String)">
            <summary>
            Converts the string to camel case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddUnderscores(System.String)">
            <summary>
            Adds the underscores.
            </summary>
            <param name="pascalCasedWord">The pascal cased word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.MakeInitialCaps(System.String)">
            <summary>
            Makes the initial caps.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.MakeInitialLowerCase(System.String)">
            <summary>
            Makes the initial lower case.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.AddOrdinalSuffix(System.String)">
            <summary>
            Adds the ordinal suffix.
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.ConvertUnderscoresToDashes(System.String)">
            <summary>
            Converts the underscores to dashes.
            </summary>
            <param name="underscoredWord">The underscored word.</param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Inflector.InflectorRule">
            <summary>
            Summary for the InflectorRule class
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Inflector.InflectorRule._regex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Extensions.Inflector.InflectorRule._replacement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.InflectorRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Fashion.Framework.Common.Extensions.Inflector.InflectorRule"/> class.
            </summary>
            <param name="regexPattern">The regex pattern.</param>
            <param name="replacementText">The replacement text.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Inflector.InflectorRule.Apply(System.String)">
            <summary>
            Applies the specified word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.IO">
            <summary>
            Extensões comuns para tipos relacionadas a IO.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.GetFileText(System.String)">
            <summary>
            Read a text file and obtain it's contents.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <returns>String containing the content of the file.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.CreateToFile(System.String,System.String)">
            <summary>
            Creates or opens a file for writing and writes text to it.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.UpdateFileText(System.String,System.String,System.String)">
            <summary>
            Update text within a file by replacing a substring within the file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="lookFor">A String to be replaced.</param>
            <param name="replaceWith">A String to replace all occurrences of lookFor.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.WriteToFile(System.String,System.String)">
            <summary>
            Writes out a string to a file.
            </summary>
            <param name="absolutePath">The complete file path to write to.</param>
            <param name="fileText">A String containing text to be written to the file.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.ReadWebPage(System.String)">
            <summary>
            Fetches a web page
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.IO.MimeType(System.String)">
            <summary>
            Retorna o MimeType de acordo com a extensão do arquivo.
            </summary>
            <param name="strFileName"></param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Linq">
            <summary>
            Extensões comuns para tipos relacionadas a Linq.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Linq.ParseObjectValue(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Parses the object value.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Linq.IsConstraint(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified exp is constraint.
            </summary>
            <param name="exp">The exp.</param>
            <returns>
            	<c>true</c> if the specified exp is constraint; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Linq.GetConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            Gets the constant value.
            </summary>
            <param name="exp">The exp.</param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Lists">
            <summary>
            Extensões comuns para tipos relacionadas a listas.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Lists.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executa uma ação para cada item.
            </summary>
            <param name="enumerable"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Lists.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Junta cada item de uma lista separada pelo separador.
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Numeric">
            <summary>
            Extensões comuns para tipos relacionadas a números.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsNaturalNumber(System.String)">
            <summary>
            Determines whether a number is a natural number (positive, non-decimal)
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is natural number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsWholeNumber(System.String)">
            <summary>
            Determines whether [is whole number] [the specified s item].
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if [is whole number] [the specified s item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsInteger(System.String)">
            <summary>
            Determines whether the specified s item is integer.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsNumber(System.String)">
            <summary>
            Determines whether the specified s item is number.
            </summary>
            <param name="sItem">The s item.</param>
            <returns>
            	<c>true</c> if the specified s item is number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsEven(System.Int32)">
            <summary>
            Determines whether the specified value is an even number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is even; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.IsOdd(System.Int32)">
            <summary>
            Determines whether the specified value is an odd number.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is odd; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number between the specified bounds
            </summary>
            <param name="low">The low.</param>
            <param name="high">The high.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.Random">
            <summary>
            Generates a random double
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Numeric.Truncate(System.Double,System.Int32)">
            <summary>
            Trunca um valor especificando a quantidade de casas decimais.
            </summary>
            <param name="value">Valor a ser truncado.</param>
            <param name="precision">Quantidade de casas decimais.</param>
            <returns>O valor truncado.</returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Objects">
            <summary>
            Extensões comuns para tipos relacionadas a objetos.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.ChangeTypeTo``1(System.Object)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <returns>
            An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.
            </returns>
            <remarks>
            This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not handle
            nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that this method will
            be deleted once Convert.ChangeType is updated in a future version of the .NET Framework to handle
            nullable types, so we want this to behave as closely to Convert.ChangeType as possible.
            This method was written by Peter Johnson at:
            http://aspalliance.com/author.aspx?uId=1026.
            </remarks>
            
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.ChangeTypeTo(System.Object,System.Type)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <param name="conversionType"></param>
            <returns>
            An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.ToDictionary(System.Object)">
            <summary>
            Converte as propriedades de um objeto para um dicionário contendo o nome da propriedade e valor.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.FromDictionary``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            Copia os valores do dicionário para as propriedades do objeto.
            </summary>
            <param name="settings"></param>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.CopyTo``1(System.Object,``0)">
            <summary>
            Copias as propriedades de um objeto para outro.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.IsNullableEnum(System.Type)">
            <summary>
            Verifica se o enum é do tipo Nullable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.GetDefault(System.Type)">
            <summary>
            Retorna o valor padrão de um tipo.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.IsPrimitive(System.Type)">
            <summary>
            Verifica se o tipo é primitivo.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.Copy(System.Object)">
            <summary>
            Copia o objeto e suas propriedades.
            </summary>
            <param name="originalObject"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Objects.Copy``1(``0)">
            <summary>
            Copia um objeto e suas propriedades.
            </summary>
            <param name="original"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.ReferenceEqualityComparer">
            <summary>
            Comparer baseado no object.ReferenceEquals
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.RegexPattern">
            <summary>
            Extensões comuns para tipos relacionadas a expressões regulares.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Streams">
            <summary>
             Extensões comuns para tipos relacionadas a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Streams.ReadFully(System.IO.Stream)">
            <summary>
            Lê um fluxo de dados até o fim. Os dados são retornados como um array de bytes.
            Um <see cref="T:System.IO.IOException"/> é lançada se qualquer uma das chamadas subjacentes de entrada/saída falhar.
            </summary>
            <param name="stream">Um <see cref="T:System.IO.Stream"/> de origem.</param>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Strings">
            <summary>
            Extensões comuns para tipos relacionadas a strings.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.#cctor">
            <summary>
            Initializes the <see cref="T:Fashion.Framework.Common.Extensions.Strings"/> class.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.RemoveAcentos(System.String)">
            <summary>
            Remove os acentos do texto.
            </summary>
            <param name="texto"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Matches(System.String,System.String)">
            <summary>
            Compara duas strings.
            </summary>
            <param name="source"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.MatchesTrimmed(System.String,System.String)">
            <summary>
            Compara duas strings ignorando espaços no início e no fim da string.
            </summary>
            <param name="source"></param>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.MatchesRegex(System.String,System.String)">
            <summary>
            Verifica se a string está no formato especificado.
            </summary>
            <param name="inputString"></param>
            <param name="matchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Chop(System.String,System.Int32)">
            <summary>
            Strips the last specified chars from a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeFromEnd">The remove from end.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Chop(System.String,System.String)">
            <summary>
            Strips the last specified chars from a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="backDownTo">The back down to.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.PluralToSingular(System.String)">
            <summary>
            Plurals to singular.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.SingularToPlural(System.String)">
            <summary>
            Singulars to plural.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Pluralize(System.Int32,System.String)">
            <summary>
            Make plural when count is not one
            </summary>
            <param name="number">The number of things</param>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Clip(System.String,System.Int32)">
            <summary>
            Removes the specified chars from the beginning of a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeFromBeginning">The remove from beginning.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Clip(System.String,System.String)">
            <summary>
            Removes chars from the beginning of a string, up to the specified string
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="removeUpTo">The remove up to.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Chop(System.String)">
            <summary>
            Strips the last char from a a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Clip(System.String)">
            <summary>
            Strips the last char from a a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.FastReplace(System.String,System.String,System.String)">
            <summary>
            Fasts the replace.
            </summary>
            <param name="original">The original.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.FastReplace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Fasts the replace.
            </summary>
            <param name="original">The original.</param>
            <param name="pattern">The pattern.</param>
            <param name="replacement">The replacement.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Crop(System.String,System.String,System.String)">
            <summary>
            Returns text that is located between the startText and endText tags.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="startText">The text from which to start the crop</param>
            <param name="endText">The endpoint of the crop</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Squeeze(System.String)">
            <summary>
            Removes excess white space in a string.
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToAlphaNumericOnly(System.String)">
            <summary>
            Removes all non-alpha numeric characters in a string
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToWords(System.String)">
            <summary>
            Creates a string array based on the words in a sentence
            </summary>
            <param name="sourceString">The source string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.StripHtml(System.String)">
            <summary>
            Strips all HTML tags from a string
            </summary>
            <param name="htmlString">The HTML string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.StripHtml(System.String,System.String)">
            <summary>
            Strips all HTML tags from a string and replaces the tags with the specified replacement
            </summary>
            <param name="htmlString">The HTML string.</param>
            <param name="htmlPlaceHolder">The HTML place holder.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.FindMatches(System.String,System.String)">
            <summary>
            Procura padrões.
            </summary>
            <param name="source"></param>
            <param name="find"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToDelimitedList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a generic List collection to a single comma-delimitted string.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToDelimitedList(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Converts a generic List collection to a single string using the specified delimitter.
            </summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.Strip(System.String,System.String)">
            <summary>
            Strips the specified input.
            </summary>
            <param name="sourceString">The source string.</param>
            <param name="stripValue">The strip value.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.AsciiToUnicode(System.Int32)">
            <summary>
            Converts ASCII encoding to Unicode
            </summary>
            <param name="asciiCode">The ASCII code.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.TextToEntity(System.String)">
            <summary>
            Converts Text to HTML-encoded string
            </summary>
            <param name="textString">The text string.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.EntityToText(System.String)">
            <summary>
            Converts HTML-encoded bits to Text
            </summary>
            <param name="entityText">The entity text.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToFormattedString(System.String,System.Object[])">
            <summary>
            Formats the args using String.Format with the target string as a format string.
            </summary>
            <param name="fmt">The format string passed to String.Format</param>
            <param name="args">The args passed to String.Format</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.ToEnum``1(System.String)">
            <summary>
            Strings to enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.FillEntities">
            <summary>
            Fills the entities.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Strings.CalculateMd5Hash(System.String)">
            <summary>
            Calcula o hash MD5 do texto.
            </summary>
            <param name="input">Texto original</param>
            <returns>Hash MD5.</returns>
        </member>
        <member name="T:Fashion.Framework.Common.Extensions.Validation">
            <summary>
            Extensões comuns para tipos relacionadas a validações.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsAlpha(System.String)">
            <summary>
            Determines whether the specified eval string contains only alpha characters.
            </summary>
            <param name="evalString">The eval string.</param>
            <returns>
            	<c>true</c> if the specified eval string is alpha; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsAlphaNumeric(System.String)">
            <summary>
            Determines whether the specified eval string contains only alphanumeric characters
            </summary>
            <param name="evalString">The eval string.</param>
            <returns>
            	<c>true</c> if the string is alphanumeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsAlphaNumeric(System.String,System.Boolean)">
            <summary>
            Determines whether the specified eval string contains only alphanumeric characters
            </summary>
            <param name="evalString">The eval string.</param>
            <param name="allowSpaces">if set to <c>true</c> [allow spaces].</param>
            <returns>
            	<c>true</c> if the string is alphanumeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsNumeric(System.String)">
            <summary>
            Determines whether the specified eval string contains only numeric characters
            </summary>
            <param name="evalString">The eval string.</param>
            <returns>
            	<c>true</c> if the string is numeric; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsEmail(System.String)">
            <summary>
            Determines whether the specified email address string is valid based on regular expression evaluation.
            </summary>
            <param name="emailAddressString">The email address string.</param>
            <returns>
            	<c>true</c> if the specified email address is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsLowerCase(System.String)">
            <summary>
            Determines whether the specified string is lower case.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
            	<c>true</c> if the specified string is lower case; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsUpperCase(System.String)">
            <summary>
            Determines whether the specified string is upper case.
            </summary>
            <param name="inputString">The input string.</param>
            <returns>
            	<c>true</c> if the specified string is upper case; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsGuid(System.String)">
            <summary>
            Determines whether the specified string is a valid GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <returns>
            	<c>true</c> if the specified string is a valid GUID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsZipCodeAny(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using either 5 or 5+4 format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsZipCodeFive(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using the 5 digit format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsZipCodeFivePlusFour(System.String)">
            <summary>
            Determines whether the specified string is a valid US Zip Code, using the 5+4 format.
            </summary>
            <param name="zipCode">The zip code.</param>
            <returns>
            	<c>true</c> if it is a valid zip code; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsSocialSecurityNumber(System.String)">
            <summary>
            Determines whether the specified string is a valid Social Security number. Dashes are optional.
            </summary>
            <param name="socialSecurityNumber">The Social Security Number</param>
            <returns>
            	<c>true</c> if it is a valid Social Security number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsIpAddress(System.String)">
            <summary>
            Determines whether the specified string is a valid IP address.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsUsTelephoneNumber(System.String)">
            <summary>
            Determines whether the specified string is a valid US phone number using the referenced regex string.
            </summary>
            <param name="telephoneNumber">The telephone number.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsUsCurrency(System.String)">
            <summary>
            Determines whether the specified string is a valid currency string using the referenced regex string.
            </summary>
            <param name="currency">The currency string.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsUrl(System.String)">
            <summary>
            Determines whether the specified string is a valid URL string using the referenced regex string.
            </summary>
            <param name="url">The URL string.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsStrongPassword(System.String)">
            <summary>
            Determines whether the specified string is consider a strong password based on the supplied string.
            </summary>
            <param name="password">The password.</param>
            <returns>
            	<c>true</c> if strong; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardAny(System.String)">
            <summary>
            Determines whether the specified string is a valid credit, based on matching any one of the eight credit card strings
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardBigFour(System.String)">
            <summary>
            Determines whether the specified string is an American Express, Discover, MasterCard, or Visa
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardAmericanExpress(System.String)">
            <summary>
            Determines whether the specified string is an American Express card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardCarteBlanche(System.String)">
            <summary>
            Determines whether the specified string is an Carte Blanche card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardDinersClub(System.String)">
            <summary>
            Determines whether the specified string is an Diner's Club card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardDiscover(System.String)">
            <summary>
            Determines whether the specified string is a Discover card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardEnRoute(System.String)">
            <summary>
            Determines whether the specified string is an En Route card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardJcb(System.String)">
            <summary>
            Determines whether the specified string is an JCB card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardMasterCard(System.String)">
            <summary>
            Determines whether the specified string is a Master Card credit card
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCreditCardVisa(System.String)">
            <summary>
            Determines whether the specified string is Visa card.
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns>
            	<c>true</c> if valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.CleanCreditCardNumber(System.String)">
            <summary>
            Cleans the credit card number, returning just the numeric values.
            </summary>
            <param name="creditCard">The credit card.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.CreditPassesFormatCheck(System.String)">
            <summary>
            Determines whether the credit card number, once cleaned, passes the Luhn algorith.
            See: http://en.wikipedia.org/wiki/Luhn_algorithm
            </summary>
            <param name="creditCardNumber">The credit card number.</param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsValidLuhn(System.Int32[])">
            <summary>
            Determines whether the specified int array passes the Luhn algorith
            </summary>
            <param name="digits">The int array to evaluate</param>
            <returns>
            	<c>true</c> if it validates; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsStringNumeric(System.String)">
            <summary>
            Determine whether the passed string is numeric, by attempting to parse it to a double
            </summary>
            <param name="str">The string to evaluated for numeric conversion</param>
            <returns>
            	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCep(System.String)">
            <summary>
            Verifica se o CEP está no formato correto.
            </summary>
            <param name="input">Número do cep</param>
            <returns>Verdadeiro se estiver no formato correto</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCpf(System.String)">
            <summary>
            Valida o cpf.
            </summary>
            <param name="cpf"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Extensions.Validation.IsCnpj(System.String)">
            <summary>
            Valida o cnpj.
            </summary>
            <param name="cnpj"></param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.IModel">
            <summary>
            Interface base para os modelos do domínio.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.IModel.Id">
            <summary>
            Identificado do modelo.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.IModel.IsValid">
            <summary>
            Retorna verdadeiro se as propriedades do modelo estiverem com valores válidos.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.IPersistentObject">
            <summary>
            Interface base para os objetos persistentes (objetos do banco de dados).
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.IPersistentObject.Id">
            <summary>
            Identificaor.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.ITrackable">
            <summary>
            Interface que define um domínio para rastrear alterações manuais no banco de dados.
            </summary>
            <remarks>
            Deve haver uma coluna de nome "Hash":
            -> será salvo o hash da tabela nela.
            
            Se houver uma coluna de nome Hash + nome de coleção:
            -> Exemplo: HashEntradaItens
            -> será salvo o hash dos ids da coleção nela.
            </remarks>
        </member>
        <member name="P:Fashion.Framework.Common.ITrackable.Hash">
            <summary>
            Propriedade com o hash das colunas da tabela, exceto Id, coleções, hashes das coleções e ela própria.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.LoggingErrorsAttribute">
            <summary>
            Grava os erros ocorridos e não tratados no sistema em 
            um arquivo definido nas configurações do Log4Net
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.LoggingErrorsAttribute.OnException(PostSharp.Aspects.MethodExecutionArgs)">
            <summary>
            Method executed <b>after</b> the body of methods to which this aspect is applied,
                          in case that the method resulted with an exception (i.e., in a <c>catch</c> block).
            </summary>
            <param name="args">Advice arguments.</param>
        </member>
        <member name="T:Fashion.Framework.Common.ModelBase">
            <summary>
            Classe base para os modelos de domínio.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.ModelBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notifica se uma propriedade foi alterada.
            </summary>
            <param name="info"></param>
        </member>
        <member name="P:Fashion.Framework.Common.ModelBase.Id">
            <summary>
            Identificador.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.ModelBase.Error">
            <summary>
            Mensagem de erro, se houver.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.ModelBase.Item(System.String)">
            <summary>
            Mensagem de erro para a propriedade especificada.
            Se a string é nula ou vazia, não existe erro.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Fashion.Framework.Common.ModelBase.IsValid">
            <summary>
            Retorna se o objeto é válido.
            </summary>
        </member>
        <member name="E:Fashion.Framework.Common.ModelBase.PropertyChanged">
            <summary>
            Dispara cada vez que uma propriedade é alterada.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.CryptProvider">
            <summary>
            Enumerator com os tipos de classes para criptografia.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.CryptProvider.Rijndael">
            <summary>
            Representa a classe base para implementações criptografia dos algoritmos simétricos Rijndael.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.CryptProvider.RC2">
            <summary>
            Representa a classe base para implementações do algoritmo RC2.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.CryptProvider.DES">
            <summary>
            Representa a classe base para criptografia de dados padrões (DES - Data Encryption Standard).
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.CryptProvider.TripleDES">
            <summary>
            Representa a classe base (TripleDES - Triple Data Encryption Standard).
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.Crypto">
            <summary>
            Classe para criptografar dados
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.SetIV">
            <summary>
            Inicialização do vetor do algoritmo simétrico
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.#ctor">
            <summary>
            Contrutor padrão da classe, é setado um tipo de criptografia padrão (Rijndael).
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.#ctor(Fashion.Framework.Common.Utils.CryptProvider)">
            <summary>
            Construtor com o tipo de criptografia a ser usada Você pode escolher o tipo pelo Enum chamado CryptProvider.
            </summary>
            <param name="cryptProvider">Tipo de criptografia.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.GetKey">
            <summary>
            Gera a chave de criptografia válida dentro do array.
            </summary>
            <returns>Chave com array de bytes.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.Encrypt(System.String)">
            <summary>
            Encripta o dado solicitado.
            </summary>
            <param name="plainText">Texto a ser criptografado.</param>
            <returns>Texto criptografado.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Crypto.Decrypt(System.String)">
            <summary>
            Desencripta o dado solicitado.
            </summary>
            <param name="cryptoText">Texto a ser descriptografado.</param>
            <returns>Texto descriptografado.</returns>
        </member>
        <member name="P:Fashion.Framework.Common.Utils.Crypto.Key">
            <summary>
            Chave secreta para o algoritmo simétrico de criptografia.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.CryptoFile">
            <summary>
            Classe responsável pela criptografia de arquivos.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.CryptoFile.ZeroMemory(System.IntPtr,System.Int32)">
            <summary>
            Call this function to remove the key from memory after use for security.
            </summary>
            <param name="destination"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.CryptoFile.GenerateKey">
            <summary>
            Function to Generate a 64 bits Key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.CryptoFile.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encripta um arquivo.
            </summary>
            <param name="sInputFilename"></param>
            <param name="sOutputFilename"></param>
            <param name="sKey"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.CryptoFile.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decripta um arquivo.
            </summary>
            <param name="sInputFilename"></param>
            <param name="sOutputFilename"></param>
            <param name="sKey"></param>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1">
            <summary>
            Provê um modo de converter um enum para uma string e vice-versa.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumDisplayTypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="value">The <see cref="T:System.Object"/> to test for validity. </param>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.EnumHelper">
            <summary>
            Método auxiliar para Enumeradores
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumHelper.GetDisplay(System.Enum)">
            <summary>
            Obtém o Display de um enum específico a partir do Attribute <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute">DisplayAttribute</see>
            </summary>
            <param name="value">Valor do Enum</param>
            <returns>Descrição do enum</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumHelper.GetDisplays(System.Type)">
            <summary>
            Obtém o Display de um enum específico a partir do Attribute <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute">DisplayAttribute</see>
            </summary>
            <param name="enum">Enum</param>
            <returns>Descrições do enum</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Obtem a descrição de um enumerador a partir do Attribute <see cref="T:System.ComponentModel.DescriptionAttribute">DescriptionAttribute</see>
            </summary>
            <param name="value">Valor do Enumerador</param>
            <returns>Descrição do enumerador</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.EnumHelper.GetValueFromDescription``1(System.String)">
            <summary>
            Obtem o valor do enumerador a partir da descrição do <see cref="T:System.ComponentModel.DescriptionAttribute">DescriptionAttribute</see>
            </summary>
            <typeparam name="T">Tipo do enumerador</typeparam>
            <param name="description">Descrição do Enumerador</param>
            <returns>Valor do Enumerador</returns>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.FashionLogger">
            <summary>
            Efetua o log do sistema.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Debug(System.String,System.Object[])">
            <summary>
            Escreve a mensagem em nível de depuração.
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Info(System.String,System.Object[])">
            <summary>
            Escreve a mensagem em nível de informação.
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Warn(System.String,System.Object[])">
            <summary>
            Escreve a mensagem em nível de aviso.
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Error(System.String,System.Object[])">
            <summary>
            Escreve a mensagem em nível de erro.
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Trace(System.String,System.Object[])">
            <summary>
            Escreve a mensagem em nível de registro.
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Error(System.Exception)">
            <summary>
            Escreve a exceção em nível de erro.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Error(System.Exception,System.String)">
            <summary>
            Escreve a exceção em nível de erro.
            </summary>
            <param name="exception"></param>
            <param name="details"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.FashionLogger.Log(System.String,NLog.LogLevel,System.Object[])">
            <summary>
            Escreve a mensagem no nível especificado.
            </summary>
            <param name="message"></param>
            <param name="logLevel"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.LicenceException">
            <summary>
            Classe que representa a Exceção de licenças inválidas
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.LicenceException.#ctor(System.String)">
            <summary>
            Construtor da classe LicenceException
            </summary>
            <param name="message">Mensagem do motivo da exceção</param>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.Licence">
            <summary>
            Classe utilitária que contem as regras de geração e validação de seriais
            </summary>
            <remarks>O código desta função suporta até 27 anos após a data base, após atingir esse periodo deve ser mudado a data base</remarks>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Licence.GetActivationCode">
            <summary>
            Obtem o Código de ativação utilizado para gerar o serial
            Esse código é que amarra o serial ao computador, por ele não é possível utilizar o mesmo seria em 2 computadores diferentes.
            </summary>
            <returns>Retorna o código de ativação</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Licence.GenerateSerial(System.String,System.DateTime)">
            <summary>
            Gera o serial do Módulo
            </summary>
            <param name="activationCode">Código de ativação (Ele é único por computador)</param>
            <param name="expirationDate">Data de vencimento da chave</param>
            <remarks>O código desta função suporta até 27 anos após a data base, após atingir esse periodo deve ser mudado a data base</remarks>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.Licence.ValidateSerial(System.String)">
            <summary>
            Valida serial informado de acordo com regra estabelecida pela Fashion
            </summary>
            <param name="serial">Número serial</param>
            <exception cref="T:Fashion.Framework.Common.Utils.LicenceException">Emite exceção do tipo LicenceException caso o serial seja inválido ou tenha expirado</exception>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.LicenceHelper.GetSerialKeyAlphaNumeric(Fashion.Framework.Common.Utils.SNKeyLength)">
            Generate standard serial key with alphanumeric format
            the supported length of the serial key
            returns formated serial key
        </member>
        <member name="M:Fashion.Framework.Common.Utils.LicenceHelper.GetSerialKeyNumeric(Fashion.Framework.Common.Utils.SNKeyNumLength)">
            Generate serial key with only numeric
            the supported length of the serial key
            returns formated serial key
        </member>
        <member name="T:Fashion.Framework.Common.Utils.NativeMethods">
            <summary>
             Métodos nativos (Windows API).
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
            Exclui um objeto GDI da memória.
            </summary>
            <param name="hObject">Ponteiro para o objeto.</param>
            <returns>Verdadeiro se a operação ocorreu com sucesso.</returns>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.ResourceExtractor">
            <summary>
            Classe responsável por extrair 'arquivos de resources'.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.ResourceExtractor.ExtractResourceToFile(System.String,System.String)">
            <summary>
            Extrai um recurso para um arquivo em disco.
            </summary>
            <param name="resourceName"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.ResourceExtractor.ExtractResourceString(System.String)">
            <summary>
            Extrai um recurso como texto.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.ResourceExtractor.ExtractResourceToFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Extrai um recurso para um arquivo.
            </summary>
            <param name="assembly"></param>
            <param name="resourceName"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.ResourceExtractor.ExtractResourceString(System.Reflection.Assembly,System.String)">
            <summary>
            Extrai um recurso como texto.
            </summary>
            <param name="assembly"></param>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.HashAlgorithmType">
            <summary>
            Tipo de algoritimo de hash.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.HashAlgorithmType.Md5">
            <summary>
            Md5.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.HashAlgorithmType.Sha1">
            <summary>
            Sha1.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.HashAlgorithmType.Sha256">
            <summary>
            Sha256.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.HashAlgorithmType.Sha384">
            <summary>
            Sha384.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.HashAlgorithmType.Sha512">
            <summary>
            Sha512.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.SimpleHash">
            <summary>
            This class generates and compares hashes using MD5, SHA1, SHA256, SHA384, 
            and SHA512 hashing algorithms. Before computing a hash, it appends a
            randomly generated salt to the plain text, and stores this salt appended
            to the result. To verify another plain text value against the given hash,
            this class will retrieve the salt value from the hash string and use it
            when computing a new hash of the plain text. Appending a salt value to
            the hash may not be the most efficient approach, so when using hashes in
            a real-life application, you may choose to store them separately. You may
            also opt to keep results as byte arrays instead of converting them into
            base64-encoded strings.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.SimpleHash.ComputeMd5HashFromFile(System.IO.Stream)">
            <summary>
            Computa o hash de um arquivo.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.SimpleHash.VerifyMd5HashFromFile(System.IO.Stream,System.String)">
            <summary>
            Verifica o hash do arquivo.
            </summary>
            <param name="file"></param>
            <param name="hashKey"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.SimpleHash.ComputeHash(System.String,Fashion.Framework.Common.Utils.HashAlgorithmType,System.Byte[])">
            <summary>
            Generates a hash for the given plain text value and returns a
            base64-encoded result. Before the hash is computed, a random salt
            is generated and appended to the plain text. This salt is stored at
            the end of the hash value, so it can be used later for hash
            verification.
            </summary>
            <param name="plainText">
            Plaintext value to be hashed. The function does not check whether
            this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1",
            "SHA256", "SHA384", and "SHA512" (if any other value is specified
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="saltBytes">
            Salt bytes. This parameter can be null, in which case a random salt
            value will be generated.
            </param>
            <returns>
            Hash value formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.SimpleHash.VerifyHash(System.String,Fashion.Framework.Common.Utils.HashAlgorithmType,System.String)">
            <summary>
            Compares a hash of the specified plain text value to a given hash
            value. Plain text is hashed with the same salt value as the original
            hash.
            </summary>
            <param name="plainText">
            Plain text to be verified against the specified hash. The function
            does not check whether this parameter is null.
            </param>
            <param name="hashAlgorithm">
            Name of the hash algorithm. Allowed values are: "MD5", "SHA1", 
            "SHA256", "SHA384", and "SHA512" (if any other value is specified,
            MD5 hashing algorithm will be used). This value is case-insensitive.
            </param>
            <param name="hashValue">
            Base64-encoded hash value produced by ComputeHash function. This value
            includes the original salt appended to it.
            </param>
            <returns>
            If computed hash mathes the specified hash the function the return
            value is true; otherwise, the function returns false.
            </returns>
        </member>
        <member name="T:Fashion.Framework.Common.Utils.TrackableHelper">
            <summary>
            Métodos de ajuda para objetos ITrackable.
            </summary>
        </member>
        <member name="F:Fashion.Framework.Common.Utils.TrackableHelper.HashProperty">
            <summary>
            Nome da propriedade Hash.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.TrackableHelper.GetHash(System.Object[],System.String[])">
            <summary>
            Calcula o hash da entidade através dos valores de suas propriedades.
            </summary>
            <param name="state">Lista de valores.</param>
            <param name="propertyNames">Lista de nomes.</param>
            <returns>Hash MD5.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.TrackableHelper.CalculateHash(Fashion.Framework.Common.ITrackable)">
            <summary>
            Calcula o hash de um objeto de domínio.
            </summary>
            <param name="entity">Entidade.</param>
            <returns>Uma string contendo o hash.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.TrackableHelper.HasValidHash(Fashion.Framework.Common.ITrackable)">
            <summary>
            Verifica se o hash da entidade é válido.
            </summary>
            <param name="entity">Entidade de domínio.</param>
            <returns>Verdadeiro se o hash é válido, caso contrário, falso.</returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.TrackableHelper.GetCollectionHash(System.Object)">
            <summary>
            Calcula o hash baseado nos itens da coleção.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Utils.TrackableHelper.HasValidCollectionHash(Fashion.Framework.Common.ITrackable,System.String)">
            <summary>
            Verifica se o hash da coleção é válido.
            </summary>
            <param name="entity">Entidade que contém a coleção.</param>
            <param name="collectionName">Nome da coleção.</param>
            <returns>Verdadeiro se o hash é válido, caso contrário, falso.</returns>
        </member>
        <member name="T:Fashion.Framework.Common.Validators.CompareAttribute">
            <summary>
            Valida uma propriedade comparando com outra.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.CompareAttribute.#ctor(System.String)">
            <summary>
            Compara uma propriedade com outra.
            </summary>
            <param name="otherProperty"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.CompareAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class. 
            </returns>
            <param name="value">The value to validate.</param><param name="validationContext">The context information about the validation operation.</param>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.CompareAttribute.FormatPropertyForClientValidation(System.String)">
            <summary>
            Formata uma propriedade para validação no cliente.
            </summary>
            <param name="property"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Fashion.Framework.Common.Validators.CompareAttribute.OtherProperty">
            <summary>
            Outra propriedade.
            </summary>
        </member>
        <member name="T:Fashion.Framework.Common.Validators.ConditionalAttributeBase">
            <summary>
            Classe base para validações condicionais.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.ConditionalAttributeBase.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.ConditionalAttributeBase.#ctor(System.String)">
            <summary>
            Construtor com opção de mensagem de erro.
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.ConditionalAttributeBase.ShouldRunValidation(System.Object,System.String,System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Verifica se a validação deve ser executada.
            </summary>
            <param name="value"></param>
            <param name="dependentProperty"></param>
            <param name="targetValue"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.ConditionalAttributeBase.GetDependentFieldValue(System.String,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Busca o valor do campo dependente.
            </summary>
            <param name="dependentProperty"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Fashion.Framework.Common.Validators.CpfCnpjAttribute">
            <summary>
            Valida um CPF ou CNPJ.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.CpfCnpjAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid. 
            </summary>
            <returns>
            true if the specified value is valid; otherwise, false.
            </returns>
            <param name="value">The value of the object to validate. </param>
        </member>
        <member name="T:Fashion.Framework.Common.Validators.DateRangeAttribute">
            <summary>
            Valida um data entre os dias especificados.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.DateRangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Especifique quantos dias esta data é válida apartir de hoje.
            Coloque um valor negativo para datas retroativas.
            </summary>
            <param name="startDaysFromNow">Quantidade mínima de dias.</param>
            <param name="endDaysFromNow">Quantidade máxima de dias.</param>
        </member>
        <member name="T:Fashion.Framework.Common.Validators.RequiredIfAttribute">
            <summary>
            Verifica se uma propriedade possui um valor específico.
            </summary>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.RequiredIfAttribute.#ctor(System.String,System.Object)">
            <summary>
            Construtor.
            </summary>
            <param name="dependentProperty"></param>
            <param name="targetValue"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.RequiredIfAttribute.#ctor(System.String,System.Object,System.String)">
            <summary>
            Construtor.
            </summary>
            <param name="dependentProperty"></param>
            <param name="targetValue"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Fashion.Framework.Common.Validators.RequiredIfAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
            <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class. 
            </returns>
            <param name="value">The value to validate.</param><param name="validationContext">The context information about the validation operation.</param>
        </member>
        <member name="P:Fashion.Framework.Common.Validators.RequiredIfAttribute.DependentProperty">
            <summary>
            Propriedade dependente.
            </summary>
        </member>
        <member name="P:Fashion.Framework.Common.Validators.RequiredIfAttribute.TargetValue">
            <summary>
            Alvo.
            </summary>
        </member>
    </members>
</doc>
