@using Fashion.ERP.Domain.Almoxarifado
@model Fashion.ERP.Web.Areas.Almoxarifado.Models.RequisicaoMaterialModel

<fieldset>
    <legend>Dados da Requisição de Material</legend>
    @{
        if (ViewContext.RouteData.GetRequiredString("action") == "Editar")
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group form-group-sm">
                        @Html.LabelForRequired(x => x.Numero)
                        <div class="col-sm-8 col-md-8 col-lg-7">
                            @Html.TextBoxFor(x => x.Numero, new { @class = "numeric-only form-control" })
                            @Html.HiddenFor(x => x.Numero)
                            @Html.ValidationMessageFor(x => x.Numero, null, new {@class = "help-block"})
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group form-group-sm">
                        @Html.LabelForRequired(x => x.Data)
                        <div class="col-sm-8 col-md-8 col-lg-7">
                            @Html.EditorFor(x => x.Data)
                            @Html.HiddenFor(x => x.Data)
                            @Html.ValidationMessageFor(x => x.Data, string.Empty, new { @class = "help-block" })
                        </div>
                    </div>
                </div>  
            </div>
        }
    }
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.TipoItem)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.DropDownListFor(x => x.TipoItem, null, "-- Selecione --", new { @class = "form-control" })                    
                    @Html.ValidationMessageFor(x => x.TipoItem, string.Empty, new { @class = "help-block" })
                    @Html.HiddenFor(x => x.TipoItem)
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.SituacaoRequisicaoMaterial)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    <p class="form-control-static form-group-sm">@Model.SituacaoRequisicaoMaterial.EnumToString()</p>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.UnidadeRequerente)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.DropDownListFor(x => x.UnidadeRequerente, null, "-- Selecione --", new { @class = "form-control" })                    
                    @Html.ValidationMessageFor(x => x.UnidadeRequerente, string.Empty, new { @class = "help-block" })
                    @{
                        if (ViewContext.RouteData.GetRequiredString("action") == "Editar")
                        {
                            @Html.HiddenFor(x => x.UnidadeRequerente)
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.CentroCusto)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.DropDownListFor(x => x.CentroCusto, null, "-- Selecione --", new { @class = "form-control" })                    
                    @Html.ValidationMessageFor(x => x.CentroCusto, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>    
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Requerente)
                <div class="col-sm-8 col-md-8 col-lg-7 ">
                    @Html.HiddenFor(x => x.Requerente, new { id = "funcionario" })
                    <div class="col-lg-3 col-sm-5 col-md-4 padding0">
                        <div class="input-group">
                            <input id="codigo-funcionario" class="numeric-only form-control" type="text" style="width: 70%;">
                            <span class="input-group-btn pull-left">
                                <button id="pesquisar-funcionario" class="btn btn-default btn-sm " type="button" data-toggle="modal" data-target="#modal-funcionario">
                                    <span class="glyphicon glyphicon-search"></span>
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-9 col-md-8 col-sm-12 padding0">
                        <input id="descricao-funcionario" class="form-control" readonly="" data-toggle="tooltip">
                    </div>
                    @Html.ValidationMessageFor(x => x.Requerente, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.UnidadeRequisitada)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.DropDownListFor(x => x.UnidadeRequisitada, null, "-- Selecione --", new { @class = "form-control" })                    
                    @Html.ValidationMessageFor(x => x.UnidadeRequisitada, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>  
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Origem, new { @class = "control-label" })
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.TextBoxFor(x => x.Origem, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Origem, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Observacao)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.TextAreaFor(x => x.Observacao, new { @class = "form-control"})
                    @Html.ValidationMessageFor(x => x.Observacao, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend>Itens da Requisição de Material</legend>
    <div class="table-responsive">
        @(Html.Kendo().Grid(@Model.GridItens)
              .Name("GridItens")
              .Columns(columns =>
              {
                  columns.Bound(p => p.IdRequisicaoMaterialItem).Hidden().ClientTemplate(
                      "<input type='hidden' name='GridItens[#= index(data)#].IdRequisicaoMaterialItem' value='#= IdRequisicaoMaterialItem #' />");
                  columns.Bound(p => p.Referencia).ClientTemplate("#= Referencia #" +
                                                                  "<input type='hidden' name='GridItens[#= index(data)#].Referencia' value='#= Referencia #' />");
                  columns.Bound(p => p.Descricao).ClientTemplate("#= Descricao #" +
                                                                 "<input type='hidden' name='GridItens[#= index(data)#].Descricao' value='#= Descricao #' />");
                  columns.Bound(p => p.UnidadeMedida).Width(55).ClientTemplate("#= UnidadeMedida #" +
                                                                               "<input type='hidden' name='GridItens[#= index(data)#].UnidadeMedida' value='#= UnidadeMedida #' />");
                  columns.Bound(p => p.QuantidadeSolicitada).Width(80).ClientTemplate("#= kendo.toString(QuantidadeSolicitada, \"n4\") #" +
                                                                                      "<input type='hidden' name='GridItens[#= index(data)#].QuantidadeSolicitada' value='#= formateDecimalGrid(QuantidadeSolicitada) #' />");
                  columns.Bound(p => p.QuantidadeAtendida).Width(80).ClientTemplate("#= kendo.toString(QuantidadeAtendida, \"n4\") #" +
                                                                                    "<input type='hidden' name='GridItens[#= index(data)#].QuantidadeAtendida' value='#= formateDecimalGrid(QuantidadeAtendida) #' />");
                  columns.Bound(p => p.QuantidadeCancelada).Width(80).ClientTemplate("#= kendo.toString(QuantidadeCancelada, \"n4\") #" +
                                                                                     "<input type='hidden' name='GridItens[#= index(data)#].QuantidadeCancelada' value='#= formateDecimalGrid(QuantidadeCancelada) #' />");
                  columns.Bound(p => p.QuantidadeDisponivel).Width(80).ClientTemplate("#= kendo.toString(QuantidadeDisponivel, \"n4\") #" +
                                                                                      "<input type='hidden' name='GridItens[#= index(data)#].QuantidadeDisponivel' value='#= formateDecimalGrid(QuantidadeDisponivel) #' />");
                  columns.Bound(p => p.SituacaoRequisicaoMaterial).ClientTemplate("#= SituacaoRequisicaoMaterial #" +
                                                                                  "<input type='hidden' name='GridItens[#= index(data)#].SituacaoRequisicaoMaterial' value='#= SituacaoRequisicaoMaterial #' />");
                  columns.Bound(p => p.Foto).ClientTemplate( "#if(Foto != null  && Foto != '') {#" + 
                                                             "<a href='" + "#= Foto #" + "' data-lightbox='foto' title='Material'><img src='" + "#= Foto #" + "' class='img-rounded' style='width: 48px; height: 48px;'/></a>"+ 
                                                             "#}#" +
                                                             "<input type='hidden' name='GridItens[#= index(data)#].Foto' value='#= Foto #' />").Width(60);
                  columns.Command(command => command.Destroy().Text("Excluir") ).Width(105);
              })
              .DataSource(s => s.Ajax()
                  .Model(model =>
                  {
                      model.Id(item => item.IdRequisicaoMaterialItem); 
                      model.Field(product => product.Descricao).Editable(true); 
                      model.Field(product => product.QuantidadeAtendida).Editable(false); 
                      model.Field(product => product.QuantidadeCancelada).Editable(false); 
                      model.Field(product => product.QuantidadeSolicitada).Editable(true); 
                      model.Field(product => product.QuantidadeDisponivel).Editable(false); 
                      model.Field(product => product.UnidadeMedida).Editable(true); 
                      model.Field(product => product.Foto).Editable(false); 
                      model.Field(product => product.SituacaoRequisicaoMaterial).Editable(false).DefaultValue(SituacaoRequisicaoMaterial.NaoAtendido.EnumToString());  
                  })
              )
              .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new { @id = "pesquisarvarios-material", @href = "javascript:void(0)", @class = "btn-primary", data_toggle="modal", data_target="#modal-materiais" }))
              .Editable(editable =>
              {
                  editable.Mode(GridEditMode.InCell);
                  editable.DisplayDeleteConfirmation("Tem certeza que deseja excluir esse item?");
              })
              .Resizable(resize => resize.Columns(true))
              .Events(events => events.DataBound("onDataBound").Edit("onEditGrid"))
              .Navigatable()
              )  
    </div>
</fieldset>

@if (@Model.SituacaoRequisicaoMaterial == SituacaoRequisicaoMaterial.NaoAtendido)
{
    @Html.FormActionAuth(this.IsEditar(), MVC.Almoxarifado.RequisicaoMaterial.Excluir(Model.Id))
}
 else 
{
    <br/>
    <div class="alert alert-info">
        Não é possível alterar uma requisição de material com situação diferente de não atendido.
    </div>
}

<script>
    function formateDecimalGrid(valor) {
        if (valor == null) {
            return "";
        }
        return valor.toString().replace(".", ",");
    }

    function index(dataItem) {
        var data = $("#GridItens").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function obtenhaQuantidadeDisponivel(materialId) {
        $.ajaxSetup({
            async: false
        });
        
        var quantidadeDisponivel = 0;
        $.getJSON('/Almoxarifado/RequisicaoMaterial/ObtenhaQuantidadeDisponivel?materialId=' + materialId + "&unidadeRequisitada=" + $("#UnidadeRequisitada option:selected").val(), function (data) {
            quantidadeDisponivel = data;
        });

        $.ajaxSetup({
            async: true
        });

        return quantidadeDisponivel;
    }

    $(document).ready(function () {
        $("#selecionar-materiais").on("pesquisar", function (ev, itens) {

            if (itens.DataItemsSelecionados.length == 0) {
                return;
            }

            var grid = $('#GridItens').data("kendoGrid");
            var model = grid.dataSource.options.schema.model;
            var dadosAtuais = grid.dataSource.data();
            var novosDados = itens.DataItemsSelecionados;


            for (var i = 0; i < novosDados.length; i++) {
                var dataItemNovo = novosDados[i];

                for (var j = 0; j < dadosAtuais.length; j++) {
                    var dataItemAtual = dadosAtuais[j];
                    if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                        dataItemNovo.Descartado = true;
                    }
                }
                
                if (!dataItemNovo.Descartado) {
                    var dataItemNovoFinal = {
                        Referencia: dataItemNovo.Referencia,
                        Descricao: dataItemNovo.Descricao,
                        UnidadeMedida: dataItemNovo.UnidadeMedida,
                        IdRequisicaoMaterialItem: 0,
                        QuantidadeSolicitada: 0,
                        QuantidadeAtendida: 0,
                        QuantidadeCancelada: 0,
                        QuantidadeDisponivel: obtenhaQuantidadeDisponivel(dataItemNovo.Id),
                        SituacaoRequisicaoMaterial: 'NÃO ATENDIDO',
                        Foto: dataItemNovo.Foto
                    };

                    dadosAtuais.unshift(dataItemNovoFinal);
                }
            }

            var dataSource = new kendo.data.DataSource({
                data: dadosAtuais,
                schema: {
                    model: model
                }
            });
            dataSource.read();
            grid.setDataSource(dataSource);
            grid.refresh();

        });

        if (ehTelaNovo()) {
            var grid = $("#GridItens").data("kendoGrid");
            grid.hideColumn("QuantidadeAtendida");
            grid.hideColumn("QuantidadeCancelada");
            grid.hideColumn("SituacaoRequisicaoMaterial");

            if (grid.dataSource.data().length == 0) {
                $('#pesquisarvarios-material').addClass("k-state-disabled");
                $("#pesquisarvarios-material").css("pointer-events", "none");
            }
        }

        $("#funcionario").change(function(e) {
            $("#funcionario").valid();
        });

        $('select[name=TipoItem]').change(function (e) {
            habiliteDesabiliteBotaoIncluir();
            $('input[name=TipoItem]').val($("#TipoItem option:selected").val());
            configureParametroPesquisarVariosMateriaisPorTipoItem($("#TipoItem option:selected").val());
        });

        $('select[name=UnidadeRequisitada]').change(function (e) {
            habiliteDesabiliteBotaoIncluir();
        });
    });

    function habiliteDesabiliteBotaoIncluir() {
        if ($("#TipoItem option:selected").val() == '' || $("#UnidadeRequisitada option:selected").val() == '') {
            $("#pesquisarvarios-material").css("pointer-events", "none");
            $('#pesquisarvarios-material').addClass("k-state-disabled");
        } else {
            $("#pesquisarvarios-material").css("pointer-events", "auto");
            $('#pesquisarvarios-material').removeClass("k-state-disabled");
        }
    }

    function onDataBound(e) {
        toogleTipoItem();
    }

    function toogleTipoItem() {
        var gridData = $("#GridItens").data("kendoGrid").dataSource.data();

        if (gridData.length != 0) {
            $("#TipoItem").prop("disabled", true);
        } else {
            if (ehTelaNovo()) {
                $("#TipoItem").prop("disabled", false);
            }
        }
    }

    function ehTelaNovo() {
        var pathArray = window.location.pathname.split('/');
        return $.inArray('Novo', pathArray) > -1;
    }

    function onEditGrid(e) {
        $("#Descricao").attr("readonly", true);
        $("#Descricao").width('86%');
        $("#ReferenciaExterna").attr("readonly", true);
        $("#UnidadeMedida").attr("readonly", true);
        $("#UnidadeMedida").addClass("input-small");

        if ($("#QuantidadeSolicitada").get(0) != null) {
            $("#QuantidadeSolicitada").data("kendoNumericTextBox").wrapper.width("100px");
        }
        
        //if (!e.model.isNew()) {
        //    $("#Referencia").attr("readonly", true);
        //    $("#pesquisar-materiais").attr("disabled", true);
        //}
    }

    $('#form').submit(function(e) {
        //e.preventDefault();

        // Validar
        var formValido = formularioEhValido();

        if (!$("#form").valid() || !formValido) {
            e.preventDefault();
            $('#btnSubmit').button('reset');
            return false;
        }

        var dataGridItens = $("#GridItens").data("kendoGrid").dataSource.data();

        if (dataGridItens.length == 0) {
            e.preventDefault();
            exibaAlertaErro("Insira pelo menos um item na grid.");
            $('#btnSubmit').button('reset');
            return false;
        }

        var mensagem = "";
        for (var i = 0; i < dataGridItens.length; i++) {
            var dataItem = dataGridItens[i];
            if (dataItem.QuantidadeSolicitada == 0 || dataItem.QuantidadeSolicitada == null) {
                mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna quantidade solicitada.<br/>";
            }
        }

        if (mensagem != "") {
            e.preventDefault();
            exibaAlertaErro(mensagem);
            $('#btnSubmit').button('reset');
            return false;
        }

        return true;
    });

    function formularioEhValido() {
        var retorno = true;

        // Requerente 
        if ($("#codigo-funcionario").val() == false) {
            $('#funcionario').val("");
            $('#funcionario').valid();
            $('#descricao-funcionario').text("");
            retorno = false;
        }

        return retorno;
    }

    function obtenhaDadosGridItens() {
        var grid = $("#GridItens").data("kendoGrid");
        if (grid) {
            return grid.dataSource.data();
        }
        return null;
    }

    $.fn.serializeObject = function () {
        var o = Object.create(null),
            elementMapper = function (element) {
                element.name = $.camelCase(element.name);
                return element;
            },
            appendToResult = function (i, element) {
                var node = o[element.name];

                if ('undefined' != typeof node && node !== null) {
                    o[element.name] = node.push ? node.push(element.value) : [node, element.value];
                } else {
                    o[element.name] = element.value;
                }
            };

        $.each($.map(this.serializeArray(), elementMapper), appendToResult);
        return o;
    };
    
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: { 
                quantidadesolicitadavalidation: function (input, params) {
                    if (input.is("[name='QuantidadeSolicitada']") && input.val()) {
                        return input.val() != 0 && input.val() != '';
                    }
                    return true;
                },
                referenciavalidation: function (input, params) {
                    if (input.is("[name='Referencia']")) {
                        return input.val() != '' ;
                    }
                    return true;
                }
            },
            messages: { 
                quantidadesolicitadavalidation: function (input) {
                    input.attr("data-quantidadesolicitadavalidation-msg", "A Qtd. Solicitada não pode ser 0.");
                    return input.attr("data-quantidadesolicitadavalidation-msg");
                },
                referenciavalidation: function (input) {
                    input.attr("data-referenciavalidation-msg", "O material deve ser selecionado");
                    return input.attr("data-referenciavalidation-msg");
                }
            }
        });
    })(jQuery, kendo);
</script>