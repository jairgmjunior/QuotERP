@model Fashion.ERP.Web.Areas.Almoxarifado.Models.MaterialCustoModel

@using (Html.BeginForm(MVC.Almoxarifado.Material.MaterialCusto(), FormMethod.Post, new {id = "form", @class = "form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.FuncionarioLogado)

    <fieldset>
        <legend><small>Dados do Material</small></legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Referencia, new { @class = "control-label col-sm-4 col-md-3 font-bold" })
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.Referencia)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Descricao, new { @class = "control-label col-sm-4 col-md-3 font-bold" })
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.Descricao)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.UnidadeMedida, new { @class = "control-label col-sm-4 col-md-3 font-bold" })
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.DisplayFor(x => x.UnidadeMedida)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    if (!string.IsNullOrEmpty(Model.Foto))
    {
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.Label("Foto", new { @class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-9">
                        <div class="col-sm-2 no-gutter" style="width:130px">
                            <a href="@Model.Foto" class="img-thumbnail" data-lightbox='foto'><img src="@Model.Foto" style="width:100px; height:100px"></a>
                        </div>
                    </div>
                </div>
            </div>     
        </div>
    }

    <fieldset>
        <legend><small>Custo do Material</small></legend>        
        <div class="row">
            <div class="col-sm-12">
                <div class="table-responsive">
                    @(Html.Kendo().Grid(Model.GridItens)
                          .Name("GridItens")
                          .Editable(e => e.Mode(GridEditMode.InCell))
                          .Navigatable()
                          .Columns(columns =>
                          {
                              columns.Bound(x => x.Id).Hidden()
                                  .ClientTemplate("<input type='hidden' name='GridItens[#= index(data)#].Id' value='#= Id #' />");
                              columns.Bound(x => x.CodigoFornecedor).Hidden()
                                  .ClientTemplate("<input type='hidden' name='GridItens[#= index(data)#].CodigoFornecedor' value='#= CodigoFornecedor #' />");
                              columns.Bound(x => x.Fornecedor)
                                  .ClientTemplate("#= Fornecedor #<input type='hidden' name='GridItens[#= index(data)#].Fornecedor' value='#= Fornecedor #' />");
                              columns.Bound(x => x.Data).Format("{0:dd/MM/yyyy}")
                                  .ClientTemplate("#= kendo.toString(Data, 'dd/MM/yyyy') #<input type='hidden' name='GridItens[#= index(data)#].Data' value='#= Data #' />");
                              columns.Bound(x => x.CustoAquisicao).EditorTemplateName("numeric4casasdecimais")
                                  .ClientTemplate("#= kendo.toString(CustoAquisicao, \"n4\") #<input type='hidden' name='GridItens[#= index(data)#].CustoAquisicao' value='#= formateDecimalGrid(CustoAquisicao) #' />");
                              columns.Bound(x => x.Custo).EditorTemplateName("numeric4casasdecimais")
                                  .ClientTemplate("#= kendo.toString(Custo, \"n4\") #<input type='hidden' name='GridItens[#= index(data)#].Custo' value='#= formateDecimalGrid(Custo) #' />");
                              columns.Bound(x => x.Ativo).Template(@<text></text>)
                                  .ClientTemplate("<div><input type='checkbox' class='chkbx check-box' #= Ativo ? checked='checked' : '' # onclick='clicouCheckBox(this)'/>"+
                                                  "<input id='Check' type='hidden' name='GridItens[#= index(data)#].Ativo' value='#= Ativo #' /></div>").Width(27);
                              columns.Bound(x => x.CadastroManual).Template(@<text></text>)
                                  .ClientTemplate("<div><input type='checkbox' class='chkbx check-box' disabled #= CadastroManual ? checked='checked' : '' # onclick='clicouCheckBox(this)'/>"+
                                                  "<input id='Check' type='hidden' name='GridItens[#= index(data)#].CadastroManual' value='#= CadastroManual #' /></div>").Width(27);
                              columns.Bound(x => x.Responsavel)
                                  .ClientTemplate("#= Responsavel #<input type='hidden' name='GridItens[#= index(data)#].Responsavel' value='#= Responsavel #' />");
                              columns.Bound(x => x.Editavel).Hidden()
                                  .ClientTemplate("<input type='hidden' name='GridItens[#= index(data)#].Editavel' value='#= Editavel #' />");

                              columns.Command(command => command.Destroy()).Width(110);
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax().ServerOperation(false)
                              .Model(model =>
                              {
                                  model.Id(item => item.Id);
                                  model.Field(item => item.Id).DefaultValue(0);                                                                    
                              })
                              .Events(events => events.Error("onKendoGridError"))
                          )
                          .Filterable()
                          .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new { @id = "pesquisar-fornecedor", @href = "javascript:void(0)", @class = "btn-primary", data_toggle="modal", data_target="#modal-fornecedor" }))
                          .Events(events => events.Edit("onEditGrid").DataBound("onDataBound")))
                </div>
            </div>
        </div>
    </fieldset>

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
                    <button id="btnSubmit" class="btn btn-primary" type="submit" data-loading-text="Aguarde...">Salvar</button>
                </div>
            </div>
        </div>     
    </div>
}

@{
    Html.RenderAction("PesquisarComParametros", "Fornecedor", new { area = "Comum", SelecaoUnica = "true", ValidacaoDuplicadosGridOrigem = "false"});
}

<script>

    $(document).ready(function () {
       

        $('#form').submit(function (e) {
            //e.preventDefault();
            limpeMensagensAlerta();

            var dataGridItens = $("#GridItens").data("kendoGrid").dataSource.data();
            var mensagem = "";
            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Quantidade == 0 || dataItem.Quantidade == null) {
                    mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna qtde programada.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.DepartamentoProducao == 0 || dataItem.DepartamentoProducao == null) {
                    mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna departamento produção.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if ((dataItem.Unidade == 0 || dataItem.Unidade == null) && dataItem.Reservado == true && dataItem.Editavel == true) {
                    mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna unidade.<br/>";
                }
            }

            if (mensagem != "") {
                e.preventDefault();
                exibaAlertaErro(mensagem);
                $('#btnSubmit').button('reset');
                return false;
            }

            $('#GridItens').data("kendoGrid").dataSource.filter({});
            return true;
        });
    });

    function obtenhaNovoDataItem(dataItemGridPesquisa) {
        return {
            Fornecedor: dataItemGridPesquisa.Nome,
            Data: new Date(),
            CodigoFornecedor: dataItemGridPesquisa.Codigo,
            CustoAquisicao: 0,
            Custo: 0,
            Ativo: false,
            CadastroManual: true,
            Responsavel: $("#FuncionarioLogado").val(),
            Editavel: true
        };
    }

    function formateDecimalGrid(valor) {
        if (valor == null) {
            return "";
        }
        return valor.toString().replace(".", ",");
    }

    function index(dataItem) {
        var data = $("#GridItens").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onEditGrid(e) {
        if (e.container.index() == 2 || e.container.index() == 3 || e.container.index() == 6
                || e.container.index() == 7 || e.container.index() == 8) {
            this.closeCell();
        }

        var row = $(e.container).closest("tr");
        var grid = $('#GridItens').data("kendoGrid");
        var dataItem = grid.dataItem(row);

        if (dataItem.Editavel == false) {
            this.closeCell();
        }
    }

    function onDataBound() {
        $('.chkbx').each(function (index, element) {
            var grid = $('#GridItens').data().kendoGrid;
            var dataItem = grid.dataItem($(element).closest('tr'));
            if (dataItem.Editavel == false) {
                $(element).attr('disabled', 'disabled');
                var row = $(element).closest("tr");
                row.addClass("k-state-disabled");
                $(row).find(".k-grid-delete").removeClass("k-grid-delete");
            }
        });
    }

    function clicouCheckBox(a) {
        var checked = $(a).is(':checked');

        if (!checked)
            desmarqueCheckBox($(a));
        else {
            marqueCheckBox($(a));
        }

        var numChkBoxes = $('.chkbx').length;
        var numChkBoxesChecked = $('.chkbx:checked').length;
        if (numChkBoxes == numChkBoxesChecked && numChkBoxes > 0) {
            $('#checkAll').attr('checked', 'checked');
        }
        else {
            $('#checkAll').removeAttr('checked');
        }
    }

    function marqueCheckBox(checkBoxElement) {
        var row = $(checkBoxElement).closest("tr");
        var grid = $('#GridItens').data("kendoGrid");
        var dataItem = grid.dataItem(row);

        if (checkBoxElement.disabled) return;
        $(checkBoxElement).parent().find('input[type=hidden]').val(true);
        $(checkBoxElement).attr('checked', 'checked');

        dataItem.set("Reservado", true);
    }

    function desmarqueCheckBox(checkBoxElement) {
        if (checkBoxElement.disabled) return;
        $(checkBoxElement).parent().find('input[type=hidden]').val(false);
        $(checkBoxElement).removeAttr('checked');

        var row = $(checkBoxElement).closest("tr");
        var grid = $('#GridItens').data("kendoGrid");
        var dataItem = grid.dataItem(row);
        dataItem.Reservado = false;
        dataItem.set("Reservado", false);
    }
</script>