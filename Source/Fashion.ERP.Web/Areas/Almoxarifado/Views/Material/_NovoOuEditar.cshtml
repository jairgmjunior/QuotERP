@using Fashion.ERP.Web.Areas.Almoxarifado.Models
@model MaterialModel

@{
    var helper = new UrlHelper(Request.RequestContext);
    var urlFoto = string.Empty;
    var temFoto = Model.FotoNome != null && Model.FotoId.HasValue;

    if (temFoto)
    {
        urlFoto = helper.RouteUrl(MVC.Arquivo.Imagens(Model.FotoId.Value).GetRouteValueDictionary());
    }
}

@using (Html.BeginForm((ActionResult)ViewData["FormResult"], FormMethod.Post, new { id = "form", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Ativo)
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Referencia)
                <div class="controls">
                    @if (this.IsEditar())
                    {
                        @Html.HiddenFor(x => x.Referencia)
                        @Html.UneditableTextBoxFor(x => x.Referencia)
                    }
                    else
                    {
                        @Html.TextBoxFor(x => x.Referencia, new { @class = "input-small" })
                        @Html.ValidationMessageFor(x => x.Referencia, null, new { @class = "help-block" })
                    }
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Descricao)
                <div class="controls">
                    @Html.EditorFor(x => x.Descricao)
                    @Html.ValidationMessageFor(x => x.Descricao, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Detalhamento)
                <div class="controls">
                    @Html.EditorFor(x => x.Detalhamento)
                    @Html.ValidationMessageFor(x => x.Detalhamento, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.UnidadeMedida)
                <div class="controls">
                    @Html.DropDownList("UnidadeMedida", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.UnidadeMedida, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Categoria)
                <div class="controls">
                    @Html.DropDownList("Categoria", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.Categoria, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Subcategoria)
                <div class="controls">
                    @Html.DropDownList("Subcategoria", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.Subcategoria, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Familia)
                <div class="controls">
                    @Html.DropDownList("Familia", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.Familia, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.MarcaMaterial)
                <div class="controls">
                    @Html.DropDownList("MarcaMaterial", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.MarcaMaterial, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Ncm)
                <div class="controls">
                    @Html.TextBoxFor(x => x.Ncm, new { data_mask = "99999999" })
                    @Html.ValidationMessageFor(x => x.Ncm, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Aliquota)
                <div class="controls">
                    @Html.EditorFor(x => x.Aliquota, "numeric")
                    @Html.ValidationMessageFor(x => x.Aliquota, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.GeneroFiscal)
                <div class="controls">
                    @Html.DropDownList("GeneroFiscal", null, new { @class = "input-xlarge" })
                    @Html.ValidationMessageFor(x => x.GeneroFiscal, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.TipoItem)
                <div class="controls">
                    @Html.DropDownList("TipoItem", null, new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.TipoItem, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.PesoBruto)
                <div class="controls">
                    @Html.EditorFor(x => x.PesoBruto, "numeric")
                    @Html.ValidationMessageFor(x => x.PesoBruto, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.PesoLiquido)
                <div class="controls">
                    @Html.EditorFor(x => x.PesoLiquido, "numeric")
                    @Html.ValidationMessageFor(x => x.PesoLiquido, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.OrigemSituacaoTributaria)
                <div class="controls">
                    @Html.DropDownList("OrigemSituacaoTributaria", null, new { @class = "input-xlarge" })
                    @Html.ValidationMessageFor(x => x.OrigemSituacaoTributaria, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.FotoNome)
                <div class="controls">
                    @Html.HiddenFor(x => x.FotoId)
                    <div class="clearfix">
                        <div class="fileupload @(temFoto ? "fileupload-exists" : "fileupload-new")" data-provides="fileupload" data-crop="crop">
                            <div class="thumbnail">
                                <img id="imagem-avatar" src="@(temFoto ? urlFoto : "/Content/images/no_image.jpg")" style="width: 150px; height: 150px;" />
                            </div>
                            <div>
                                <span class="btn btn-file">
                                    <span class="fileupload-new">Novo</span>
                                    <span class="fileupload-exists">Alterar</span>
                                    <input type="file" name="foto" />
                                    @Html.HiddenFor(x => x.FotoNome)
                                </span>
                                <a href="javascript:void(0)" class="btn fileupload-exists" data-dismiss="fileupload">Remover</a>
                            </div>
                        </div>
                    </div>

                    <div class="progress" style="display: none">
                        <div class="bar"></div>
                    </div>
                    @Html.ValidationMessageFor(x => x.FotoNome, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.CodigoBarra)
                <div class="controls">
                    @Html.EditorFor(x => x.CodigoBarra)
                    @Html.ValidationMessageFor(x => x.CodigoBarra, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Localizacao)
                <div class="controls">
                    @Html.EditorFor(x => x.Localizacao)
                    @Html.ValidationMessageFor(x => x.Localizacao, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Referência externa</label>
                <div class="controls">
                    <button id="adicionar-referencia-externa" class="btn" type="button">Adicionar</button>
                    @(Html.Kendo().Grid((IEnumerable<ReferenciaExternaModel>)ViewBag.ReferenciaExternas)
                          .Name("grid-referencias")
                          .Columns(columns =>
                          {
                              columns.Bound(x => x.Referencia);
                              columns.Bound(x => x.Descricao);
                              columns.Bound(x => x.Preco).Format("{0:C}");
                              columns.Bound(x => x.NomeFornecedor);
                              columns.Bound(x => x.Id)
                                  .ClientTemplate("<a href='/Almoxarifado/Material/RemoverReferenciaExterna/#= Id #' onclick='RemoverReferenciaExterna(this, event)' class='delete btn btn-small btn-danger'> X </a>")
                                  .Title("")
                                  .Width(30);
                          }).DataSource(s => s.Ajax()
                              .Read(r => r.Action("LerReferenciaExternas", "Material").Type(HttpVerbs.Get))
                          ))
                </div>
            </div>
            <div id="bordado">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.BordadoDescricao)
                    <div class="controls">
                        @Html.EditorFor(x => x.BordadoDescricao)
                        @Html.ValidationMessageFor(x => x.BordadoDescricao, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.BordadoPontos)
                    <div class="controls">
                        @Html.EditorFor(x => x.BordadoPontos)
                        @Html.ValidationMessageFor(x => x.BordadoPontos, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.BordadoAplicacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.BordadoAplicacao)
                        @Html.ValidationMessageFor(x => x.BordadoAplicacao, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.BordadoObservacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.BordadoObservacao)
                        @Html.ValidationMessageFor(x => x.BordadoObservacao, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div id="tecido">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TecidoComposicao)
                    <div class="controls">
                        @Html.EditorFor(x => x.TecidoComposicao)
                        @Html.ValidationMessageFor(x => x.TecidoComposicao, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TecidoArmacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.TecidoArmacao)
                        @Html.ValidationMessageFor(x => x.TecidoArmacao, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TecidoGramatura)
                    <div class="controls">
                        @Html.EditorFor(x => x.TecidoGramatura)
                        @Html.ValidationMessageFor(x => x.TecidoGramatura, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TecidoLargura)
                    <div class="controls">
                        @Html.EditorFor(x => x.TecidoLargura)
                        @Html.ValidationMessageFor(x => x.TecidoLargura, null, new { @class = "help-block" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TecidoRendimento)
                    <div class="controls">
                        @Html.EditorFor(x => x.TecidoRendimento)
                        @Html.ValidationMessageFor(x => x.TecidoRendimento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="form-actions">
        <button id="btnSubmit" class="btn btn-primary" type="submit" data-loading-text="Aguarde...">Salvar</button>
        @if (this.IsEditar())
        {
            @Html.ExcluirAuth(MVC.Almoxarifado.Material.Excluir(Model.Id))
        }
    </div>
}
@{Html.RenderPartial("_RecortarImagem");}

<script>
    $(function() {

        $.ajaxSetup({ cache: false });

        // Seleciona o conteúdo do input ao receber focus
        $('.k-input').on('focus', function() {
            var input = $(this);
            setTimeout(function() { input.select(); });
        });

        $('#Descricao').on("keypress", function() {
            var $descricao = $(this);
            var $detalhamento = $('#Detalhamento');
            var detVal = $detalhamento.val();
            var desVal = $descricao.val();

            if (detVal == desVal.substring(0, desVal.length - 1)) {
                $detalhamento.val($descricao.val());
            }
        });
        
        // Categoria
        var bordado = $('#bordado');
        var tecido = $('#tecido');

        // Limpa os formulários
        var escondeTecido = function () {
            tecido.find(':input').each(function () { $(this).val(''); });
            tecido.hide('slow');
        };

        var escondeBordado = function () {
            bordado.find(':input').each(function () { $(this).val(''); });
            bordado.hide('slow');
        };

        var onChangeCategoria = function($categoria) {
            var categoriaId = $categoria.val();

            if (categoriaId == '') {
                escondeTecido();
                escondeBordado();
                return;
            }

            var url = '/Almoxarifado/Categoria/GeneroCategoria/' + categoriaId;
            $.get(url, function (data) {
                if (data.Error) {
                    alert(data.Error);
                    return;
                }

                switch (data.GeneroCategoria) {
                    case 'Bordado':
                        bordado.show('slow');
                        escondeTecido();
                        break;
                    case 'Tecido':
                        tecido.show('slow');
                        escondeBordado();
                        break;
                    default:
                        escondeTecido();
                        escondeBordado();
                }
            });
        };
        
        // Marca o NCM por mudar o valor
        $('#Ncm').on("change", function () {
            $(this).data("valuechanged", true);
        });
        
        $('#Categoria').on("change", function () {
            
            // Preenche o combo de subcategoria de acordo com a categoria escolhida
            var subcategoria = $('#Subcategoria');
            subcategoria.empty();
            subcategoria.append($('<option />').text('-- Selecione --'));

            var categoriaId = $(this).val();
            if (categoriaId != '') {
                var url = '/Almoxarifado/Subcategoria/Subcategorias/' + categoriaId;
                $.getJSON(url, function (result) {
                    $.each(result, function (index, item) {
                        var option = $('<option />').val(item.Id).text(item.Nome);
                        subcategoria.append(option);
                    });
                }).fail(function (jqXhr, textStatus, errorThrown) {
                    alert(errorThrown);
                });
                

                // Mostra ou esconde os campos Tecido/Bordado
                onChangeCategoria($(this));
                
                @if (this.IsNovo())
                {
                    // Alterar o NCM automaticamente apenas no incluir
                    <text>
                    // Preenche o NCM da categoria informada
                    if ($('#Ncm').data("valuechanged") != true) {
                        $.getJSON('/Almoxarifado/Categoria/NcmCategoria/' + categoriaId, function(result) {

                            if (result.Error) {
                                alert(result.Error);
                                return;
                            }

                            $('#Ncm').val(result.Ncm);

                        }).fail(function(jqXhr, textStatus, errorThrown) {
                            alert(errorThrown);
                        });
                    }
                    </text>
                }
            }
        });

        // Dispara ao inicializar a tela
        onChangeCategoria($('#Categoria'));
    });
</script>
<!-- CADASTRO DE REFERÊNCIAS EXTERNAS -->
<div id="modal-referencias-externas" class="modal hide fade">
    <div class="modal-header">
        <a href="javascript:void(0)" class="close" data-dismiss="modal" aria-hidden="true">&times;</a>
        <h3>Referência externa</h3>
    </div>
    <form id="form-cadastrar-referencias-externas" class="form-horizontal">
        <div id="modal-body-referencias-externas" class="modal-body">
            <div class="control-group">
                <label class="control-label">Referência</label>
                <div class="controls">
                    <input type="text" name="Referencia" class="input-small" />
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Descrição</label>
                <div class="controls">
                    <input id="descricao-referencia-externa" type="text" name="Descricao" class="input-medium" />
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Cod. Barras</label>
                <div class="controls">
                    <input type="text" name="CodigoBarra" class="input-medium" />
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Preço</label>
                <div class="controls">
                    @(Html.Kendo().NumericTextBox().Name("Preco")
                        .Format("c")
                        .Min(0)
                        .HtmlAttributes(new { @class = "currency input-small" }))
                </div>
            </div>
            <div class="control-group">
                <label class="control-label">Fornecedor</label>
                <div class="controls">
                    <div class="input-append">
                        @Html.Hidden("Fornecedor")
                        <input id="codigo-fornecedor" class="input-small" type="text" />
                        <button id="pesquisar-fornecedor" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-fornecedor" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">Cancelar</button>
            <button id="submit-salvar-referencias-externas" class="btn btn-primary" type="button">Salvar</button>
        </div>
    </form>
</div>
<script>
    $(function () {
        
        $('#adicionar-referencia-externa').on('click', function () {
            $('#descricao-referencia-externa').val($('#Descricao').val());
            $('#modal-referencias-externas').modal({
                keyboard: false,
                backdrop: 'static'
            }).on('hide', function () {
                $('.modal').not(this).modal('hide');
            });
        });
        
        $('#submit-salvar-referencias-externas').on('click', function () {

            var url = '/Almoxarifado/Material/AdicionarReferenciaExterna';

            var $form = $('#form-cadastrar-referencias-externas');
            var formData = $form.serialize();
            
            $.post(url, formData, function (data) {
                
                if (data != '') {
                    alert(data);
                    return;
                }
                
                var grid = $('#grid-referencias').data("kendoGrid");
                grid.dataSource.read();
                $('#modal-referencias-externas').modal('hide');
                clearForm($form);
            });
        });
        
    });
    // Referência Externa
    function RemoverReferenciaExterna(a, e) {
        e.preventDefault();
        var url = $(a).attr('href');

        $.post(url, function () {
            var grid = $('#grid-referencias').data("kendoGrid");
            grid.dataSource.read();
        });
    }
</script>
@{
    Html.RenderAction("Pesquisar", "Fornecedor", new { area = "Comum" });
}