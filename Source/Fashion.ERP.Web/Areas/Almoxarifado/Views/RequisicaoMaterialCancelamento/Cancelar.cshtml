@model Fashion.ERP.Web.Areas.Almoxarifado.Models.RequisicaoMaterialCancelamentoModel

@using (Html.BeginForm(MVC.Almoxarifado.RequisicaoMaterialCancelamento.Cancelar(), FormMethod.Post, new { id = "form", @class = "form-horizontal", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)

    <legend>Dados da Requisição de Material</legend>
    <div class="">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Numero, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter ">
                            @Html.ValueFor(x => x.Numero)
                            @Html.HiddenFor(x => x.Numero)
                        </div>
                    </div>
                </div>
            </div>        
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Data, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.DisplayFor(x => x.Data)
                            @Html.HiddenFor(x => x.Data)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">        
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.TipoItemDescricao, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.TipoItemDescricao)
                            @Html.HiddenFor(x => x.TipoItemDescricao)
                        </div>
                    </div>
                </div>
            </div>    
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.SituacaoRequisicaoMaterialDescricao, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.SituacaoRequisicaoMaterialDescricao)
                            @Html.HiddenFor(x => x.SituacaoRequisicaoMaterialDescricao)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.UnidadeRequerenteNomeFantasia, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">                    
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.UnidadeRequerenteNomeFantasia)
                            @Html.HiddenFor(x => x.UnidadeRequerenteNomeFantasia)
                        </div>
                    </div>
                </div>
            </div>        
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.CentroCustoNome, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">                                        
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.CentroCustoNome)
                            @Html.HiddenFor(x => x.CentroCustoNome)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.RequerenteNome, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">                                        
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.RequerenteNome)
                            @Html.HiddenFor(x => x.RequerenteNome)
                        </div>
                    </div>
                </div>
            </div>        
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.UnidadeRequisitadaNomeFantasia, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.UnidadeRequisitadaNomeFantasia)
                            @Html.HiddenFor(x => x.UnidadeRequisitadaNomeFantasia)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Observacao, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.Observacao)
                            @Html.HiddenFor(x => x.Observacao)
                        </div>
                    </div>
                </div>
            </div>        
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelFor(x => x.Origem, new {@class = "control-label col-sm-4 col-md-3 font-bold"})
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="form-control-static no-gutter">
                            @Html.ValueFor(x => x.Origem)
                            @Html.HiddenFor(x => x.Origem)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <fieldset>
        <legend>Dados do Cancelamento</legend>
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.ObservacaoCancelamento)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        @Html.TextAreaFor(x => x.ObservacaoCancelamento, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.ObservacaoCancelamento, null, new {@class = "help-block"})
                    </div>
                </div>
            </div>
    </fieldset>
   
    @(Html.Kendo().Grid(Model.GridItemCancelado)
        .Name("GridItemCancelado")
        .Columns(columns =>
            {
                columns.Bound(p => p.Id).Hidden().ClientTemplate(
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].Id' value='#= Id #' />");
                columns.Bound(p => p.Referencia).ClientTemplate("#= Referencia #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].Referencia' value='#= Referencia #' />").Width(100);
                columns.Bound(p => p.Descricao).ClientTemplate("#= Descricao #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].Descricao' value='#= Descricao #' />");
                columns.Bound(p => p.UND).ClientTemplate("#= UND #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].UND' value='#= UND #' />").Width(100);
                columns.Bound(p => p.SituacaoRequisicaoMaterialDescricao).ClientTemplate("#= SituacaoRequisicaoMaterialDescricao #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].SituacaoRequisicaoMaterialDescricao' value='#= SituacaoRequisicaoMaterialDescricao #' />").Width(120);;
                columns.Bound(p => p.QtdeAtendida).ClientTemplate("#= kendo.toString(QtdeAtendida, \"n4\") #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].QtdeAtendida' value='#= formateDecimalGrid(QtdeAtendida) #' />").Width(100);
                columns.Bound(p => p.QtdePendente).ClientTemplate("#= kendo.toString(QtdePendente, \"n4\") #" +
                    "<input type='hidden' name='GridItemCancelado[#= index(data)#].QtdePendente' value='#= formateDecimalGrid(QtdePendente) #' />").Width(100);
                columns.Bound(x => x.Check).Template(@<text></text>).HeaderTemplate("<input id='checkAll' class='check-box' type='checkbox' />")
                    .Title("Select").ClientTemplate("<div><input type='checkbox' class='chkbx check-box' onclick='clicouCheckBox(this)'/>"+
                    "<input id='Check' type='hidden' name='GridItemCancelado[#= index(data)#].Check' value='#= Check #' /></div>").Width(27);
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Model(model => model.Id(e => e.Id))
            )
            .Events(events => events.DataBound("onDataBound"))
          )

    <div class="col-sm-6 form-group" style="margin-top:25px"> 
        <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
		    <button id="btnSubmit" class="btn btn-primary" type="submit" data-loading-text="Aguarde...">Cancelar</button>
        </div>
    </div>    
 }

<script>
    $(document).ready(function () {
        $("form").submit(function () {
            if (possuiSelecionados()) {
                return true;
            } else {
                exibaAlertaErro("É necessário selecionar ao menos um item da requisição de material.");
                $('#btnSubmit').button('reset');
                return false;
            }
        });

        $('#checkAll').click(function () {
            if ($(this).attr('checked')) {
                for (var i = 0; i < $('.chkbx').length; i++) {
                    marqueCheckBox($('.chkbx')[i]);
                }
            } else {
                desmarqueCheckBox($('.chkbx'));
            }
        });
    });

    function onDataBound() {
        $('.chkbx').each(function (index, element) {
            var grid = $('#GridItemCancelado').data().kendoGrid;
            var dataItem = grid.dataItem($(element).closest('tr'));
            if (dataItem.SituacaoRequisicaoMaterialDescricao == 'CANCELADO' || dataItem.SituacaoRequisicaoMaterialDescricao == 'ATENDIDO TOTAL') {
                $(element).attr('disabled', 'disabled');
            }
        });
    }

    function clicouCheckBox(a) {
        var checked = $(a).is(':checked');

        if (!checked)
            desmarqueCheckBox($(a));
        else marqueCheckBox($(a));

        var numChkBoxes = $('.chkbx').length;
        var numChkBoxesChecked = $('.chkbx:checked').length;
        if (numChkBoxes == numChkBoxesChecked && numChkBoxes > 0) {
            $('#checkAll').attr('checked', 'checked');
        }
        else {
            $('#checkAll').removeAttr('checked');
        }
    }

    function marqueCheckBox(checkBoxElement) {
        if (checkBoxElement.disabled) return;
        $(checkBoxElement).parent().find('input[type=hidden]').val(true);
        $(checkBoxElement).attr('checked', 'checked');
    }

    function desmarqueCheckBox(checkBoxElement) {
        $(checkBoxElement).parent().find('input[type=hidden]').val(false);
        $(checkBoxElement).removeAttr('checked');
    }

    function index(dataItem) {
        var data = $("#GridItemCancelado").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }
    
    function possuiSelecionados() {
        return $('.chkbx:checked').length != 0;
    }

    function formateDecimalGrid(valor) {
        if (valor == null) {
            return null;
        }
        return valor.toString().replace(".", ",");
    }
</script>