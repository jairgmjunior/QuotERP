@using Fashion.ERP.Web.Areas.EngenhariaProduto.Models
@model PesquisaModeloAprovacaoModel
@section javascript{@Scripts.Render(Links.Bundles.Scripts.PdfObject)}

@Html.ValidationSummaryEx()

@using (Html.BeginForm(MVC.EngenhariaProduto.ModeloAprovacao.Index(), FormMethod.Post, new { @class = "form-horizontal small-labels" }))
{
    @Html.AntiForgeryToken()
    <div class="accordion" id="accordion2">
        <div class="accordion-group">
            <div class="accordion-heading">
                <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapsePesquisar">Pesquisar
                </a>
            </div>
            <div id="collapsePesquisar" class="accordion-body collapse">
                <div class="accordion-inner">
                    <div class="row">
                        <div class="span6">
                            <div class="control-group">
                                @Html.LabelForRequired(x => x.Tag, new { @class = "control-label " })
                                <div class="controls">
                                   @Html.TextBoxFor(x => x.Tag, new { @class = "input-small" })
                                </div>
                            </div>
                        </div>
                        <div class="span6">
                            <div class="control-group">
                                @Html.LabelForRequired(x => x.Situacao)
                                <div class="controls">
                                    @Html.DropDownListFor(x => x.Situacao, Model.Situacao.ToSelectList(), "-- Selecione --")
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span6">
                           <div class="control-group">
                                @Html.LabelForRequired(x => x.ClassificacaoDificuldade)
                                <div class="controls">
                                    @Html.DropDownListFor(x => x.ClassificacaoDificuldade, null, "-- Selecione --", new { @class = "input-large" })                    
                                </div>
                            </div> 
                        </div>
                        <div class="span3">
                            <div class="control-group">
                                @Html.LabelForRequired(x => x.Estilista)
                                <div class="controls">
                                    @Html.DropDownListFor(x => x.Estilista, null, "-- Selecione --", new { @class = "input-large" })                    
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span6">
                           <div class="control-group">
                                @Html.LabelForRequired(x => x.ColecaoAprovada)
                                <div class="controls">
                                    @Html.DropDownListFor(x => x.ColecaoAprovada, null, "-- Selecione --", new { @class = "input-large" })                    
                                </div>
                            </div> 
                        </div>
                    </div>
                    <div class="well">
                        <div class="row">
                            <div class="span3">
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="span3">
                            </div>
                            <div class="span3">
                                <div class="control-group">
                                    @Html.LabelForRequired(x => x.OrdenarPor, new { @class = "control-label " })
                                    <div class="controls">
                                        @Html.DropDownList("OrdenarPor", "--Selecione--")
                                    </div>
                                </div>
                            </div>
                            <div class="span3">
                                <div class="control-group">
                                    @Html.LabelForRequired(x => x.OrdenarEm, new { @class = "control-label " })
                                    <div class="controls">
                                        <select name="OrdenarEm">
                                            <option value="asc">Ascendente</option>
                                            <option value="desc">Descendente</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="span3">
                                <button id="pesquisar-relatorio" class="btn btn-info pull-right" type="button" data-loading-text="Aguarde..." style="display: none;">Pesquisar</button>
                                <button id="pesquisar-grid" class="btn btn-info pull-right" type="button" data-loading-text="Aguarde...">Pesquisar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*.ToolBar(toolBar => toolBar.Template("<a class='k-button k-button-icontext' onclick='criarFichasTecnicas()' href='#'></span>Criar Fichas Técnicas</a>"))*@
@(Html.Kendo().Grid<GridModeloAprovacaoModel>() 
	.Name("Grid").Events(events => events.DataBound("onDataBound"))
    .ToolBar(toolBar => toolBar.Template(@Html.ActionLinkAuth("Criar Fichas Técnicas", "CriarFichaTecnica", "ModeloAprovacao", new {Area = "EngenhariaProduto"}, new {id = "criarFichasTecnicasButton", Area = "EngenhariaProducao", @class = "k-button k-button-icontext"}).ToHtmlString()))
    .AutoBind(false)
    .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(true)
        .PageSize(50)
        .Read(read => read.Action("ObtenhaListaGridModeloAprovacaoModel", "ModeloAprovacao").Data("ObtenhaPesquisaModeloAprovacaoModel"))
        .Events(events => events.Error("onError"))
    )
	.Columns(columns =>
	{ 
        columns.Bound(x => x.Check).HeaderTemplate("<input id='checkAll' type='checkbox' onclick='clicouCheckBoxAll(this)' />")
            .Title("").ClientTemplate("<input type='checkbox' class='check-box' onclick='clicouCheckBox(this)'/>").Width(27).Sortable(false);
        columns.Bound(x => x.TagAno);
	    columns.Bound(x => x.ColecaoAprovada);
        columns.Bound(x => x.Dificuldade);
		columns.Bound(x => x.Referencia);
		columns.Bound(x => x.Descricao);
		columns.Bound(x => x.Quantidade);
	})
    .Resizable(resize => resize.Columns(true))
    .Reorderable(reorder => reorder.Columns(true))
    .Pageable()
    .Sortable()
    .Groupable()   
    )

<script>
    function onDataBound() {
    };

    function clicouCheckBoxAll(checkBoxAll) {
        var grid = $("#Grid").data("kendoGrid");
        var checkBoxes = $(grid.tbody).find("input:checkbox");
        for (var i = 0; i < checkBoxes.length; i++) {
            var checkBox = checkBoxes[i];
            $(checkBox).attr("checked", $(checkBoxAll).is(":checked")).trigger("change");
        }
    }

    $(document).ready(function() {
        $('#criarFichasTecnicasButton').click(function () {
            var parametros = obtenhaIdsSelecionados();

            if (parametros == "") {
                exibaAlertaErro("Selecione pelo menos um item da grid.");
                return false;
            }
            window.location.href = this.href + parametros;
            return false;
        });
    });

    function obtenhaIdsSelecionados() {
        var grid = $('#Grid').data("kendoGrid");
        var dataItemsAll = grid.dataItems();
        var idsSelecionados = [];
        for (var i in dataItemsAll) {
            var dataItem = dataItemsAll[i];
            var row = grid.tbody.find("tr[data-uid='" + dataItem.uid + "']");

            if (row.find("input:checkbox").prop("checked")) {
                idsSelecionados.push(dataItem.Id);
            }
        }
        if (idsSelecionados.length == 0)
            return "";

        var parametros = "?";
        for (var i in idsSelecionados) {
            var idSelecionado = idsSelecionados[i];
            parametros = parametros + "ids=" + idSelecionado + "&";
        }
        return parametros;
    }
        
    $(function () {
        // Seleciona o modo de consulta
        $('#pesquisar-grid').on('click', function () {

            limpeMensagensAlerta();

            $('#Grid').data('kendoGrid').dataSource.read();
            $('#Grid').data('kendoGrid').refresh();
        });

        // Seleciona o modo de consulta
        $('button[name=btn-ModoConsulta]').on('click', function () {

            var $ModoConsulta = $('#ModoConsulta');

            if (this.value == 'impressao') {
                $ModoConsulta.val('Imprimir');

                $('#row-imprimir').show();
                $('#row-listagem').hide();
                $('#pesquisar-relatorio').show();
                $('#pesquisar-grid').hide();

            } else {
                $ModoConsulta.val('listagem');

                $('#row-imprimir').hide();
                $('#row-listagem').show();
                $('#pesquisar-relatorio').hide();
                $('#pesquisar-grid').show();
            }
        });
    });

    function ObtenhaPesquisaModeloAprovacaoModel() {
        var parametros = {
            model:
            {
                Tag: $("#Tag").val(),
                Estilista: $("#Estilista").val(),
                ColecaoAprovada: $("#ColecaoAprovada").val(),
                Situacao: $("#Situacao").val(),
                ClassificacaoDificuldade: $("#ClassificacaoDificuldade").val(),
                OrdenarPor: $("#OrdenarPor").val(),
                OrdenarEm: $("#OrdenarEm").val()
            }
        };

        return parametros;
    }

    function onError(e) {
        alert(e.errors);
    }

</script>