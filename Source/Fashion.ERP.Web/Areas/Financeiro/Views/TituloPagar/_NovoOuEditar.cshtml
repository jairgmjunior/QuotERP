@using Fashion.ERP.Domain.Financeiro
@model Fashion.ERP.Web.Areas.Financeiro.Models.TituloPagarModel


<fieldset>
    <legend><small>Dados do Lançamento</small></legend>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelFor(x => x.Unidade, new { @class = "control-label col-sm-4 col-md-3" })
                <div class="col-sm-8 col-md-8 col-lg-7 liquidado-parcial">
                    @Html.DropDownListFor(x => x.Unidade, null, "-- Selecionar --", new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Unidade, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelFor(x => x.SituacaoTitulo, new { @class = "control-label col-sm-4 col-md-3" })
                <div class="col-sm-8 col-md-8 col-lg-7">
                    <div class="form-control-static no-gutter">
                        @Html.ValueFor(x => x.SituacaoTitulo)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm liquidado-parcial">
                @Html.Label("Número/Parcela", new { @class = "control-label col-sm-4 col-md-3" })
                <div class="col-sm-4 col-md-4 col-lg-3" style='padding-right : 0'>
                    @Html.TextBoxFor(x => x.Numero, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Numero, null, new {@class = "help-block"})
                    @Html.ValidationMessageFor(x => x.Parcela, null, new {@class = "help-block"})                      
                </div>
                <div class="col-sm-4 col-md-4 col-lg-4" style='padding-left : 0'>
                    @(Html.Kendo().IntegerTextBoxFor(x => x.Parcela).HtmlAttributes(new { @class = "integer" }).Min(1))
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelFor(x => x.Plano, new { @class = "control-label col-sm-4 col-md-3" })
                <div class="col-sm-8 col-md-8 col-lg-7 liquidado-parcial">
                    @Html.TextBoxFor(x => x.Plano, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Plano, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Fornecedor)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.HiddenFor(x => x.Fornecedor)
                    <div class="col-lg-3 col-sm-5 col-md-4 padding0">
                        <div class="input-group">
                            <input id="codigo-fornecedor" class="numeric-only form-control" type="text" style="width: 70%;">
                            <span class="input-group-btn pull-left">
                                <button id="pesquisar-fornecedor" class="btn btn-default btn-sm " type="button" data-toggle="modal" data-target="#modal-fornecedor">
                                    <span class="glyphicon glyphicon-search"></span>
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-9 col-md-8 col-sm-12 padding0">
                        <input id="descricao-fornecedor" class="form-control" readonly="" data-toggle="tooltip">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Emissao)
                <div class="col-sm-8 col-md-8 col-lg-7 liquidado-parcial">
                    @Html.EditorFor(x => x.Emissao)
                    @Html.ValidationMessageFor(x => x.Emissao, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Vencimento)
                <div class="col-sm-8 col-md-8 col-lg-7 liquidado-parcial">
                    @Html.EditorFor(x => x.Vencimento)
                    @Html.ValidationMessageFor(x => x.Vencimento, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Prorrogacao)
                <div class="col-sm-8 col-md-8 col-lg-7 ">
                    @Html.EditorFor(x => x.Prorrogacao)
                    @Html.ValidationMessageFor(x => x.Prorrogacao, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Valor)
                <div class="col-sm-8 col-md-8 col-lg-7 liquidado-parcial">
                    @Html.EditorFor(x => x.Valor)
                    @Html.HiddenFor(x => x.Valor)
                    @Html.ValidationMessageFor(x => x.Valor, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelFor(x => x.SaldoDevedor, new { @class = "control-label col-sm-4 col-md-3" })
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.TextBoxFor(x => x.SaldoDevedor, "{0:R$ 0.00}", new { disabled = "disabled", id = "SaldoDevedorDisabled", @class = "form-control"})
                    @Html.HiddenFor(x => x.SaldoDevedor)
                    @Html.ValidationMessageFor(x => x.SaldoDevedor, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Historico)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.TextBoxFor(x => x.Historico, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Historico, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Banco)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.HiddenFor(x => x.Banco)
                    <div class="col-lg-3 col-sm-5 col-md-4 padding0">
                        <div class="input-group">
                            <input id="codigo-banco" class="numeric-only form-control" type="text" style="width: 70%;">
                            <span class="input-group-btn pull-left">
                                <button id="pesquisar-banco" class="btn btn-default btn-sm " type="button" data-toggle="modal" data-target="#modal-banco">
                                    <span class="glyphicon glyphicon-search"></span>
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-9 col-md-8 col-sm-12 padding0">
                        <input id="descricao-banco" class="form-control" readonly="" data-toggle="tooltip">
                    </div>
                    @Html.ValidationMessageFor(x => x.Banco, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="form-group form-group-sm">
                @Html.LabelForRequired(x => x.Observacao)
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @Html.TextAreaFor(x => x.Observacao, new { @class = "form-control"})
                    @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.Label("RateioCentroCusto", "Rateio por Centro de Custos", new { @class = "control-label col-sm-4 col-md-3 required-label" })
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @(Html.Kendo().Grid(Model.CentroCustos)
                          .Name("GridCentroCusto")
                          .Editable(e => e.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom))
                          .Navigatable()
                          .Columns(columns =>
                          {
                              columns.Bound(x => x.CentroCustoId).EditorTemplateName("CentroCustoList").Width(250)
                                  .ClientTemplate("#= displayCentroCusto(CentroCustoId) #<input type='hidden' name='CentroCustos[#= indexCentroCusto(data)#].CentroCustoId' value='#= CentroCustoId #' />");
                              columns.Bound(x => x.ValorCentroCusto).Width(100).ClientTemplate("#= kendo.toString(ValorCentroCusto, 'c') #<input type='hidden' name='CentroCustos[#= indexCentroCusto(data)#].ValorCentroCusto' value='#= ValorCentroCusto.toText() #' />");
                              columns.Bound(x => x.RateioCentroCusto).Width(100).ClientTemplate("#= kendo.toString(RateioCentroCusto, 'n') # %<input type='hidden' name='CentroCustos[#= indexCentroCusto(data)#].RateioCentroCusto' value='#= RateioCentroCusto.toText() #' />");
                              columns.Command(command => command.Destroy()).Width(100);
                          }
                          )
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Events(events => events.Error("centro_custo_error_handler"))
                              .Model(model => model.Id(e => e.Id))
                              .Read(r => r.Action("LerCentroCustos", "TituloPagar", new { id = @Model.Id }).Type(HttpVerbs.Get))
                              .Create(c => c.Action("SalveCentroCusto", "TituloPagar"))
                              .Destroy(d => d.Action("ExcluaCentroCusto", "TituloPagar"))
                          )
                          .ToolBar(toolbar => toolbar.Create())
                          .Events(c => c.Save("onSaveCentroCusto"))                )
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                @Html.Label("DespesaReceitas", "Rateio por Tipo de Despesa", new { @class = "control-label col-sm-4 col-md-3 required-label" })
                <div class="col-sm-8 col-md-8 col-lg-7">
                    @(Html.Kendo().Grid(Model.DespesaReceitas)
                          .Name("GridDespesaReceita")
                          .Editable(e => e.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom))
                          .Navigatable()
                          .Columns(columns =>
                          {
                              columns.Bound(x => x.DespesaReceitaId).EditorTemplateName("DespesaReceitaList").Width(250)
                                  .ClientTemplate("#= displayDespesaReceita(DespesaReceitaId) #<input type='hidden' name='DespesaReceitas[#= indexDespesaReceita(data)#].DespesaReceitaId' value='#= DespesaReceitaId #' />");
                              columns.Bound(x => x.ValorDespesaReceita).Width(100).ClientTemplate("#= kendo.toString(ValorDespesaReceita, 'c') #<input type='hidden' name='DespesaReceitas[#= indexDespesaReceita(data)#].ValorDespesaReceita' value='#= ValorDespesaReceita.toText() #' />");
                              columns.Bound(x => x.RateioDespesaReceita).Width(100).ClientTemplate("#= kendo.toString(RateioDespesaReceita, 'n') # %<input type='hidden' name='DespesaReceitas[#= indexDespesaReceita(data)#].RateioDespesaReceita' value='#= RateioDespesaReceita.toText() #' />");
                              columns.Command(command => command.Destroy());
                          }
                          )
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .Events(events => events.Error("despesa_receita_error_handler"))
                              .Model(model => model.Id(e => e.Id))
                              .Read(r => r.Action("LerCentroCustos", "TituloPagar", new { id = @Model.Id }).Type(HttpVerbs.Get))
                              .Create(c => c.Action("SalveCentroCusto", "TituloPagar"))
                              .Destroy(d => d.Action("ExcluaCentroCusto", "TituloPagar"))
                          )
                          .ToolBar(toolbar => toolbar.Create())
                          .Events(c => c.Save("onSaveDespesaReceita")))
                </div>
            </div>
        </div>
    </div>

    @Html.FormActionAuth(this.IsEditar(), MVC.Financeiro.TituloPagar.Excluir(Model.Id))

</fieldset>


<script>
    //mostra o texto certo no combobox centro de custo
    var centroCustosDictionary = JSON.parse('@Html.ToJson((object)ViewBag.CentroCustosDictionary)');
    function displayCentroCusto(id) {

        var nome = "";
        $.each(centroCustosDictionary, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
        });
        return nome;
    }

    //mostra o texto certo no combobox tipo de despesa
    var despesaReceitasDictionary = JSON.parse('@Html.ToJson((object)ViewBag.DespesaReceitasDictionary)');
    function displayDespesaReceita(id) {

        var nome = "";
        $.each(despesaReceitasDictionary, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
        });
        return nome;
    }

    // Ao salvar, atualizar o valor/rateio da grid de centro de custo
    function onSaveCentroCusto(dataItem) {
        var valorTitulo = $("#Valor").val().toNumber();

        if (valorTitulo > 0) {

            // Atualiza o rateio
            if (dataItem.values.ValorCentroCusto) {
                var valor = dataItem.values.ValorCentroCusto;
                dataItem.model.RateioCentroCusto = 100 * valor / valorTitulo;

                $("#GridCentroCusto").data("kendoGrid").refresh();

                setTimeout(function () {    // espera um tempo para ativar o foco
                    return function () {
                        var theCell = $('#GridCentroCusto tbody tr:eq(' + indexCentroCusto(dataItem.model) + ') td:eq(2)');// seleciona o campo rateio
                        $('#GridCentroCusto').data('kendoGrid').editCell(theCell);// seleciona na grid o campo que receberá o foco
                    }
                }(), 200);
            }

            // Atualiza o valor
            if (dataItem.values.RateioCentroCusto) {
                var rateio = dataItem.values.RateioCentroCusto;
                dataItem.model.ValorCentroCusto = valorTitulo / 100 * rateio;

                $("#GridCentroCusto").data("kendoGrid").refresh();

                setTimeout(function () {    // espera um tempo para ativar o foco
                    return function () {
                        var theCell = $('#GridCentroCusto tbody tr:eq(' + indexCentroCusto(data, dataItem.model) + ') td:eq(3)');// seleciona o botão excluir
                        theCell.children().first().focus(); // envia o foco para o botão excluir
                    }
                }(), 200);
            }
        }

        return false;
    }

    // Ao salvar, atualizar o valor/rateio da grid de tipo de despesas
    function onSaveDespesaReceita(dataItem) {
        var valorTitulo = $("#Valor").val().toNumber();

        if (valorTitulo > 0) {

            // Atualiza o rateio
            if (dataItem.values.ValorDespesaReceita) {
                var valor = dataItem.values.ValorDespesaReceita;
                dataItem.model.RateioDespesaReceita = 100 * valor / valorTitulo;

                $("#GridDespesaReceita").data("kendoGrid").refresh();

                setTimeout(function () {    // espera um tempo para ativar o foco
                    return function () {
                        var theCell = $('#GridDespesaReceita tbody tr:eq(' + indexDespesaReceita(dataItem.model) + ') td:eq(2)');// seleciona o campo rateio
                        $('#GridDespesaReceita').data('kendoGrid').editCell(theCell);// seleciona na grid o campo que receberá o foco
                    }
                }(), 200);
            }

            // Atualiza o valor
            if (dataItem.values.RateioDespesaReceita) {
                var rateio = dataItem.values.RateioDespesaReceita;
                dataItem.model.ValorDespesaReceita = valorTitulo / 100 * rateio;

                $("#GridDespesaReceita").data("kendoGrid").refresh();

                setTimeout(function () {    // espera um tempo para ativar o foco
                    return function () {
                        var theCell = $('#GridDespesaReceita tbody tr:eq(' + indexDespesaReceita(data, dataItem.model) + ') td:eq(3)');// seleciona o botão excluir
                        theCell.children().first().focus(); // envia o foco para o botão excluir
                    }
                }(), 200);
            }
        }

        return false;
    }

    function indexCentroCusto(dataItem) {
        var data = $("#GridCentroCusto").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function indexDespesaReceita(dataItem) {
        var data = $("#GridDespesaReceita").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    $("#GridCentroCusto .k-grid-save-changes").on("click", function () {
        var datasourcedata = $("#GridCentroCusto").data("kendoGrid").dataSource.data();

        //marca todos os itens da grid como novos para serem passados para a action de salvamento.
        for (var i = 0; i < datasourcedata.length; i++) {
            datasourcedata[i].id = null;
        }
    });

    $("#GridDespesaReceita .k-grid-save-changes").on("click", function () {
        var datasourcedata = $("#GridDespesaReceita").data("kendoGrid").dataSource.data();

        //marca todos os itens da grid como novos para serem passados para a action de salvamento.
        for (var i = 0; i < datasourcedata.length; i++) {
            datasourcedata[i].id = null;
        }
    });

    function centro_custo_error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#GridCentroCusto").data("kendoGrid").dataSource.read();
        }
    }

    function despesa_receita_error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#GridDespesaReceita").data("kendoGrid").dataSource.read();
        }
    }

    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Financeiro.TituloPagar.Index())';
            window.location.href = returnUrl;
        }
    }

    $(document).ready(function () {
        
        $('#Vencimento').on('change', function () {

            var vencimento = $(this).val();

            //if (isDate(vencimento)) {
                $('#Prorrogacao').data("kendoDatePicker").value(vencimento);
            //}

        });

        $('#Valor').on('change', function () {

            var valor = $(this).val().toNumber();

            if (isNumber(valor)) {
                $('#SaldoDevedorDisabled').val(kendo.toString(valor, 'c'));
                $('#SaldoDevedor').val(valor.toText());

                // Recalcular o grid Centro de Custo
                var dataCentroCusto = $("#GridCentroCusto").data("kendoGrid").dataSource.data();
                $.each(dataCentroCusto, function (index, item) {
                    item.RateioCentroCusto = item.ValorCentroCusto * 100 / valor;
                });
                $("#GridCentroCusto").data("kendoGrid").refresh();

                // Recalcular o grid Tipo de Despesa
                var dataDespesaReceita = $("#GridDespesaReceita").data("kendoGrid").dataSource.data();
                $.each(dataDespesaReceita, function (index, item) {
                    item.RateioDespesaReceita = item.ValorDespesaReceita * 100 / valor;
                });
                $("#GridDespesaReceita").data("kendoGrid").refresh();
            }

        });
        
        @(Model.SituacaoTitulo == SituacaoTitulo.LiquidadoParcial ? "DesabilitarParcial();" : "")
    });

    function DesabilitarParcial() {
        // Desabilita os campos quando a situação do título for Liquidado Parcial
        var $inputs = $('.liquidado-parcial :input');
        $inputs.each(function () {
            var $this = $(this);
            $this.after("<input type='hidden' name='" + $this.attr('name') + "' value='" + $this.val() + "' />");
            $this.prop("disabled", true);
        });
    }
</script>
<script id="numberFormatTemplate" type="text/x-kendo-template">
    # var myCustomVariable = "foo"; #
    <p>
        #= myCustomVariable #
    </p>
</script>