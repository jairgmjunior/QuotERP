@model Fashion.ERP.Web.Areas.Financeiro.Models.BaixaTituloReceberModel

@Html.AntiForgeryToken()
@Html.ValidationSummaryEx()
@Html.HiddenFor(x => x.Id)
@Html.HiddenFor(x => x.Unidade)
@Html.HiddenFor(x => x.NumeroParcela)
@Html.HiddenFor(x => x.Cliente)
@Html.HiddenFor(x => x.Valor)
@Html.HiddenFor(x => x.Historico)
@Html.HiddenFor(x => x.SituacaoTitulo)
@Html.HiddenFor(x => x.Plano)
@Html.HiddenFor(x => x.Vencimento)
@Html.HiddenFor(x => x.Banco)
@Html.HiddenFor(x => x.Observacao)
    
<fieldset class="detail">
    <legend>Título a receber</legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelFor(x => x.Unidade, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Unidade)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.NumeroParcela, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.NumeroParcela)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Cliente, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Cliente)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Valor, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Valor, "{0:R$ 0.00}")
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Historico, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Historico)
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelFor(x => x.SituacaoTitulo, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.SituacaoTitulo)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Plano, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Plano)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Vencimento, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Vencimento)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Banco, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Banco)
                </div>
            </div>
            <div class="control-group">
                @Html.LabelFor(x => x.Observacao, new { @class = "title-label" })
                <div class="value-label">
                    @Html.ValueFor(x => x.Observacao)
                </div>
            </div>
        </div>
    </div>
</fieldset>
    
    
<fieldset>
    <legend>Baixas</legend>
    <div class="control-group" style="width: 850px">
        @(Html.Kendo().Grid(Model.BaixaTitulos)
                .Name("Grid")
                .Navigatable()
                .Editable(editable => editable.Mode(GridEditMode.InCell))
                .Columns(columns =>
                {
                    columns.Bound(x => x.Id).Hidden();
                    columns.Bound(x => x.DataRecebimento).Width(150).Format("{0:d}");
                    columns.Bound(x => x.ValorBaixa).Width(120).ClientTemplate("#= kendo.toString(ValorBaixa, 'c') #");
                    columns.Bound(x => x.Juro).Width(120).ClientTemplate("#= kendo.toString(Juro, 'c') #");
                    columns.Bound(x => x.Despesa).Width(120).ClientTemplate("#= kendo.toString(Despesa, 'c') #");
                    columns.Bound(x => x.Desconto).Width(120).ClientTemplate("#= kendo.toString(Desconto, 'c') #");
                    columns.Bound(x => x.ValorTotal).Width(120).EditorTemplateName("ReadonlyDouble").ClientTemplate("#= kendo.toString(ValorTotal, 'c') #");
                    columns.Command(command => command.Destroy());
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                    .Model(model =>
                    {
                        model.Id(e => e.Id);
                        model.Field(f => f.TituloReceberId).DefaultValue(Model.Id);
                        model.Field(f => f.DataRecebimento).DefaultValue(DateTime.Now);
                    })
                    .Create(create => create.Action("SalveBaixaTitulo", "TituloReceber"))
                    .Update(update => update.Action("AtualizeBaixaTitulo", "TituloReceber"))
                    .Destroy(destroy => destroy.Action("ExcluaBaixaTitulo", "TituloReceber"))
                )
                .ToolBar(toolbar => {
                    toolbar.Create();
                    toolbar.Save();
                })
                .Events(c => c.Save("onSaveBaixaTitulo"))
        )
    </div>
</fieldset>

<script>

    // Ao salvar, atualizar o valor/rateio da grid de centro de custo
    function onSaveBaixaTitulo(dataItem) {

        var valorBaixa = dataItem.values.ValorBaixa || dataItem.model.ValorBaixa;
        var juro = dataItem.values.Juro || dataItem.model.Juro;
        var despesa = dataItem.values.Despesa || dataItem.model.Despesa;
        var desconto = dataItem.values.Desconto || dataItem.model.Desconto;
        dataItem.model.ValorTotal = valorBaixa + juro + despesa - desconto;

        $("#Grid").data("kendoGrid").refresh();

        return false;
    }

    $(".k-grid-save-changes").on("click", function () {
        var datasourcedata = $("#Grid").data("kendoGrid").dataSource.data();

        //marca todos os itens da grid como novos para serem passados para a action de salvamento.
        for (var i = 0; i < datasourcedata.length; i++) {
            datasourcedata[i].id = null;
        }
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }
    
    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Financeiro.TituloReceber.Index())';
            window.location.href = returnUrl;
        }
    }
</script>