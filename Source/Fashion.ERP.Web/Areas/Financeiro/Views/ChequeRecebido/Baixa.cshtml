@using Fashion.ERP.Domain.Financeiro
@using Fashion.ERP.Web.Areas.Financeiro.Models
@model BaixaChequeRecebidoModel

@using (Html.BeginForm(MVC.Financeiro.ChequeRecebido.Baixa(), FormMethod.Post, new { id = "form", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.ChequeRecebido)
    @Html.HiddenFor(x => x.ValorTotal)
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Valor)
                <div class="controls">
                    @Html.EditorFor(x => x.Valor)
                    @Html.ValidationMessageFor(x => x.Valor, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Data)
                <div class="controls">
                    @Html.EditorFor(x => x.Data)
                    @Html.ValidationMessageFor(x => x.Data, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.TaxaJuros)
                <div class="controls">
                    @Html.EditorFor(x => x.TaxaJuros, "percent")
                    @Html.ValidationMessageFor(x => x.TaxaJuros, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.ValorJuros)
                <div class="controls">
                    @Html.EditorFor(x => x.ValorJuros)
                    @Html.ValidationMessageFor(x => x.ValorJuros, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.ValorDesconto)
                <div class="controls">
                    @Html.EditorFor(x => x.ValorDesconto)
                    @Html.ValidationMessageFor(x => x.ValorDesconto, null, new { @class = "help-block" })
                </div>
            </div>
            <div class="control-group">
                @Html.LabelForRequired(x => x.Observacao)
                <div class="controls">
                    @Html.TextAreaFor(x => x.Observacao)
                    @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span4">
            <div class="row">
                <div class="well">
                    @Html.DropDownList("MeioPagamento", null, new { @class = "input-medium" })
                    @Html.TextBox("ValorRecebimento", Model.Valor, new { @class = "input-small currency" })
                    <button id="adicionar-recebimento" class="btn" type="button">Adicionar</button>
                    <table id="table-recebimento" class="table table-condensed">
                        <tr>
                            <th>Meio de pagamento</th>
                            <th>Valor</th>
                            <th>&nbsp;</th>
                        </tr>
                        @if (ViewData["Recebimentos"] != null)
                        {
                            foreach (var recebimento in (IEnumerable<RecebimentoChequeRecebido>)ViewData["Recebimentos"])
                            {
                                <tr>
                                    <td><input name="MeioPagamentoId" type="hidden" value="@recebimento.MeioPagamento.Id"/><label>@recebimento.MeioPagamento.Descricao</label></td>
                                    <td style="text-align: right"><input name="ValorRecebimentoChequeRecebido" type="hidden" value="@recebimento.Valor"/><label>@recebimento.Valor.ToString("C")</label></td>
                                    <td style="text-align: center"><input class="delete btn btn-small btn-danger" type="button" onclick="RemoverRecebimento(this)" value="Remover"/></td>
                                </tr>
                            }
                        }
                    </table>
                    <div>
                        <div class="pull-right">
                            <h5>Total: R$ <span id="TotalRecebimento">0,00</span></h5>
                        </div>
                        <br/>&nbsp;
                    </div>
                </div>
            </div>
            <div class="pull-right">
                <h5>Valor total: R$ <span id="LabelValorTotal">@Model.ValorTotal</span></h5>
                @*<h5>Valor total: @(Html.Kendo().NumericTextBoxFor(m => m.ValorTotal).Format("c").Min(0).Spinners(false).HtmlAttributes(new { @class = "currency input-small", @readonly="readonly" }))</h5>*@
            </div>
        </div>
    </div>
    <div class="form-actions">
        <button class="btn btn-primary btn-large" type="submit" data-loading-text="Aguarde...">Salvar</button>
        @if (Model.Id.HasValue)
        {
            Html.ActionLink("Excluir", MVC.Financeiro.ChequeRecebido.ExcluirBaixa(Model.Id.Value), new {@class = "delete btn btn-danger"});
        }
    </div>
}

<script>
    function RemoverRecebimento(input) {
        $(input).closest('tr').remove();
        calculaTotal();
    }

    var atualizarValor = function (valor) {
        $('#ValorTotal').val(valor);
        $('#LabelValorTotal').text(valor.toText());

        var valorRecebido = calculaValorRecebido();
        $('#ValorRecebimento').val(valor - valorRecebido);
    };
    var calculaTaxa = function () {
        var saldo = $('#Valor').val().toNumber();
        var taxa = $('#TaxaJuros').val().toNumber();
        var desconto = $('#ValorDesconto').val().toNumber();
        var valor = saldo;

        if (taxa > 0) {
            valor = (saldo * taxa / 100) + saldo;

            var juro = valor - saldo;
            $('#ValorJuros').val(juro);
        }

        if (desconto > 0) {
            valor = valor - desconto;
        }

        atualizarValor(valor);
    };
    var calculaJuro = function () {
        var saldo = $('#Valor').val().toNumber();
        var juro = $('#ValorJuros').val().toNumber();
        var desconto = $('#ValorDesconto').val().toNumber();
        var valor = saldo;

        if (juro > 0) {
            valor = juro + saldo;

            var taxa = (valor / saldo * 100) - 100;
            $('#TaxaJuros').val(taxa);
        }

        if (desconto > 0) {
            valor = valor - desconto;
        }

        atualizarValor(valor);
    };
    var calculaDesconto = function () {
        var saldo = $('#Valor').val().toNumber();
        var juro = $('#ValorJuros').val().toNumber();
        var total = saldo + juro;

        var desconto = $('#ValorDesconto').val().toNumber();
        var valor = total - desconto;

        var valorRecebido = calculaValorRecebido();

        if (valorRecebido > valor) {
            alert('Desconto inválido. O valor total não pode ficar menor que o valor recebido.');
            $('#ValorDesconto').val(0);
            calculaDesconto();
            return;
        }

        if (valor < 0) {
            alert('Desconto inválido. O valor total não pode ficar menor que zero.');
            $('#ValorDesconto').val(0);
            calculaDesconto();
            return;
        }

        atualizarValor(valor);
    };

    var calculaTotal = function () {
        var saldo = $('#Valor').val().toNumber();
        var total = $('#ValorTotal').val().toNumber();

        var valor = 0;

        var valorRecebido = calculaValorRecebido();

        if (valorRecebido > total) {
            valor = valorRecebido;

            // Taxa
            var taxa = valor / saldo * 100;
            $('#TaxaJuros').val(taxa);

            // Juro
            var juro = valor - total;
            $('#ValorJuros').val(juro);
        } else {
            //var valorJuro = $('#ValorJuros').autoNumeric('get').toNumber();
            //var valorDesconto = $('#ValorDesconto').autoNumeric('get').toNumber();
            //valor = saldo + valorJuro - valorDesconto;
            valor = total;
        }

        atualizarValor(valor);
    };

    var calculaValorRecebido = function () {
        var sum = 0;
        $("input[name=ValorRecebimentoChequeRecebido]").each(function () {
            sum += $(this).val().toNumber();
        });
        $('#TotalRecebimento').text(sum.toText());
        return sum;
    };

    $(function() {
        $('#adicionar-recebimento').on('click', function() {
            var meioPagamento = $('#MeioPagamento option:selected');
            var valor = $('#ValorRecebimento').val();
            
            if (valor == '' || valor == '0') {
                alert('Digite um valor maior que zero.');
                return;
            }

            var valorTotal = $('#ValorTotal').val().toNumber();
            var valorRecebido = calculaValorRecebido() + valor.toNumber();
            if (valorRecebido > valorTotal) {
                alert('O valor recebido não pode ser maior que o valor total.');
                return;
            }
            
            var colMeioPagamento = '<td><input name="MeioPagamentoId" type="hidden" value="' + meioPagamento.val() + '"/><label>' + meioPagamento.text() + '</label></td>';
            var colValor = '<td style="text-align: right"><input name="ValorRecebimentoChequeRecebido" type="hidden" value="' + valor + '"/><label>R$ ' + valor.toNumber().toText() + '</label></td>';
            var colDelete = '<td style="text-align: center"><input class="delete btn btn-small btn-danger" type="button" onclick="RemoverRecebimento(this)" value="Remover"/></td>';
            $('#table-recebimento tr:last').after('<tr>' + colMeioPagamento + colValor + colDelete + '</tr>');

            $('#MeioPagamento')[0].selectedIndex = 0;
            $('#ValorRecebimento').val('');
            $('#MeioPagamento').focus();

            calculaTotal();
        });
        $('#ValorRecebimento').on('keydown', function (e) {
            if (e.which == 13) {
                e.preventDefault();
                $('#adicionar-recebimento').click();
            }
        });

        $('#Valor').on('change', calculaJuro);
        $('#TaxaJuros').on('change', calculaTaxa);
        $('#ValorJuros').on('change', calculaJuro);
        $('#ValorDesconto').on('change', calculaDesconto);
    });
</script>

