@using Fashion.ERP.Domain.Financeiro
@using Fashion.ERP.Web.Areas.Financeiro.Models
@model Fashion.ERP.Web.Areas.Financeiro.Models.DepositoChequeRecebidoModel

@using (Html.BeginForm(MVC.Financeiro.DepositoChequeRecebido.Index(), FormMethod.Post, new { id = "form", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()

    <fieldset>
        <legend><small>Dados do Depósito</small></legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.Unidade)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        @Html.DropDownListFor(x => x.Unidade, null, "-- Selecione --", new {  @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Unidade, null, new { @class="help-block" })
                    </div>
                </div>  
            </div>
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.VencimentoDe)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <div class="col-lg-5 col-md-5 padding0">
                            <div class="">
                                @(Html.Kendo().DatePickerFor(x => x.VencimentoDe))
                            </div>
                        </div>
                        <div class="col-lg-7 col-md-7">
                            <div class="form-group form-group-sm" style="margin-bottom: 0;">
                                @Html.LabelFor(x=>x.VencimentoAte, new { @class = "control-label control-label-meio col-sm-3" })
                                <div class="col-lg-9 col-md-9 padding0">
                                    @(Html.Kendo().DatePickerFor(x => x.VencimentoAte))
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>  
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.Situacao)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                         @{
                             var naoDepositado = ChequeSituacao.NaoDepositado.EnumToString();
                             var devolvido = ChequeSituacao.Devolvido.EnumToString();
                             var custodia = ChequeSituacao.Custodia.EnumToString();
                         }
                         <label class="checkbox-inline"><input id="naoDepositado" name="Situacao" type="checkbox" value="NaoDepositado" checked="checked" /> @naoDepositado</label>
                         <label class="checkbox-inline"><input id="devolvido" name="Situacao" type="checkbox" value="Devolvido" checked="checked" /> @devolvido</label>
                         <label class="checkbox-inline"><input id="custodia" name="Situacao" type="checkbox" value="Custodia" /> @custodia</label>
                         @Html.ValidationMessageFor(x => x.Situacao, null, new { @class="help-block" })                        
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
                        <button id="pesquisar" class="btn btn-default" data-loading-text="Aguarde...">Pesquisar</button>
                    </div>
                </div>
            </div>     
        </div> 
    </fieldset>

    <fieldset>
        <legend><small>Cheques</small></legend>
        <div class="row">
            <div class="col-sm-12 col-md-9 col-lg-9">
                <div class="form-group form-group-sm">
                    @Html.Label(" ", new { @class = "control-label col-sm-2 col-lg-2 font-bold" })
                    <div class="col-sm-10 col-md-10 col-lg-10">
                        @(Html.Kendo().Grid<GridDepositoChequeRecebido>()
                              .Name("grid-cheque")
                              .Columns(columns =>
                              {
                                  columns.Bound(x => x.Unidade);
                                  columns.Bound(x => x.Emitente);
                                  columns.Bound(x => x.NumeroCheque);
                                  columns.Bound(x => x.Banco);
                                  columns.Bound(x => x.Valor).Format("{0:C}");
                                  columns.Bound(x => x.DataVencimento).Format("{0:dd/MM/yyyy}");
                                  columns.Bound(x => x.Situacao);
                                  columns.Bound(x => x.Id)
                                      .ClientTemplate("<input type='checkbox' name='Cheques' value='#= Id #' />")
                                      .Title("Depositar")
                                      .Width(60).HtmlAttributes(new { @class = "text-center" });
                              }).DataSource(s =>
                                  s.Ajax()
                                      .Read(r => r.Action("LerCheques", "DepositoChequeRecebido").Type(HttpVerbs.Get))
                              ))            
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset>
        <legend><small>Dados Bancários</small></legend>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.Banco)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        @Html.DropDownListFor(x => x.Banco, null, " -- Selecione -- ", new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.Banco, null, new { @class = "help-block" })
                    </div>
                </div>  
            </div>
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.ContaBancaria)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        <select id="ContaBancaria" name="ContaBancaria" class="form-control"><option>-- Selecione --</option></select>
                        @Html.ValidationMessageFor(x => x.ContaBancaria, null, new {@class = "help-block"})
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group form-group-sm">
                    @Html.LabelForRequired(x => x.DataDeposito)
                    <div class="col-sm-8 col-md-8 col-lg-7">
                        @Html.EditorFor(x => x.DataDeposito)
                        @Html.ValidationMessageFor(x => x.DataDeposito, null, new { @class = "help-block" })
                    </div>
                </div>  
            </div>
        </div>  
    </fieldset>

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
                    <button id="btnSubmit" class="btn btn-primary" type="submit" data-loading-text="Aguarde...">Salvar</button>
                </div>
            </div>
        </div>     
    </div>
}
<script>
    $(function () {
        $('#pesquisar').on('click', function (e) {
            e.preventDefault();
            var unidade = $('#Unidade').val();
            var vencimentoDe = $('#VencimentoDe').val();
            var vencimentoAte = $('#VencimentoAte').val();
            var naoDepositado = $('#naoDepositado').is(':checked') ? $('#naoDepositado').val() : '';
            var devolvido = $('#devolvido').is(':checked') ? $('#devolvido').val() : '';
            var custodia = $('#custodia').is(':checked') ? $('#custodia').val() : '';

            var url = '/Financeiro/DepositoChequeRecebido/PesquisaCheque?unidade=' + unidade + '&vencimentoDe='
                + vencimentoDe + '&vencimentoAte=' + vencimentoAte + '&naoDepositado=' + naoDepositado
                + '&devolvido=' + devolvido + '&custodia=' + custodia;
            $.post(url, function () {
                var grid = $('#grid-cheque').data("kendoGrid");
                grid.dataSource.read();
            });
        });
    });

    $(function () {
        carregaAgenciaConta();

        // Banco
        $('#Banco').change(function () {
            carregaAgenciaConta();
        });
    });

    function carregaAgenciaConta() {
        var banco = $('#Banco').val();

        var agenciaConta = $('#ContaBancaria');
        agenciaConta.empty();
        agenciaConta.append($('<option />').text("-- Selecione --"));

        if (banco) {
            var url = '/Financeiro/DepositoChequeRecebido/PesquisarAgenciaContaPorBanco/' + banco;
            $.getJSON(url, function (result) {
                $.each(result, function (index, item) {
                    agenciaConta.append($('<option />').val(item.Id).text(item.Agencia + '/' + item.Conta));
                });
            }).fail(function (jqXhr, textStatus, errorThrown) {
                alert(errorThrown);
            });
        }
    }
</script>
@{
    Html.RenderAction("Pesquisar", "Banco", new { area = "Comum" });
}