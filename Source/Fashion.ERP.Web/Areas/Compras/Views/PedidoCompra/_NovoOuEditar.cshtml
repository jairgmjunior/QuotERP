@model Fashion.ERP.Web.Areas.Compras.Models.PedidoCompraModel



<script>
    $(document).ready(function () {
        $('#ValorMercadorias').attr('readonly', true);
        $('#ValorLiquido').attr('readonly', true);
        $('#ValorDesconto').attr('readonly', true);

    });
    
</script>

<fieldset>
    <legend></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.UnidadeEstocadora)
                <div class="controls">
                    @Html.DropDownList("UnidadeEstocadora", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.UnidadeEstocadora, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.SituacaoCompra)
            <div class="controls">
                @Html.EditorFor(x => x.SituacaoCompra)
            </div>
        </div>
        </div>
    </div>
    
    <div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Numero)
            <div class="controls">
                @Html.EditorFor(x => x.Numero)
                @Html.ValidationMessageFor(x => x.Numero, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.DataCompra)
            <div class="controls">
                @Html.EditorFor(x => x.DataCompra)
                @Html.ValidationMessageFor(x => x.DataCompra, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
    
    <div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Fornecedor)
            <div class="controls">
                @Html.HiddenFor(x => x.Fornecedor, new { id = "Fornecedor" })
                <div class="input-append">
                    <input id="codigo-fornecedor" class="input-small numeric-only" type="text" />
                    <button id="pesquisar-fornecedor" class="btn" type="button"><i class="icon-search"></i></button>
                    <span id="descricao-fornecedor" class="add-on"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Comprador)
            <div class="controls">
                @Html.HiddenFor(x => x.Comprador, new { id = "funcionario" })
                <div class="input-append">
                    <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                    <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                    <span id="descricao-funcionario" class="add-on"></span>
                </div>
            </div>
        </div>
    </div>
</div>
</fieldset>

<ul class="nav nav-tabs" id="myTab">
    <li class="active"><a href="#pedido" data-toggle="tab">Dados do pedido</a></li>
    <li><a href="#itens" data-toggle="tab">Itens do pedido</a></li>
  
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="pedido">
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoFaturamento)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoFaturamento)
                        @Html.ValidationMessageFor(x => x.PrevisaoFaturamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoEntrega)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoEntrega)
                        @Html.ValidationMessageFor(x => x.PrevisaoEntrega, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
    
        </div>
        
        <div class="row">
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Transportadora)
                    <div class="controls">
                        @Html.DropDownList("Transportadora", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Transportadora, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>

            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TipoCobrancaFrete)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.TipoCobrancaFrete, Model.TipoCobrancaFrete.ToSelectList())
                        @Html.ValidationMessageFor(x => x.TipoCobrancaFrete, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.MeioPagamento)
                    <div class="controls">
                        @Html.DropDownList("MeioPagamento", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.MeioPagamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>

            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Prazo)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Prazo, null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Prazo, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Observacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.Observacao)
                        @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Contato)
                    <div class="controls">
                        @Html.EditorFor(x => x.Contato)
                        @Html.ValidationMessageFor(x => x.Contato, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="tab-pane" id="itens">
        
 
        
        @(Html.Kendo().Grid(@Model.GridItens)
            .Name("GridItens")
            .Columns(columns =>
            {
                columns.Bound(x => x.Id).Hidden();            
                columns.Bound(x => x.Referencia).EditorTemplateName("BotaoPesquisaMaterialGrid").Width("12%");
                columns.Bound(x => x.Descricao);
                columns.Bound(x => x.UnidadeMedida).Width(100);
                columns.Bound(e => e.ReferenciaExterna).Width(80);
                columns.Bound(e => e.Quantidade).EditorTemplateName("Numeric").Width(60);
                columns.Bound(e => e.PrevisaoEntregaString).EditorTemplateName("Date").Width(90);
                columns.Bound(e => e.ValorUnitario).Width(80);
                columns.Bound(e => e.ValorDesconto).Width(80);
                columns.Bound(e => e.ValorTotal).Width(80);
                columns.Command(command =>  { command.Edit(); command.Destroy(); } );
            })
            .ClientDetailTemplateId("template")
            .DataSource(s => s.Ajax()
                .Model(model =>
                {
                    model.Id(item => item.Id); 
                    model.Field(product => product.Descricao).Editable(true); 
                    model.Field(product => product.UnidadeMedida).Editable(true);
                    model.Field(product => product.PrevisaoEntrega).Editable(true); 
                })
                .Create(update => update.Action("EditingInline_Create", "PedidoCompra"))
                .Read(read => read.Action("EditingInline_Read", "PedidoCompra"))
                .Update(update => update.Action("EditingInline_Update", "PedidoCompra"))
                .Destroy(update => update.Action("EditingInline_Destroy", "PedidoCompra"))
            )
            .ToolBar(toolbar => toolbar.Create().Text("Incluir").HtmlAttributes(new { @class="btn-primary" }))
            .Editable(editable => editable.Mode(GridEditMode.InLine))
            .Resizable(resize => resize.Columns(true))
            .Events(events => events.DataBound("onDataBound").Edit("onEditGrid"))
            )
    
  <script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=PedidoCompraId#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Detalhes Itens").Content(@<text>
                    @(Html.Kendo().Grid(Model.GridPedidoItemDetalhe)
                        .Name("grid_#=PedidoCompraId#")
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.Id).Hidden();
                            columns.Bound(o => o.Referencia).Width(80);
                            columns.Bound(o => o.ReferenciaExterna).Width(80);
                            columns.Bound(o => o.Descricao).Width(500);
                            columns.Bound(o => o.UnidadeMedida).Width(60);
                            columns.Bound(o => o.Quantidade).Format("{0:n2}").Width(60);
                            columns.Bound(o => o.QuantidadeEntregue).Width(80);
                            columns.Bound(o => o.Diferenca).Width(80);
                            columns.Bound(o => o.ValorUnitario).Width(80);
                            columns.Bound(o => o.ValorDesconto).Width(80);
                            columns.Bound(o => o.ValorTotal).Width(80);
                            columns.Bound(o => o.Situacao).Width(120);
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(5)
                            .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                              .Model(model =>
                              {
                                   model.Id(e => e.Id);
                                   model.Field(detalhe => detalhe.PedidoCompraId).DefaultValue(@Model.Id);
                              })
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
                </text>                        
                );
                items.Add().Text("Recebimento").Content(
                    "<div class='employee-details'>" +
                        "<ul>" +
                            "<li>teste</li>" +
                        "</ul>" +
                    "</div>"
                );                
            })
            .ToClientTemplate())
</script>
    </div>
</div>

<fieldset>
    <legend>Totais</legend>
</fieldset>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorMercadorias)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="ValorMercadorias" name="ValorMercadorias" type="text" value="@Model.ValorMercadorias" />
                @*@Html.TextBox("ValorMercadorias",@Model.ValorMercadorias, new { @class = "help-block", disabled = "disabled", @readonly = "readonly", @style="whidt:300px"})*@
                @Html.ValidationMessageFor(x => x.ValorMercadorias, null, new { @class = "help-block"})
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorFrete)
            <div class="controls">
                @Html.EditorFor(x => x.ValorFrete)
                @Html.ValidationMessageFor(x => x.ValorFrete, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEncargos)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEncargos)
                @Html.ValidationMessageFor(x => x.ValorEncargos, null, new { @class = "help-block" })
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEmbalagem)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEmbalagem)
                @Html.ValidationMessageFor(x => x.ValorEmbalagem, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorDesconto)
            <div class="controls">
                @Html.EditorFor(x => x.ValorDesconto)
                @Html.ValidationMessageFor(x => x.ValorDesconto, null, new { @class = "help-block" })
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorLiquido)
            <div class="controls">
                @Html.EditorFor(x => x.ValorLiquido)
                @Html.ValidationMessageFor(x => x.ValorLiquido, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    
</div>

@*<script>
    $(function() {

        $('#btn-add').on('click', function() {

            // Validações
            // UnidadeEstocadora
            if ($("#UnidadeEstocadora").prop("selectedIndex") < 0) {
                $('#UnidadeEstocadora').addClass('input-validation-error');
                alert('Selecione uma unidade estocadora.');
                $('#UnidadeEstocadora').focus();
                return;
            }

            // Fornecedor 
            if ($("#Fornecedor").prop("selectedIndex") < 0) {
                $('#Fornecedor').addClass('input-validation-error');
                alert('Selecione um fornecedor.');
                $('#codigo-fornecedor').focus();
                return;
            }

            // Quantidade
            var quantidade = $('#Quantidade').val();
            if (quantidade <= 0) {
                $('#Quantidade').addClass('input-validation-error');
                alert('Informe a quantidade.');
                $('#Quantidade').focus();
                return;
            }

            var materialId = $('#Material').val();
            var referencia = $('#referencia-material').val();
            var descricao = $('#descricao-material').text();
            var unidadeMedidaId = $('#UnidadeMedida').val();
            var unidadeMedida = $('#UnidadeMedida option:selected').text();
            var valorUnitario = $('#ValorUnitario').val();
            var valorTotal = $('#ValorTotal').val();

            // Material
            if (materialId == '') {
                $('#Material').addClass('input-validation-error');
                alert('Selecione uma referência');
                $('#referencia-material').focus();
                return;
            }

            // UnidadeMedida 
            if ($("#UnidadeMedida").prop("selectedIndex") < 0) {
                $('#UnidadeMedida').addClass('input-validation-error');
                alert('Selecione uma unidade de medida.');
                $('#UnidadeMedida').focus();
                return;
            }

            // Verificar se já está na lista
            //var cadastrado = false;
            //$('input[name=Materiais]').each(function() {
            //    if ($(this).val() == materialId) {
            //        alert("O produto selecionado já foi incluído na lista.");
            //        $('#referencia-material').focus();
            //        cadastrado = true;
            //        return;
            //    }
            //});

            //if (cadastrado == false) {
            //    $('#table-sequencia tbody').append(
            //        '<tr>\
            //        <td>' + referencia + '<input type="hidden" name="PedidoCompraItens" /><input type="hidden" name="Materiais" value="' + materialId + '"/></td>\
            //        <td>' + descricao + '</td>\
            //        <td>' + unidadeMedida + '<input type="hidden" name="UnidadeMedidas" value="' + unidadeMedidaId + '"/></td>\
            //        <td>' + quantidade + '<input type="hidden" name="Quantidades" value="' + quantidade + '"/></td>\
            //        <td>' + valorUnitario + '<input type="hidden" name="ValorUnitarios" value="' + valorUnitario + '"/></td>\
            //        <td>' + valorTotal + '<input type="hidden" name="ValorTotais" value="' + valorTotal + '"/></td>\
            //        <td>Não Atendido <input type="hidden" name="SituacaoCompras" value="NaoAtendido"/></td>\
            //        <td><a href="javascript:void(0)" onclick="Delete(this)"><i class="icon-remove"></i></a></td>\
            //    </tr>'
            //    );

            // limpar formulário
            //    $('#referencia-material').val('');
            //    $('#Material').val('');
            //    $('#descricao-material').text('');
            //    $('#Quantidade').data("kendoNumericTextBox").value(0);
            //    $('#UnidadeMedida')[0].selectedIndex = 0;
            //    $('#ValorUnitario').data("kendoNumericTextBox").value(0);
            //    $('#ValorTotal').data("kendoNumericTextBox").value(0);
            //}

        });
    });

    $('#Quantidade, #ValorUnitario').on('change', function () {
        var quantidade = $('#Quantidade').data("kendoNumericTextBox").value();
        var valorUnitario = $('#ValorUnitario').data("kendoNumericTextBox").value();

        $('#ValorTotal').data("kendoNumericTextBox").value(quantidade * valorUnitario);
    });
    
    function Delete(a) {
        var row = $(a).parents('tr:first');

        // Validar
        var situacao = row.find("input[name=SituacaoCompras]").val();
        if (situacao != 'NaoAtendido') {
            alert('Não é possível excluir este item.\r\nSó é possível excluir itens com situação: "Não atendido".');
            return;
        }

        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }
</script>*@

<script>
    
    function onEditGrid(e) {
        $("#Descricao").attr("readonly", true);
        $("#Descricao").width('86%');
        $("#UnidadeMedida").attr("readonly", true);
        $("#UnidadeMedida").addClass("input-small");
        $("#Quantidade").data("kendoNumericTextBox").wrapper.width("100px");
        if (!e.model.isNew()) {
            $("#Referencia").attr("readonly", true);
            $("#pesquisar-material").attr("disabled", true);
        }
    }

    function onDataBound(e) {
        var gridData = e.sender.dataSource.data();

        var total = 0;

        for (var i = 0; i < gridData.length; i++) {
            total = total + gridData[i].ValorTotal;
        }
        $('#ValorMercadorias').val(total);
        $('#ValorMercadorias').change();
    }
    

    $('#form').submit(function (e) {
        e.preventDefault();

        if (!$("#form").valid()) {
            $('#btnSubmit').button('reset');
            return true;
        }

        if (!validaFormulario()) {
            $('#btnSubmit').button('reset');
            return true;
        }

        var formData = $("#form").serializeObject();
        formData.GridItens = obtenhaDadosGridItens();
        var dados = { "model": formData };
        $.ajax({
            type: "POST",
            cache: false,
            url: obtenhaUrlActionSubmit(),
            //headers: headers,
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(dados),
            //dataType: "json",
            success: function (retorno) {
                if (retorno == "error") {
                    window.location.reload();
                    return;
                }
                window.location.href = '@Url.Action("Index", "PedidoCompra")';
            },
            error: function (error) {
                console.log(error);
            }
        });

        return true;
    });

    function validaFormulario() {
        var retorno = true;

        if ($("#UnidadeEstocadora").prop("selectedIndex") <= 0) {
            $('#UnidadeEstocadora').addClass('input-validation-error');
            alert('Selecione uma unidade estocadora.');
            $('#UnidadeEstocadora').focus();
            return false;
        }

        // Fornecedor 
        if ($("#Fornecedor").prop("selectedIndex") <= 0) {
            $('#Fornecedor').addClass('input-validation-error');
            alert('Selecione um fornecedor.');
            $('#codigo-fornecedor').focus();
            return false;
        }


        return retorno;
    }

    function obtenhaDadosGridItens() {
        var grid = $("#GridItens").data("kendoGrid");
        if (grid) {
            return grid.dataSource.data();
        }
        return null;
    }

    $.fn.serializeObject = function () {
        var o = Object.create(null),
            elementMapper = function (element) {
                element.name = $.camelCase(element.name);
                return element;
            },
            appendToResult = function (i, element) {
                var node = o[element.name];

                if ('undefined' != typeof node && node !== null) {
                    o[element.name] = node.push ? node.push(element.value) : [node, element.value];
                } else {
                    o[element.name] = element.value;
                }
            };

        $.each($.map(this.serializeArray(), elementMapper), appendToResult);
        return o;
    };

   

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    $(".k-grid-save-changes").on("click", function () {
        var datasourcedata = $("#GridItens").data("kendoGrid").dataSource.data();

        //marca todos os itens da grid como novos para serem passados para a action de salvamento.
        for (var i = 0; i < datasourcedata.length; i++) {
            datasourcedata[i].id = null;
        }
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#GridItens").data("kendoGrid").dataSource.read();
        }
    }



    function Delete(a) {
        var row = $(a).parents('tr:first');
        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }

    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Compras.PedidoCompra.Index())';
            window.location.href = returnUrl;
        }
    }

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                quantidadesolicitadavalidation: function (input, params) {
                    if (input.is("[name='Quantidade']") && input.val()) {
                        return input.val() != 0;
                    }
                    return true;
                },
                referenciavalidation: function (input, params) {
                    if (input.is("[name='Referencia']")) {
                        return input.val() != '';
                    }
                    return true;
                }
            },
            messages: {
                quantidadesolicitadavalidation: function (input) {
                    input.attr("data-quantidadesolicitadavalidation-msg", "A Quantidade não pode ser 0.");
                    return input.attr("data-quantidadesolicitadavalidation-msg");
                },
                referenciavalidation: function (input) {
                    input.attr("data-referenciavalidation-msg", "O material deve ser selecionado");
                    return input.attr("data-referenciavalidation-msg");
                }
            }
        });
    })(jQuery, kendo);
</script>