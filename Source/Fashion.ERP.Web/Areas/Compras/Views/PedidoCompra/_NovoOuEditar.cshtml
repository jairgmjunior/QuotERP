@model Fashion.ERP.Web.Areas.Compras.Models.PedidoCompraModel

@Html.HiddenFor(x => x.Autorizado)

@*Criada para contornar um BUG no kendo*@
@Html.Hidden("FlagValidacao")
<fieldset>
    <legend></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.UnidadeEstocadora)
                <div class="controls">
                    @Html.DropDownList("UnidadeEstocadora", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.UnidadeEstocadora, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.SituacaoCompra)
                <div class="controls">
                    @Html.EditorFor(x => x.SituacaoCompra)
                    @Html.HiddenFor(x => x.SituacaoCompra)
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Numero)
                <div class="controls">
                    @Html.EditorFor(x => x.Numero)
                    @Html.ValidationMessageFor(x => x.Numero, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.DataCompra)
                <div class="controls">
                    @Html.EditorFor(x => x.DataCompra)
                    @Html.ValidationMessageFor(x => x.DataCompra, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Fornecedor)
                <div class="controls">
                    @Html.HiddenFor(x => x.Fornecedor, new { id = "Fornecedor" })
                    <div class="input-append">
                        <input id="codigo-fornecedor" class="input-small numeric-only" type="text" />
                        <button id="pesquisar-fornecedor" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-fornecedor" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Comprador)
                <div class="controls">
                    @Html.HiddenFor(x => x.Comprador, new { id = "funcionario" })
                    <div class="input-append">
                        <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                        <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-funcionario" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</fieldset>

<ul class="nav nav-tabs" id="myTab">
    <li class="active"><a href="#pedido" data-toggle="tab">Dados do pedido</a></li>
    <li><a href="#itens" data-toggle="tab">Itens do pedido</a></li>
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="pedido">
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoFaturamento)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoFaturamento)
                        @Html.ValidationMessageFor(x => x.PrevisaoFaturamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoEntrega)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoEntrega)
                        @Html.ValidationMessageFor(x => x.PrevisaoEntrega, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Transportadora)
                    <div class="controls">
                        @Html.DropDownList("Transportadora", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Transportadora, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TipoCobrancaFrete)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.TipoCobrancaFrete, Model.TipoCobrancaFrete.ToSelectList())
                        @Html.ValidationMessageFor(x => x.TipoCobrancaFrete, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.MeioPagamento)
                    <div class="controls">
                        @Html.DropDownList("MeioPagamento", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.MeioPagamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Prazo)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Prazo, null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Prazo, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Observacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.Observacao)
                        @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Contato)
                    <div class="controls">
                        @Html.EditorFor(x => x.Contato)
                        @Html.ValidationMessageFor(x => x.Contato, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        @{
            if (@Model.Autorizado)
            {
                <fieldset>
                    <legend><small>Dados da autorização</small></legend>
                </fieldset>
                <div class="row">
                    <div class="span6">
                        <div class="control-group">
                            @Html.LabelForRequired(x => x.FuncionarioAutorizador)
                            <div class="controls">
                                @Html.TextBoxFor(x => x.FuncionarioAutorizador, new {disabled = "disabled"})
                            </div>
                        </div>
                    </div>
                    <div class="span6">
                        <div class="control-group">
                            @Html.LabelForRequired(x => x.DataAutorizacao)
                            <div class="controls">
                                @Html.EditorFor(x => x.DataAutorizacao)
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="tab-pane" id="itens">
        @(Html.Kendo().Grid(@Model.GridItens)
            .Name("GridItens")
            .Columns(columns =>
            {
                columns.Bound(x => x.Id).Hidden();
                columns.Bound(x => x.Referencia);
                columns.Bound(x => x.Descricao);
                columns.Bound(x => x.UnidadeMedida).Width(55);
                columns.Bound(e => e.ReferenciaExterna).Width(60);
                columns.Bound(e => e.Quantidade).EditorTemplateName("numeric5casasdecimais").Width(80);
                columns.Bound(e => e.PrevisaoEntregaString).EditorTemplateName("Date").Width(60);
                columns.Bound(e => e.ValorUnitario).EditorTemplateName("numeric5casasdecimais").Format("{0:N5}").Width(110);
                columns.Bound(e => e.ValorDesconto).EditorTemplateName("numeric5casasdecimais").Format("{0:N5}").Width(100);
                columns.Bound(e => e.ValorTotal).EditorTemplateName("numeric5casasdecimais").Format("{0:N5}").Width(110);
                columns.Command(command =>  command.Destroy() );
            })
            .DataSource(s => s.Ajax()
                .Model(model =>
                {
                    model.Id(item => item.Id);
                    model.Field(product => product.Descricao).Editable(true);
                    model.Field(product => product.UnidadeMedida).Editable(true);
                    model.Field(product => product.PrevisaoEntrega).Editable(true);
                    model.Field(product => product.ValorTotal).Editable(true);
                    model.Field(product => product.ValorUnitario).Editable(true);
                })
            )
            .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new { @href = "#", @id = "pesquisarvarios-material", @class = "btn-primary" }))
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Resizable(resize => resize.Columns(true))
            .Events(events => events.DataBound("onDataBound").Edit("onEditGrid"))
            )
        
        @*text/x-kendo-template*@
        <script id="template" type="text/kendo-tmpl">
        @(Html.Kendo().TabStrip()
                .Name("tabStrip_#=PedidoCompraId#")
                .SelectedIndex(0)
                .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
                .Items(items =>
                {
                    items.Add().Text("Detalhes").Content(@<text>
                        <table class="table table-bordered">
                          <thead>
                            <tr class="active">
                                <td>
                                    <b>Referência</b>
                                </td>
                                    <td>
                                    <b>Referência Externa</b>
                                </td>
                                <td>
                                    <b>Descrição</b>
                                </td>
      
                                <td>
                                    <b>Unidade</b>
                                </td>
                                <td>
                                    <b>Qtde</b>
                                </td>
                                <td>
                                    <b>Qtde Entregue</b>
                                </td>
                                <td>
                                    <b>Diferença</b>
                                </td>
                                <td>
                                    <b>Preço(R$)</b>
                                </td>
                                <td>
                                    <b>Desconto(R$)</b>
                                </td>
                                    <td>
                                    <b>Valor Total(R$)</b>
                                </td>
                                <td>
                                    <b>Situação</b>
                                </td>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                                <td>
                                    #: Referencia #
                                </td>
                                    <td>
                                    #: ReferenciaExterna #
                                </td>
                                <td>
                                    #: Descricao #
                                </td>
      
                                <td>
                                    #: UnidadeMedida #
                                </td>
                                <td>
                                    #: Quantidade #
                                </td>
                                <td>
                                        #: QuantidadeEntregue #
                                </td>
                                <td>
                                    #: Diferenca #
                                </td>
                                <td>
                                    #: kendo.toString(ValorUnitario,'n5') #
                                </td>
                                <td>
                                    #: kendo.toString(ValorDesconto,'n5') #
                                </td>
                                <td>                                    
                                    #: kendo.toString(ValorTotal,'n5') #                                
                                </td>
                                <td>
                                    #: Situacao #
                                </td>
                            </tr>
                          </tbody>
                        </table>
                    </text>
                    );
                    items.Add().Text("Recebimento").Content(
                        "<div class='employee-details'>" +
                            "<ul>" +
                                "<li>Em desenvolvimento.</li>" +
                            "</ul>" +
                        "</div>"
                    );
                })
                .ToClientTemplate())
        </script>
    </div>
</div>

<fieldset>
    <legend>Totais</legend>
</fieldset>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorMercadorias)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorMercadorias" name="txtValorMercadorias" type="text" value=" @Model.ValorMercadorias" class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorMercadorias" name="ValorMercadorias"  value=" @Model.ValorMercadorias" />
                @Html.ValidationMessageFor(x => x.ValorMercadorias, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorFrete)
            <div class="controls">
                @Html.EditorFor(x => x.ValorFrete)
                @Html.ValidationMessageFor(x => x.ValorFrete, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEncargos)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEncargos)
                @Html.ValidationMessageFor(x => x.ValorEncargos, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEmbalagem)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEmbalagem)
                @Html.ValidationMessageFor(x => x.ValorEmbalagem, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorDesconto)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorDesconto" name="txtValorDesconto" type="text" value="@Model.ValorDesconto" class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorDesconto" name="ValorDesconto"  value=" @Model.ValorDesconto" />
                @Html.ValidationMessageFor(x => x.ValorDesconto, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorCompra)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorCompra" name="txtValorCompra" type="text" value=" @Model.ValorCompra"  class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorCompra" name="ValorCompra"  value=" @Model.ValorCompra" />                
                @Html.ValidationMessageFor(x => x.ValorCompra, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
   
        $("#selecionar-material").on("pesquisar", function (ev, itens) {
            alert(itens.DataItemsSelecionados.length);


    //        public long? Id { get; set; }
    //        public long? PedidoCompraId { get; set; }
    //        public long? MaterialId { get; set; }
    //        public string Descricao { get; set; }
    //    public string Referencia { get; set; }
    //    public string UnidadeMedida { get; set; }
    //public double? Quantidade { get; set; }
    //public double? ValorUnitario { get; set; }
    //public double? ValorDesconto { get; set; }
    //public double? ValorTotal
    //public DateTime? PrevisaoEntrega { get; set; }
    //public String PrevisaoEntregaString { get; set; }
    //public string ReferenciaExterna { get; set; }
    //public double? Diferenca { get; set; }
    //public String Situacao { get; set; }
    //public double? QuantidadeEntregue { get; set; }
    //public DateTime? DataEntrega { get; set; }
            
            //if (dados.Error) {
            //    alert(dados.Error);
            //    return;
            //}

            var grid = $('#GridItens').data("kendoGrid");
            var model = grid.dataSource.options.schema.model;
            var dadosAtuais = grid.dataSource.data()
            var novosDados = itens.DataItemsSelecionados;
            var dados = $.merge(novosDados, dadosAtuais);

            var dataSource = new kendo.data.DataSource({
                data: dados,
                schema: {
                    model: model
                }
            });
            dataSource.read();
            grid.setDataSource(dataSource);
            grid.refresh();
            
        });

        $('#ValorMercadorias').attr('readonly', true);
        $('#ValorCompra').attr('readonly', true);
        $('#ValorDesconto').attr('readonly', true);
        if($('#DataAutorizacao').get(0) != null) {
            $('#DataAutorizacao').data("kendoDatePicker").enable(false);
        }

        $('#ValorEncargos').blur(function () {
            AtualizaValorCompra();
        });

        $('#ValorFrete').blur(function () {
            AtualizaValorCompra();
        });

        $('#ValorEmbalagem').blur(function () {
            AtualizaValorCompra();
        });

        $('#FlagValidacao').val(true);
    });

    function registreScriptsGrid() {
        $("#Quantidade.k-input").change(function (e) {
            AtualizeValorTotal(e.target);
        });

        $("#ValorUnitario.k-input").change(function (e) {
            AtualizeValorTotal(e.target);
        });

        $("#ValorDesconto.k-input").change(function (e) {
            AtualizeValorTotal(e.target);
        });

        $('#ValorDesconto.k-input').bind("keydown", function (e) {
            if (e.which == 13) { 
                e.preventDefault();
                var botaoAtualizar = $('#ValorDesconto.k-input').closest("tr").find(".k-grid-update");
                setTimeout(function () { botaoAtualizar.focus(); }, 100);
                return false;
            }
            return true;
        });

        $('#Descricao').change(function (e) {
            var referencia = $("#Referencia").val();
            if (referencia != '') {
                var url = '/Almoxarifado/Material/ObtenhaCusto?referencia=' + referencia;
                $.getJSON(url, function (result) {
                    var item = ObtenhaDataItemGridItens(e.target);
                    setValorUnitario(result.Custo, item);
                    AtualizeValorTotal(e.target);
                }).fail(function (jqXhr, textStatus, errorThrown) {
                    alert(errorThrown);
                });
            }
        });
    }

    function AtualizeValorTotal(target) {
        var item = ObtenhaDataItemGridItens(target);
        var valorCalculado = (item.Quantidade * item.ValorUnitario) - item.ValorDesconto;
        item.set("ValorTotal", valorCalculado);
    }

    function ObtenhaDataItemGridItens(target) {
        var row = $(target).closest("tr");
        var grid = $('#GridItens').data("kendoGrid");
        return grid.dataItem(row);
    }

    function AtualizaValorCompra() {
        var valorMercadorias = $('#ValorMercadorias').val();
        var valorEncargos = FormatarValores($('#ValorEncargos').val());
        var valorFrete = FormatarValores($('#ValorFrete').val());
        var valorEmbalagem = FormatarValores($('#ValorEmbalagem').val());
        var valorDesconto = FormatarValores($('#ValorDesconto').val());
        var valorCompra = 0;

        valorCompra = parseFloat(FormatarValores(valorMercadorias)) +  parseFloat(FormatarValores(valorEncargos)) +  parseFloat(FormatarValores(valorFrete)) + parseFloat(FormatarValores(valorEmbalagem));
        valorCompra = valorCompra - parseFloat(FormatarValores(valorDesconto));

        $('#ValorCompra').val(formateDecimal(valorCompra));
        $('#ValorCompra').change();

        $('#txtValorCompra').val(kendo.toString(valorCompra, "c5"));
        $('#txtValorCompra').change();
    }

    function FormatarValores(campo) {
        if (!campo) return 0;
        return campo.replace(",", ".");
    }

    function formateDecimal(valor) {
        if (!valor) return 0;
        return valor.toString().replace(".", ",");
    }

    function ehTelaNovo() {
        var pathArray = window.location.pathname.split('/');
        return $.inArray('Novo', pathArray) > -1;
    }

    function onEditGrid(e) {

        $("#Descricao").attr("readonly", true);
        $("#Descricao").width('86%');
        $("#UnidadeMedida").attr("readonly", true);
        $("#UnidadeMedida").addClass("input-small");
        $("#ReferenciaExterna").attr("readonly", true);

        //$("#Quantidade").data("kendoNumericTextBox").wrapper.width("100px");
        if (!e.model.isNew()) {
            $("#Referencia").attr("readonly", true);
            $("#pesquisar-material").attr("disabled", true);
        }

        $("#ValorTotal").data("kendoNumericTextBox").enable(false);
        $("#ValorTotal").data("kendoNumericTextBox").wrapper
               .find(".k-numeric-wrap")
               .addClass("expand-padding")
               .find(".k-select").hide();
        
        registreScriptsGrid();
    }

    function desabilitaColunaDetalhes() {

        $("tr", "#GridItens").on("click", ".k-grid-edit", function (e) {
            $("tr", "#GridItens").on("click", ".k-grid-cancel", function (e) {
                setTimeout(function () {
                    if (ehTelaNovo()) {
                        $(".k-hierarchy-cell").remove();
                        $(".k-hierarchy-col").remove();
                    }
                }, 300);
            });
        });
        if (ehTelaNovo()) {
            $(".k-hierarchy-cell").remove();
            $(".k-hierarchy-col").remove();
        }
    }

    function onDataBound(e) {

        desabilitaColunaDetalhes();

        var gridData = e.sender.dataSource.data();

        var total = 0;
        var desconto = 0;
        var valorCompra = 0;

        for (var i = 0; i < gridData.length; i++) {
            total = total + gridData[i].ValorTotal;
            desconto = desconto + gridData[i].ValorDesconto;
        }

        $('#ValorMercadorias').val(formateDecimal(total));
        $('#ValorMercadorias').change();

        $('#txtValorMercadorias').val(kendo.toString(total, "c5"));
        $('#txtValorMercadorias').change();

        $('#ValorDesconto').val(formateDecimal(desconto));
        $('#ValorDesconto').change();
        
        $('#txtValorDesconto').val(kendo.toString(desconto, "c5"));
        $('#txtValorDesconto').change();

        AtualizaValorCompra();
    }

    $('#form').submit(function (e) {
        e.preventDefault();

        if (!$("#form").valid()) {
            $('#btnSubmit').button('reset');
            return true;
        }

        if (!validaFormulario()) {
            $('#btnSubmit').button('reset');
            return true;
        }

        var dataGridItens = $("#GridItens").data("kendoGrid").dataSource.data();

        if (dataGridItens.length == 0) {
            alert("Insira pelo menos um item na grid.");
            $('#btnSubmit').button('reset');
            return true;
        }

        if (dataGridItens[0].Referencia == '' ||
            dataGridItens[0].ValorUnitario == 0 || dataGridItens[0].ValorUnitario == null ||
            dataGridItens[0].Quantidade == 0 || dataGridItens[0].Quantidade == null) {
            alert("Preencha os campos do item inserido.");
            $('#btnSubmit').button('reset');
            return true;
        }

        var formData = $("#form").serializeObject();
        formData.GridItens = obtenhaDadosGridItens();
        var dados = { "model": formData };
        $.ajax({
            type: "POST",
            cache: false,
            url: obtenhaUrlActionSubmit(),
            //headers: headers,
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(dados),
            //dataType: "json",
            success: function (retorno) {
                if (retorno.Data == "error") {
                    $('#btnSubmit').button('reset');
                    alert(retorno.Msg);
                    return;
                }
                window.location.href = '@Url.Action("Index", "PedidoCompra")';
            },
            error: function (error) {
                console.log(error);
            }
        });

        return true;
    });

    function validaFormulario() {

        if ($("#UnidadeEstocadora").prop("selectedIndex") <= 0) {
            $('#UnidadeEstocadora').addClass('input-validation-error');
            alert('Selecione uma unidade estocadora.');
            $('#UnidadeEstocadora').focus();
            return false;
        }

        // Fornecedor 
        if ($("#Fornecedor").prop("selectedIndex") <= 0) {
            $('#Fornecedor').addClass('input-validation-error');
            alert('Selecione um fornecedor.');
            $('#codigo-fornecedor').focus();
            return false;
        }

        return true;
    }

    function obtenhaDadosGridItens() {
        var grid = $("#GridItens").data("kendoGrid");
        if (grid) {
            return grid.dataSource.data();
        }
        return null;
    }

    $.fn.serializeObject = function () {
        var o = Object.create(null),
            elementMapper = function (element) {
                element.name = $.camelCase(element.name);
                return element;
            },
            appendToResult = function (i, element) {
                var node = o[element.name];

                if ('undefined' != typeof node && node !== null) {
                    o[element.name] = node.push ? node.push(element.value) : [node, element.value];
                } else {
                    o[element.name] = element.value;
                }
            };

        $.each($.map(this.serializeArray(), elementMapper), appendToResult);
        return o;
    };

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#GridItens").data("kendoGrid").dataSource.read();
        }
    }

    function Delete(a) {
        var row = $(a).parents('tr:first');
        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }

    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Compras.PedidoCompra.Index())';
            window.location.href = returnUrl;
        }
    }

    function limpeLinhaGrid() {
        var gridItens = $('#GridItens').data("kendoGrid");
        var tr = $("#Referencia").closest("tr");
        var dataGridItens = gridItens.dataItem(tr);
        dataGridItens.set("Descricao", null);
        dataGridItens.set("Referencia", null);
        dataGridItens.set("UnidadeMedida", null);
        dataGridItens.set("ReferenciaExterna", null);
        dataGridItens.set("Quantidade", null);
        dataGridItens.set("PrevisaoEntregaString", null);
        dataGridItens.set("ValorTotal", null);
        setValorUnitario(null, dataGridItens);
        setValorDesconto(null, dataGridItens);
    }

    function setValorUnitario(valor, dataGridItens) {
        $('#FlagValidacao').val(false);
        dataGridItens.set("ValorUnitario", valor);
        $('#FlagValidacao').val(true);
    }

    function setValorDesconto(valor, dataGridItens) {
        $('#FlagValidacao').val(false);
        dataGridItens.set("ValorDesconto", valor);
        $('#FlagValidacao').val(true);
    }

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                quantidadevalidation: function (input, params) {
                    if (input.is("[name='Quantidade']")) {
                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                ValorUnitariovalidation: function (input, params) {
                    if (input.is("[name='ValorUnitario']")) {
                        if ($('#FlagValidacao').val() == "false") {
                            return true;
                        }

                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                valordescontovalidation: function (input, params) {
                    if (input.is("[name='ValorDesconto']")) {
                        if ($('#FlagValidacao').val() == "false") {
                            return true;
                        }
                        var dataItem = ObtenhaDataItemGridItens(input);

                        if (dataItem.ValorTotal == null) {
                            return true;
                        }
                        
                        var valorDesconto = input.val() == '' ? '0' : input.val();
                        return parseFloat(FormatarValores(valorDesconto)) <= dataItem.ValorTotal;
                    }
                    return true;
                },
                referenciavalidation: function (input, params) {
                    if (input.is("[name='Referencia']")) {
                        return input.val() != '';
                    }
                    return true;
                }
            },
            messages: {
                quantidadevalidation: function (input) {
                    input.attr("data-quantidadevalidation-msg", "A Quantidade não pode ser 0.");
                    return input.attr("data-quantidadevalidation-msg");
                },
                ValorUnitariovalidation: function (input) {
                    input.attr("data-ValorUnitariovalidation-msg", "O Preço não pode ser 0.");
                    return input.attr("data-ValorUnitariovalidation-msg");
                },
                valordescontovalidation: function (input) {
                    input.attr("data-valordescontovalidation-msg", "O Desconto não pode ser maior que o valor total.");
                    return input.attr("data-valordescontovalidation-msg");
                },
                referenciavalidation: function (input) {
                    input.attr("data-referenciavalidation-msg", "O material deve ser selecionado");
                    return input.attr("data-referenciavalidation-msg");
                }
            }
        });
    })(jQuery, kendo);

</script>