@model Fashion.ERP.Web.Areas.Compras.Models.PedidoCompraModel

<script>
    $(document).ready(function () {
        $('#ValorMercadorias').attr('readonly', true);
        $('#ValorLiquido').attr('readonly', true);
        $('#ValorDesconto').attr('readonly', true);
    });
</script>

<fieldset>
    <legend></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.UnidadeEstocadora)
                <div class="controls">
                    @Html.DropDownList("UnidadeEstocadora", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.UnidadeEstocadora, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.SituacaoCompra)
            <div class="controls">
                @Html.EditorFor(x => x.SituacaoCompra)
            </div>
        </div>
        </div>
    </div>
    
    <div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Numero)
            <div class="controls">
                @Html.EditorFor(x => x.Numero)
                @Html.ValidationMessageFor(x => x.Numero, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.DataCompra)
            <div class="controls">
                @Html.EditorFor(x => x.DataCompra)
                @Html.ValidationMessageFor(x => x.DataCompra, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
    
    <div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Fornecedor)
            <div class="controls">
                @Html.HiddenFor(x => x.Fornecedor, new { id = "Fornecedor" })
                <div class="input-append">
                    <input id="codigo-fornecedor" class="input-small numeric-only" type="text" />
                    <button id="pesquisar-fornecedor" class="btn" type="button"><i class="icon-search"></i></button>
                    <span id="descricao-fornecedor" class="add-on"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.Comprador)
            <div class="controls">
                @Html.HiddenFor(x => x.Comprador, new { id = "funcionario" })
                <div class="input-append">
                    <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                    <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                    <span id="descricao-funcionario" class="add-on"></span>
                </div>
            </div>
        </div>
    </div>
</div>
</fieldset>

<ul class="nav nav-tabs" id="myTab">
    <li class="active"><a href="#pedido" data-toggle="tab">Dados do pedido</a></li>
    <li><a href="#itens" data-toggle="tab">Itens do pedido</a></li>
  
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="pedido">
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoFaturamento)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoFaturamento)
                        @Html.ValidationMessageFor(x => x.PrevisaoFaturamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoEntrega)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoEntrega)
                        @Html.ValidationMessageFor(x => x.PrevisaoEntrega, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
    
        </div>
        
        <div class="row">
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Transportadora)
                    <div class="controls">
                        @Html.DropDownList("Transportadora", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Transportadora, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>

            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TipoCobrancaFrete)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.TipoCobrancaFrete, Model.TipoCobrancaFrete.ToSelectList())
                        @Html.ValidationMessageFor(x => x.TipoCobrancaFrete, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.MeioPagamento)
                    <div class="controls">
                        @Html.DropDownList("MeioPagamento", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.MeioPagamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>

            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Prazo)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Prazo, null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Prazo, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Observacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.Observacao)
                        @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Contato)
                    <div class="controls">
                        @Html.EditorFor(x => x.Contato)
                        @Html.ValidationMessageFor(x => x.Contato, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="tab-pane" id="itens">
        
                    @(Html.Kendo().Grid(Model.GridPedidoItem)
                  .Name("Grid")
                  .Columns(columns =>
                      {
                          columns.Bound(x => x.Id).Hidden();
                          //columns.Bound(x => x.NomeDepartamento).EditorTemplateName("DepartamentosList").Title("Departamento").ClientTemplate("#= NomeDepartamento == '' ? '- Selecione -' : NomeDepartamento #").Width(325);
                          columns.Bound(e => e.Referencia).Width(80);
                          columns.Bound(e => e.ReferenciaExterna).Width(80);
                          columns.Bound(e => e.Descricao).Width(500);
                          columns.Bound(e => e.UnidadeEstocadora).Width(60);
                          columns.Bound(e => e.Quantidade).Width(60);
                          columns.Bound(e => e.PrevisaoEntrega).Width(90);
                          columns.Bound(e => e.ValorUnitario).Width(80);
                          columns.Bound(e => e.ValorDesconto).Width(80);
                          columns.Bound(e => e.ValorTotal).Width(80);
                          columns.Command(command => command.Destroy());
                      }
                  )
                  .ClientDetailTemplateId("template")
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .Batch(true)
                      .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                      .Model(model =>
                      {
                           model.Id(e => e.Id);
                           model.Field(item => item.PedidoCompraId).DefaultValue(@Model.Id);
                          model.Field(e => e.Referencia).Editable(false);
                      })
                      .Create(create => create.Action("SalveSequenciaProducao", "SequenciaProducao"))
                      .Update(update => update.Action("AtualizeSequenciaProducao", "SequenciaProducao"))
                      .Destroy(destroy => destroy.Action("ExcluaSequenciaProducao", "SequenciaProducao"))
                  )
                  .ToolBar(toolbar =>
                      {
                          toolbar.Create();
                          toolbar.Save();
                      }
                  )
                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                  .Events(e => e.DataBound("onDataBound"))
            )
       
    
       <script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
            .Name("tabStrip_#=PedidoCompraId#")
            .SelectedIndex(0)
            .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
            .Items(items =>
            {
                items.Add().Text("Detalhes Itens").Content(@<text>
                    @(Html.Kendo().Grid(Model.GridPedidoItemDetalhe)
                        .Name("grid_#=PedidoCompraId#")
                        .Columns(columns =>
                        {
                            columns.Bound(o => o.Id).Title("ID").Width(56);
                            columns.Bound(o => o.Referencia).Width(70);
                            columns.Bound(o => o.ReferenciaExterna);
                            columns.Bound(o => o.Descricao).Width(140);
                            columns.Bound(o => o.UnidadeEstocadora);
                            columns.Bound(o => o.Quantidade);
                            columns.Bound(o => o.Diferenca);
                            columns.Bound(o => o.ValorUnitario);
                            columns.Bound(o => o.ValorDesconto);
                            columns.Bound(o => o.ValorTotal);
                            columns.Bound(o => o.Situacao);
                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(5)
                            .Events(events => events.Error("error_handler").RequestEnd("onRequestEnd"))
                              .Model(model =>
                              {
                                   model.Id(e => e.Id);
                                   model.Field(detalhe => detalhe.PedidoCompraId).DefaultValue(@Model.Id);
                              })
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
                </text>                        
                );
                items.Add().Text("Recebimento").Content(
                    "<div class='employee-details'>" +
                        "<ul>" +
                            "<li>teste</li>" +
                        "</ul>" +
                    "</div>"
                );                
            })
            .ToClientTemplate())
</script>
    </div>
</div>

<fieldset>
    <legend>Totais</legend>
</fieldset>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorMercadorias)
            <div class="controls">
                @Html.EditorFor(x => x.ValorMercadorias)
                @Html.ValidationMessageFor(x => x.ValorMercadorias, null, new { @class = "help-block", disabled = "disabled", @readonly = "readonly" })
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorFrete)
            <div class="controls">
                @Html.EditorFor(x => x.ValorFrete)
                @Html.ValidationMessageFor(x => x.ValorFrete, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEncargos)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEncargos)
                @Html.ValidationMessageFor(x => x.ValorEncargos, null, new { @class = "help-block" })
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEmbalagem)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEmbalagem)
                @Html.ValidationMessageFor(x => x.ValorEmbalagem, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorDesconto)
            <div class="controls">
                @Html.EditorFor(x => x.ValorDesconto)
                @Html.ValidationMessageFor(x => x.ValorDesconto, null, new { @class = "help-block" })
            </div>
        </div>
    </div>

    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorLiquido)
            <div class="controls">
                @Html.EditorFor(x => x.ValorLiquido)
                @Html.ValidationMessageFor(x => x.ValorLiquido, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    
</div>




@*
<fieldset>
    <legend></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.Label("referencia-material", "Referência", new { @class = "control-label" })
                <div class="controls">
                    @Html.Hidden("Material")
                    <div class="input-append">
                        <input id="referencia-material" class="input-small" type="text" />
                        <button id="pesquisar-material" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-material" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.Label("referencia-externa-material", "Referência externa", new { @class = "control-label" })
                <div class="controls">
                    <div class="input-append">
                        <input id="referencia-referencia-externa" class="input-small" type="text" />
                        <button id="pesquisar-referencia-externa" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-referencia-externa" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.Label("UnidadeMedida", "Unidade", new { @class = "control-label"})
                <div class="controls">
                    @Html.DropDownList("UnidadeMedida", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessage("UnidadeMedida", new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.Label("Quantidade", "Quantidade", new { @class = "control-label"})
                <div class="controls">
                    @(Html.Kendo().NumericTextBox()
                          .Name("Quantidade")
                          .Format("n5").Decimals(5)
                          .Min(0)
                          .HtmlAttributes(new { @class = "numeric input-small" }))
                    @Html.ValidationMessage("Quantidade", new { @class="help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            @Html.Label("ValorUnitario", "Valor unitário", new { @class = "control-label"})
            <div class="controls">
                @(Html.Kendo().NumericTextBox()
                      .Name("ValorUnitario")
                      .Format("c5").Decimals(5)
                      .Min(0)
                      .HtmlAttributes(new { @class = "numeric input-small" }))
                @Html.ValidationMessage("ValorUnitario", new { @class="help-block" })
            </div>
        </div>
        <div class="span6">
            @Html.Label("ValorTotal", "Valor total", new { @class = "control-label"})
            <div class="controls">
                @(Html.Kendo().NumericTextBox()
                      .Name("ValorTotal")
                      .Format("c5").Decimals(5)
                      .Min(0)
                      .HtmlAttributes(new { @class = "numeric input-small", @readonly = "readonly", tabindex = "-1" }))
                <button id="btn-add" type="button" class="btn"><i class="icon-plus"></i></button>
                @Html.ValidationMessage("ValorTotal", new { @class="help-block" })
            </div>
        </div>
    </div>
    
    <div class="control-group">
        <div class="controls">
            <table id="table-sequencia" class="table table-striped table-condensed" style="width: 800px">
                <thead>
                    <tr>
                        <th>Referência</th>
                        <th>Referência Ext.</th>
                        <th>Descrição</th>
                        <th>UND</th>
                        <th>Quantidade</th>
                        <th>Valor unitário</th>
                        <th>Valor total</th>
                        <th>Situação</th>
                        <th style="width: 16px"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Materiais != null)
                    {
                        for (int i = 0; i < Model.Materiais.Count; i++)
                        {
                            var pedidoItem = Model.PedidoCompraItens[i];
                            var material = Model.Materiais[i];
                            var unidadeMedida = Model.UnidadeMedidas[i];
                            var quantidade = Model.Quantidades[i];
                            var valorUnitario = Model.ValorUnitarios[i];
                            var valorTotal = Model.ValorTotais[i];
                            var situacao = Model.SituacaoCompras[i];

                            <tr>
                                <td>
                                    @ViewBag.MaterialReferenciasDicionario[material]
                                    <input type="hidden" name="PedidoCompraItens" value="@pedidoItem"/>
                                    <input type="hidden" name="Materiais" value="@material"/>
                                </td>
                                <td>
                                    @ViewBag.MaterialDescricoesDicionario[material]
                                </td>
                                <td>
                                    @ViewBag.UnidadeMedidasDicionario[unidadeMedida]
                                    <input type="hidden" name="UnidadeMedidas" value="@unidadeMedida"/>
                                </td>
                                <td>
                                    @quantidade.ToString("N5")
                                    <input type="hidden" name="Quantidades" value="@quantidade"/>
                                </td>
                                <td>
                                    @valorUnitario.ToString("C5")
                                    <input type="hidden" name="ValorUnitarios" value="@valorUnitario"/>
                                </td>
                                <td>
                                    @valorTotal.ToString("C5")
                                    <input type="hidden" name="ValorTotais" value="@valorTotal"/>
                                </td>
                                <td>
                                    @ViewBag.SituacoesDicionario[situacao]
                                    <input type="hidden" name="SituacaoCompras" value="@situacao"/>
                                </td>
                                <td><a href="javascript:void(0)" onclick="Delete(this)"><i class="icon-remove"></i></a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

</fieldset>
*@
<script>
    $(function() {

        $('#btn-add').on('click', function() {

            // Validações
            // UnidadeEstocadora
            if ($("#UnidadeEstocadora").prop("selectedIndex") < 0) {
                $('#UnidadeEstocadora').addClass('input-validation-error');
                alert('Selecione uma unidade estocadora.');
                $('#UnidadeEstocadora').focus();
                return;
            }

            // Fornecedor 
            if ($("#Fornecedor").prop("selectedIndex") < 0) {
                $('#Fornecedor').addClass('input-validation-error');
                alert('Selecione um fornecedor.');
                $('#codigo-fornecedor').focus();
                return;
            }

            // Quantidade
            var quantidade = $('#Quantidade').val();
            if (quantidade <= 0) {
                $('#Quantidade').addClass('input-validation-error');
                alert('Informe a quantidade.');
                $('#Quantidade').focus();
                return;
            }

            var materialId = $('#Material').val();
            var referencia = $('#referencia-material').val();
            var descricao = $('#descricao-material').text();
            var unidadeMedidaId = $('#UnidadeMedida').val();
            var unidadeMedida = $('#UnidadeMedida option:selected').text();
            var valorUnitario = $('#ValorUnitario').val();
            var valorTotal = $('#ValorTotal').val();

            // Material
            if (materialId == '') {
                $('#Material').addClass('input-validation-error');
                alert('Selecione uma referência');
                $('#referencia-material').focus();
                return;
            }

            // UnidadeMedida 
            if ($("#UnidadeMedida").prop("selectedIndex") < 0) {
                $('#UnidadeMedida').addClass('input-validation-error');
                alert('Selecione uma unidade de medida.');
                $('#UnidadeMedida').focus();
                return;
            }

            // Verificar se já está na lista
            var cadastrado = false;
            $('input[name=Materiais]').each(function() {
                if ($(this).val() == materialId) {
                    alert("O produto selecionado já foi incluído na lista.");
                    $('#referencia-material').focus();
                    cadastrado = true;
                    return;
                }
            });

            if (cadastrado == false) {
                $('#table-sequencia tbody').append(
                    '<tr>\
                    <td>' + referencia + '<input type="hidden" name="PedidoCompraItens" /><input type="hidden" name="Materiais" value="' + materialId + '"/></td>\
                    <td>' + descricao + '</td>\
                    <td>' + unidadeMedida + '<input type="hidden" name="UnidadeMedidas" value="' + unidadeMedidaId + '"/></td>\
                    <td>' + quantidade + '<input type="hidden" name="Quantidades" value="' + quantidade + '"/></td>\
                    <td>' + valorUnitario + '<input type="hidden" name="ValorUnitarios" value="' + valorUnitario + '"/></td>\
                    <td>' + valorTotal + '<input type="hidden" name="ValorTotais" value="' + valorTotal + '"/></td>\
                    <td>Não Atendido <input type="hidden" name="SituacaoCompras" value="NaoAtendido"/></td>\
                    <td><a href="javascript:void(0)" onclick="Delete(this)"><i class="icon-remove"></i></a></td>\
                </tr>'
                );

                // limpar formulário
                $('#referencia-material').val('');
                $('#Material').val('');
                $('#descricao-material').text('');
                $('#Quantidade').data("kendoNumericTextBox").value(0);
                $('#UnidadeMedida')[0].selectedIndex = 0;
                $('#ValorUnitario').data("kendoNumericTextBox").value(0);
                $('#ValorTotal').data("kendoNumericTextBox").value(0);
            }

        });
    });

    $('#Quantidade, #ValorUnitario').on('change', function () {
        var quantidade = $('#Quantidade').data("kendoNumericTextBox").value();
        var valorUnitario = $('#ValorUnitario').data("kendoNumericTextBox").value();

        $('#ValorTotal').data("kendoNumericTextBox").value(quantidade * valorUnitario);
    });
    
    function Delete(a) {
        var row = $(a).parents('tr:first');

        // Validar
        var situacao = row.find("input[name=SituacaoCompras]").val();
        if (situacao != 'NaoAtendido') {
            alert('Não é possível excluir este item.\r\nSó é possível excluir itens com situação: "Não atendido".');
            return;
        }

        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }
</script>

<script>
    $(document).ready(function () {
        //$(".k-grid-save-changes").hide();
    });

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    $(".k-grid-save-changes").on("click", function () {
        var datasourcedata = $("#Grid").data("kendoGrid").dataSource.data();

        //marca todos os itens da grid como novos para serem passados para a action de salvamento.
        for (var i = 0; i < datasourcedata.length; i++) {
            datasourcedata[i].id = null;
        }
    });

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            $("#Grid").data("kendoGrid").dataSource.read();
        }
    }

    function filtroSetores() {
        var grid = $("#Grid").data("kendoGrid");
        //get the row in edit mode and its item
        var editRow = grid.tbody.find("tr:has(.k-edit-cell)");
        var model = grid.dataItem(editRow);
        return {
            NomeDepartamento: model.NomeDepartamento
        };
    }


    function onDataBound(e) {
        $(".k-grid-Up").find("span").addClass("icon-chevron-up");
        $(".k-grid-Up").removeClass("k-button");
        $(".k-grid-Down").find("span").addClass("icon-chevron-down");
        $(".k-grid-Down").removeClass("k-button");
    }

    function Delete(a) {
        var row = $(a).parents('tr:first');
        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }

    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Compras.PedidoCompra.Index())';
            window.location.href = returnUrl;
        }
    }
</script>