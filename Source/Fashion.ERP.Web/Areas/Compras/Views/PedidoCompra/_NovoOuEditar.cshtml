@using NUnit.Framework
@model Fashion.ERP.Web.Areas.Compras.Models.PedidoCompraModel

@Html.HiddenFor(x => x.Autorizado)

@*Criada para contornar um BUG no kendo*@
@Html.Hidden("FlagValidacao")
<fieldset>
    <legend></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.UnidadeEstocadora)
                <div class="controls">
                    @Html.DropDownList("UnidadeEstocadora", null, "-- Selecione --", new { @class = "input-large" })
                    @Html.ValidationMessageFor(x => x.UnidadeEstocadora, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.SituacaoCompra)
                <div class="controls">
                    @Html.EditorFor(x => x.SituacaoCompra)
                    @Html.HiddenFor(x => x.SituacaoCompra)
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Numero)
                <div class="controls">
                    @Html.EditorFor(x => x.Numero)
                    @Html.ValidationMessageFor(x => x.Numero, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.DataCompra)
                <div class="controls">
                    @Html.EditorFor(x => x.DataCompra)
                    @Html.ValidationMessageFor(x => x.DataCompra, null, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Fornecedor)
                <div class="controls">
                    @Html.HiddenFor(x => x.Fornecedor, new { id = "Fornecedor" })
                    <div class="input-append">
                        <input id="codigo-fornecedor" class="input-small numeric-only" type="text" />
                        <button id="pesquisar-fornecedor" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-fornecedor" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Comprador)
                <div class="controls">
                    @Html.HiddenFor(x => x.Comprador, new { id = "funcionario" })
                    <div class="input-append">
                        <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                        <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-funcionario" class="add-on"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</fieldset>

<ul class="nav nav-tabs" id="myTab">
    <li class="active"><a href="#pedido" data-toggle="tab">Dados do pedido</a></li>
    <li><a href="#itens" data-toggle="tab">Itens do pedido</a></li>
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="pedido">
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoFaturamento)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoFaturamento)
                        @Html.ValidationMessageFor(x => x.PrevisaoFaturamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.PrevisaoEntrega)
                    <div class="controls">
                        @Html.EditorFor(x => x.PrevisaoEntrega)
                        @Html.ValidationMessageFor(x => x.PrevisaoEntrega, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Transportadora)
                    <div class="controls">
                        @Html.DropDownList("Transportadora", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Transportadora, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.TipoCobrancaFrete)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.TipoCobrancaFrete, Model.TipoCobrancaFrete.ToSelectList())
                        @Html.ValidationMessageFor(x => x.TipoCobrancaFrete, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.MeioPagamento)
                    <div class="controls">
                        @Html.DropDownList("MeioPagamento", null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.MeioPagamento, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Prazo)
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Prazo, null, "-- Selecione --", new { @class = "input-large" })
                        @Html.ValidationMessageFor(x => x.Prazo, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Observacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.Observacao)
                        @Html.ValidationMessageFor(x => x.Observacao, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Contato)
                    <div class="controls">
                        @Html.EditorFor(x => x.Contato)
                        @Html.ValidationMessageFor(x => x.Contato, null, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        @{
            if (@Model.Autorizado)
            {
                <fieldset>
                    <legend><small>Dados da autorização</small></legend>
                </fieldset>
                <div class="row">
                    <div class="span6">
                        <div class="control-group">
                            @Html.LabelForRequired(x => x.FuncionarioAutorizador)
                            <div class="controls">
                                @Html.TextBoxFor(x => x.FuncionarioAutorizador, new {disabled = "disabled"})
                            </div>
                        </div>
                    </div>
                    <div class="span6">
                        <div class="control-group">
                            @Html.LabelForRequired(x => x.DataAutorizacao)
                            <div class="controls">
                                @Html.EditorFor(x => x.DataAutorizacao)
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="tab-pane" id="itens">@*.ClientDetailTemplateId("template")*@
        @(Html.Kendo().Grid(@Model.GridItens)
            .Name("GridItens")
            .Columns(columns =>
            {
                columns.Bound(p => p.Id).Hidden().ClientTemplate(
                    "<input type='hidden' name='GridItens[#= index(data)#].Id' value='#= Id #' />");
                columns.Bound(p => p.Referencia).ClientTemplate("#= Referencia #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].Referencia' value='#= Referencia #' />");
                columns.Bound(p => p.Descricao).ClientTemplate("#= Descricao #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].Descricao' value='#= Descricao #' />");
                columns.Bound(p => p.UnidadeMedida).Width(55).ClientTemplate("#= UnidadeMedida #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].UnidadeMedida' value='#= UnidadeMedida #' />");
                columns.Bound(p => p.Quantidade).Width(80).ClientTemplate("#= Quantidade #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].Quantidade' value='#= Quantidade #' />");
                columns.Bound(p => p.ValorUnitario).EditorTemplateName("numeric5casasdecimais").Width(110).ClientTemplate("#= kendo.toString(ValorUnitario, \"n5\") #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].ValorUnitario' value='#= formateDecimalGrid(ValorUnitario) #' />");
                columns.Bound(p => p.ValorDesconto).EditorTemplateName("numeric2casasdecimais").Width(110).ClientTemplate("#= kendo.toString(ValorDesconto, \"n2\") #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].ValorDesconto' value='#= formateDecimalGrid(ValorDesconto) #' />");
                columns.Bound(p => p.ValorTotal).EditorTemplateName("numeric2casasdecimais").Width(110).ClientTemplate("#= kendo.toString(ValorTotal, \"n2\") #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].ValorTotal' value='#= formateDecimalGrid(ValorTotal) #' />");
                columns.Bound(p => p.Situacao).ClientTemplate("#= Situacao #" +
                    "<input type='hidden' name='GridItens[#= index(data)#].Situacao' value='#= Situacao #' />");
                columns.Command(command => command.Destroy() );
            })
            .ClientDetailTemplateId("templateDetalheGrid")
            .DataSource(s => s.Ajax()
                .Model(model =>
                {
                    model.Id(item => item.Id);
                    model.Field(product => product.Referencia).Editable(false);
                    model.Field(product => product.Descricao).Editable(false);
                    model.Field(product => product.UnidadeMedida).Editable(false);
                    model.Field(product => product.ValorTotal).Editable(true);
                })
            )
            .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new { @id = "pesquisarvarios-material", @href = "javascript:void(0)", @class = "btn-primary" }))
            .Editable(editable => editable.Mode(GridEditMode.InCell))
            .Resizable(resize => resize.Columns(true))
            .Events(events => events.DataBound("onDataBound").Edit("onEditGrid"))
            .Navigatable()
            )
    
        <script id="templateDetalheGrid" type="text/html">@*text/x-kendo-template*@
            <div class="row">
                <div class="span4">
                    <div class="control-group">
                        @Html.Label("Qtde. Entregue", new { @class = "control-label" })
                        <div class="controls">
                            @(Html.Kendo().TextBox()
                                  .Name("teste")
                                  .Enable(false)
                                  .Value("#=QuantidadeEntregue#")
                                  .ToClientTemplate()
                                  )
                        </div>
                    </div>
                </div>  
                <div class="span4">
                    <div class="control-group">
                        @Html.Label(" Qtde. Não Entregue", new { @class = "control-label" })
                        <div class="controls">
                            @(Html.Kendo().TextBox()
                                  .Name("teste2")
                                  .Enable(false)
                                  .Value("#=Diferenca#")
                                  .ToClientTemplate()
                                  )
                        </div>
                    </div>
                </div>    
                <div class="span4">
                    <div class="control-group">
                        @Html.Label("Previsão de Entrega", new { @class = "control-label" })
                        <div class="controls">                            
                            <input class="input-small" data-mask="99/99/9999" id="PrevisaoEntregaString" name="GridItens[#= index(data)#].PrevisaoEntregaString" type="text"  onkeyup="preventDefaultCustomizado" value='#= limpeValor(PrevisaoEntregaString) #'>
                        </div>
                    </div>            
                </div>
            </div>
        </script>
    </div>
</div>

<fieldset>
    <legend>Totais</legend>
</fieldset>

<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorMercadorias)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorMercadorias" name="txtValorMercadorias" type="text" value=" @Model.ValorMercadorias" class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorMercadorias" name="ValorMercadorias"  value=" @Model.ValorMercadorias" />
                @Html.ValidationMessageFor(x => x.ValorMercadorias, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorFrete)
            <div class="controls">
                @Html.EditorFor(x => x.ValorFrete)
                @Html.ValidationMessageFor(x => x.ValorFrete, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEncargos)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEncargos)
                @Html.ValidationMessageFor(x => x.ValorEncargos, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorEmbalagem)
            <div class="controls">
                @Html.EditorFor(x => x.ValorEmbalagem)
                @Html.ValidationMessageFor(x => x.ValorEmbalagem, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorDescontoTotal)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorDesconto" name="txtValorDesconto" type="text" value="@Model.ValorDescontoTotal" class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorDescontoTotal" name="ValorDescontoTotal"  value=" @Model.ValorDescontoTotal" />
                @Html.ValidationMessageFor(x => x.ValorDescontoTotal, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
    <div class="span6">
        <div class="control-group">
            @Html.LabelForRequired(x => x.ValorCompra)
            <div class="controls">
                <input style=" width:130px;" readonly="readonly" id="txtValorCompra" name="txtValorCompra" type="text" value=" @Model.ValorCompra"  class="k-input k-state-disabled"/>
                <input type="hidden" id="ValorCompra" name="ValorCompra"  value=" @Model.ValorCompra" />                
                @Html.ValidationMessageFor(x => x.ValorCompra, null, new { @class = "help-block" })
            </div>
        </div>
    </div>
</div>

<script>
    function formateDecimalGrid(valor) {
        if (valor == null) {
            return "";
        }
        return valor.toString().replace(".", ",");
    }

    function index(dataItem) {
        var data = $("#GridItens").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function limpeValor(valor) {
        if (valor == null)
            return "";
        else return valor;
    }

    function preventDefaultCustomizado(e) {
        e.preventDefault();
        return false;
    }

    $(document).ready(function() {
        
        $("#selecionar-material").on("pesquisar", function (ev, itens) {
            
            if (itens.DataItemsSelecionados.length == 0) {
                return;
            }
            
            var grid = $('#GridItens').data("kendoGrid");
            var model = grid.dataSource.options.schema.model;
            var dadosAtuais = grid.dataSource.data();
            var novosDados = itens.DataItemsSelecionados;
           

            for (var i = 0; i < novosDados.length; i++) {
                var dataItemNovo = novosDados[i];
            
                for (var j = 0; j < dadosAtuais.length; j++) {
                    var dataItemAtual = dadosAtuais[j];
                    if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                        dataItemNovo.Descartado = true;
                    }
                }
                if (!dataItemNovo.Descartado) {
                    var dataItemNovoFinal = {
                        Referencia : dataItemNovo.Referencia,
                        Descricao : dataItemNovo.Descricao,
                        UnidadeMedida : dataItemNovo.UnidadeMedida,
                        Id : 0,
                        ValorDesconto : 0,
                        Quantidade : 0,
                        ValorTotal: 0,
                        ValorUnitario: 0,
                        PedidoCompraId : $("#Id").val(),
                        MaterialId: dataItemNovo.Id,
                        Situacao : "NaoAtendido"
                    };

                    atualizeUltimoCusto(dataItemNovo.Referencia, $("#Fornecedor").val(), dataItemNovoFinal);
                    dadosAtuais.unshift(dataItemNovoFinal);
                }
            }

            

            //var dados = $.merge(novosDados, dadosAtuais);

            var dataSource = new kendo.data.DataSource({
                data: dadosAtuais,
                schema: {
                    model: model
                }
            });
            dataSource.read();
            grid.setDataSource(dataSource);
            grid.refresh();

        });

        $('#ValorMercadorias').attr('readonly', true);
        $('#ValorCompra').attr('readonly', true);
        $('#ValorDescontoTotal').attr('readonly', true);
        if ($('#DataAutorizacao').get(0) != null) {
            $('#DataAutorizacao').data("kendoDatePicker").enable(false);
        }

        $('#ValorEncargos').blur(function () {
            AtualizaValorCompra();
        });

        $('#ValorFrete').blur(function () {
            AtualizaValorCompra();
        });

        $('#ValorEmbalagem').blur(function () {
            AtualizaValorCompra();
        });

        $('#FlagValidacao').val(true);
    });

    function atualizeUltimoCusto(referencia, idFornecedor, dataItem) {
        var url = '/Almoxarifado/Material/ObtenhaCusto?referencia=' + referencia+"&idFornecedor="+ idFornecedor;
        $.getJSON(url, function (result) {
            dataItem.ValorUnitario = result.Custo == null ? 0 : result.Custo;
        }).fail(function (jqXhr, textStatus, errorThrown) {
            exibaAlertaErro(errorThrown);
        });
    }

    function atualizeValorTotal(target) {
        var item = ObtenhaDataItemGridItens(target);
        atualizeValorTotalItem(item);
    }

    function atualizeValorTotalItem(item) {
        var valorCalculado = (item.Quantidade * item.ValorUnitario) - item.ValorDesconto;
        item.set("ValorTotal", valorCalculado);
        atualizeTotais();
    }

    function ObtenhaDataItemGridItens(target) {
        var row = $(target).closest("tr");
        var grid = $('#GridItens').data("kendoGrid");
        return grid.dataItem(row);
    }

    function AtualizaValorCompra() {
        var valorMercadorias = $('#ValorMercadorias').val();
        var valorEncargos = FormatarValores($('#ValorEncargos').val());
        var valorFrete = FormatarValores($('#ValorFrete').val());
        var valorEmbalagem = FormatarValores($('#ValorEmbalagem').val());
        var valorDescontoTotal = FormatarValores($('#ValorDescontoTotal').val());
        var valorCompra = 0;

        valorCompra = parseFloat(FormatarValores(valorMercadorias)) + parseFloat(FormatarValores(valorEncargos)) + parseFloat(FormatarValores(valorFrete)) + parseFloat(FormatarValores(valorEmbalagem));
        valorCompra = valorCompra - parseFloat(FormatarValores(valorDescontoTotal));

        $('#ValorCompra').val(formateDecimal(valorCompra));
        $('#ValorCompra').change();

        $('#txtValorCompra').val(kendo.toString(valorCompra, "c5"));
        $('#txtValorCompra').change();
    }

    function FormatarValores(campo) {
        if (!campo) return 0;
        return campo.replace(",", ".");
    }

    function formateDecimal(valor) {
        if (!valor) return 0;
        return valor.toString().replace(".", ",");
    }

    function ehTelaNovo() {
        var pathArray = window.location.pathname.split('/');
        return $.inArray('Novo', pathArray) > -1;
    }

    function onEditGrid(e) {

        if($("#Referencia").get(0) != null){
            $("#Referencia").attr("readonly", true);
        }

        if ($("#Descricao").get(0) != null) {
            $("#Descricao").attr("readonly", true);
            $("#Descricao").width('86%');
        }

        if ($("#UnidadeMedida").get(0) != null) {
            $("#UnidadeMedida").attr("readonly", true);
            $("#UnidadeMedida").addClass("input-small");
        }

        if ($("#Quantidade").get(0) != null) {
            $("#Quantidade").data("kendoNumericTextBox").wrapper.width("100px");
            $("#Quantidade.k-input").change(function (e) {
                atualizeValorTotal(e.target);
            });
        }

        if ($("#ValorTotal").get(0) != null) {//verificar navegabilidade da tabela passando por essa célula
            $("#ValorTotal").data("kendoNumericTextBox").enable(false);
            $("#ValorTotal").data("kendoNumericTextBox").wrapper
                .find(".k-numeric-wrap")
                .addClass("expand-padding")
                .find(".k-select").hide();
        }

        if ($("#ValorUnitario").get(0) != null) {
            $("#ValorUnitario.k-input").change(function (e) {
                atualizeValorTotal(e.target);
            });
        }

        if ($("#ValorDesconto").get(0) != null) {
            $("#ValorDesconto.k-input").change(function (e) {
                atualizeValorTotal(e.target);
            });
        }

        if ($("#ValorUnitario").get(0) != null) {
            $("#ValorUnitario.k-input").change(function (e) {
                atualizeValorTotal(e.target);
            });
        }

        if ($("#ValorUnitario").get(0) != null) {
            $("#ValorUnitario.k-input").change(function (e) {
                atualizeValorTotal(e.target);
            });
        }
    }

    function desabilitaColunaDetalhes() {

        $("tr", "#GridItens").on("click", ".k-grid-edit", function (e) {
            $("tr", "#GridItens").on("click", ".k-grid-cancel", function (e) {
                setTimeout(function () {
                    if (ehTelaNovo()) {
                        $(".k-hierarchy-cell").remove();
                        $(".k-hierarchy-col").remove();
                    }
                }, 300);
            });
        });
        if (ehTelaNovo()) {
            $(".k-hierarchy-cell").remove();
            $(".k-hierarchy-col").remove();
        }
    }

    function atualizeTotais() {
        var gridData = $('#GridItens').data("kendoGrid").dataSource.data();

        var total = 0;
        var desconto = 0;

        for (var i = 0; i < gridData.length; i++) {
            total = total + (gridData[i].ValorUnitario * gridData[i].Quantidade);
            desconto = desconto + gridData[i].ValorDesconto;
        }

        $('#ValorMercadorias').val(formateDecimal(total));
        $('#ValorMercadorias').change();

        $('#txtValorMercadorias').val(kendo.toString(total, "c5"));
        $('#txtValorMercadorias').change();

        $('#ValorDescontoTotal').val(formateDecimal(desconto));
        $('#ValorDescontoTotal').change();

        $('#txtValorDesconto').val(kendo.toString(desconto, "c5"));
        $('#txtValorDesconto').change();

        AtualizaValorCompra();
    }

    function onDataBound(e) {

        //desabilitaColunaDetalhes();
        atualizeTotais();

    }

    $('#form').submit(function (e) {
        //e.preventDefault();
        limpeMensagensAlerta();

        if (!$("#form").valid()) {
            e.preventDefault();
            $('#btnSubmit').button('reset');
            return false;
        }

        if (!validaFormulario()) {
            e.preventDefault();
            $('#btnSubmit').button('reset');
            return false;
        }

        var dataGridItens = $("#GridItens").data("kendoGrid").dataSource.data();

        if (dataGridItens.length == 0) {
            e.preventDefault();
            exibaAlertaErro("Insira pelo menos um item na grid.");
            $('#btnSubmit').button('reset');
            return false;
        }

        var mensagem = "";
        for (var i = 0; i < dataGridItens.length; i++) {
            var dataItem = dataGridItens[i];
            if (dataItem.Quantidade == 0 || dataItem.Quantidade == null) {
                mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna quantidade.<br/>";
            }
            if (dataItem.ValorUnitario == 0 || dataItem.ValorUnitario == null) {
                mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna preço.<br/>";
            }
        }

        if (mensagem != "") {
            e.preventDefault();
            exibaAlertaErro(mensagem);
            $('#btnSubmit').button('reset');
            return false;
        }

        return true;
    });

    function validaFormulario() {

        if ($("#UnidadeEstocadora").prop("selectedIndex") <= 0) {
            $('#UnidadeEstocadora').addClass('input-validation-error');
            exibaAlertaErro('Selecione uma unidade estocadora.');
            $('#UnidadeEstocadora').focus();
            return false;
        }

        // Fornecedor 
        if ($("#Fornecedor").prop("selectedIndex") <= 0) {
            $('#Fornecedor').addClass('input-validation-error');
            exibaAlertaErro('Selecione um fornecedor.');
            $('#codigo-fornecedor').focus();
            return false;
        }

        return true;
    }

    function obtenhaDadosGridItens() {
        var grid = $("#GridItens").data("kendoGrid");
        if (grid) {
            return grid.dataSource.data();
        }
        return null;
    }

    $.fn.serializeObject = function () {
        var o = Object.create(null),
            elementMapper = function (element) {
                element.name = $.camelCase(element.name);
                return element;
            },
            appendToResult = function (i, element) {
                var node = o[element.name];

                if ('undefined' != typeof node && node !== null) {
                    o[element.name] = node.push ? node.push(element.value) : [node, element.value];
                } else {
                    o[element.name] = element.value;
                }
            };

        $.each($.map(this.serializeArray(), elementMapper), appendToResult);
        return o;
    };

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            exibaAlertaErro(message);
            $("#GridItens").data("kendoGrid").dataSource.read();
        }
    }

    function Delete(a) {
        var row = $(a).parents('tr:first');
        row.fadeTo('fast', 0, function () {
            row.remove();
        });
    }

    function onRequestEnd(e) {
        if ((e.type == "create" || e.type == "update") && !e.response.Errors) {
            var returnUrl = '@Html.GetUrl(MVC.Compras.PedidoCompra.Index())';
            window.location.href = returnUrl;
        }
    }

    function limpeLinhaGrid() {
        var gridItens = $('#GridItens').data("kendoGrid");
        var tr = $("#Referencia").closest("tr");
        var dataGridItens = gridItens.dataItem(tr);
        dataGridItens.set("Descricao", null);
        dataGridItens.set("Referencia", null);
        dataGridItens.set("UnidadeMedida", null);
        dataGridItens.set("ReferenciaExterna", null);
        dataGridItens.set("Quantidade", null);
        dataGridItens.set("PrevisaoEntregaString", null);
        dataGridItens.set("ValorTotal", null);
        setValorUnitario(null, dataGridItens);
        setValorDesconto(null, dataGridItens);
    }

    function setValorUnitario(valor, dataGridItens) {
        $('#FlagValidacao').val(false);
        dataGridItens.set("ValorUnitario", valor);
        $('#FlagValidacao').val(true);
    }

    function setValorDesconto(valor, dataGridItens) {
        $('#FlagValidacao').val(false);
        dataGridItens.set("ValorDesconto", valor);
        $('#FlagValidacao').val(true);
    }

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                quantidadevalidation: function (input, params) {
                    if (input.is("[name='Quantidade']")) {
                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                ValorUnitariovalidation: function (input, params) {
                    if (input.is("[name='ValorUnitario']")) {
                        if ($('#FlagValidacao').val() == "false") {
                            return true;
                        }

                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                valordescontovalidation: function (input, params) {
                    if (input.is("[name='ValorDesconto']")) {
                        if ($('#FlagValidacao').val() == "false") {
                            return true;
                        }
                        var dataItem = ObtenhaDataItemGridItens(input);

                        if (dataItem.ValorTotal == null) {
                            return true;
                        }

                        var valorDesconto = input.val() == '' ? '0' : input.val();
                        return parseFloat(FormatarValores(valorDesconto)) <= dataItem.ValorTotal;
                    }
                    return true;
                },
                referenciavalidation: function (input, params) {
                    if (input.is("[name='Referencia']")) {
                        return input.val() != '';
                    }
                    return true;
                }
            },
            messages: {
                quantidadevalidation: function (input) {
                    input.attr("data-quantidadevalidation-msg", "A Quantidade não pode ser 0.");
                    return input.attr("data-quantidadevalidation-msg");
                },
                ValorUnitariovalidation: function (input) {
                    input.attr("data-ValorUnitariovalidation-msg", "O Preço não pode ser 0.");
                    return input.attr("data-ValorUnitariovalidation-msg");
                },
                valordescontovalidation: function (input) {
                    input.attr("data-valordescontovalidation-msg", "O Desconto não pode ser maior que o valor total.");
                    return input.attr("data-valordescontovalidation-msg");
                },
                referenciavalidation: function (input) {
                    input.attr("data-referenciavalidation-msg", "O material deve ser selecionado");
                    return input.attr("data-referenciavalidation-msg");
                }
            }
        });
    })(jQuery, kendo);

</script>