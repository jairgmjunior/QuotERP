@using Fashion.ERP.Domain.Comum
@using Fashion.ERP.Web.Areas.Producao.Models
@model ProducaoProgramacaoMatrizCorteModel

<form class="form-horizontal" id="formMatrizCorte" method="post" novalidate="novalidate">
    <div id="modal-matrizcorte" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="javascript:void(0)" class="close" data-dismiss="modal" aria-hidden="true">&times;</a>
                    <h3>Matriz de Corte</h3>
                </div>
                <div id="modal-body-matrizcorte" class="modal-body" style="overflow-y: hidden;">
                    <div id="marcadormatrizcorte-alert-error"></div>
                    <div class="container-fluid">
                        <div class="row">
                            <div class="form-group form-group-sm">
                                @Html.LabelForRequired(x => x.TipoEnfestoTecido)
                                <div class="col-sm-8 col-md-8 col-lg-7">
                                    @Html.DropDownListFor(x => x.TipoEnfestoTecido, TipoEnfestoTecido.Pares.ToSelectListValues(), new { @class = "form-control"})
                                    @Html.ValidationMessageFor(x => x.TipoEnfestoTecido, null, new { @class = "help-block" })
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                @Html.LabelForRequired(x => x.TotalEnfesto)
                                <div class="col-sm-8 col-md-8 col-lg-7">
                                    @Html.TextBoxFor(m => m.TotalEnfesto, new  { @class = "form-control", @readonly = "readonly"})
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                @Html.LabelForRequired(x => x.QuantidadeItem)
                                <div class="col-sm-8 col-md-8 col-lg-7">
                                    @(Html.Kendo().NumericTextBoxFor(m => m.QuantidadeItem)
                                          .Format("n0")
                                          .Min(1).Spinners(false)
                                          .Name("QuantidadeItem"))
                                    @Html.ValidationMessageFor(x => x.QuantidadeItem, null, new { @class = "help-block" })
                                    <input type="hidden" id="QuantidadeItemOriginal"/>
                                </div>
                            </div>
                            <div class="form-group form-group-sm">
                                @Html.LabelForRequired(x => x.TotalNumeroVezes)
                                <div class="col-sm-8 col-md-8 col-lg-7">
                                    @Html.TextBoxFor(m => m.TotalNumeroVezes, new { @class = "form-control", @readonly = "readonly"})
                                </div>
                            </div>
                        </div>
                    </div>
                    @(Html.Kendo().Grid<ProducaoProgramacaoMatrizCorteItemModel>()
                          .Name("GridMatrizCorteItens")
                          .Columns(columns =>
                          {
                              columns.Bound(p => p.Tamanho).Hidden().ClientTemplate(
                                  "<input type='hidden' name='GridMatrizCorteItens[#= indexGridMatrizCorteItens(data)#].Tamanho' value='#= Tamanho #' />");
                              columns.Bound(p => p.DescricaoTamanho).Width(60).ClientTemplate("#= DescricaoTamanho #" +
                                "<input type='hidden' name='GridMatrizCorteItens[#= indexGridMatrizCorteItens(data)#].DescricaoTamanho' value='#= DescricaoTamanho #' />");
                              columns.Bound(p => p.QuantidadeVezes).Width(60).ClientTemplate("#= (QuantidadeVezes == null) ? ' ' : QuantidadeVezes #" +
                                "<input type='hidden' name='GridMatrizCorteItens[#= indexGridMatrizCorteItens(data)#].QuantidadeVezes' value='#= QuantidadeVezes #' />");
                              columns.Bound(p => p.Quantidade).Width(55).ClientTemplate("#= (Quantidade == null) ? ' ' : kendo.toString(Quantidade, \"n2\") #" +
                                "<input type='hidden' name='GridMatrizCorteItens[#= indexGridMatrizCorteItens(data)#].Quantidade' value='#= Quantidade #' />");
                          })
                          .DataSource(dataSource => dataSource
                              .Ajax()
                              .ServerOperation(true)
                              .Model(model =>
                              {
                                  model.Id(item => item.DescricaoTamanho);
                                  model.Field(product => product.DescricaoTamanho).Editable(false);
                                  model.Field(product => product.QuantidadeVezes).Editable(true);
                                  model.Field(product => product.Quantidade).Editable(true).DefaultValue(0);
                              })
                              .Events(events => events.Error("onKendoGridError").Change("onChangeGridMatrizCorteItens"))
                          )
                          .Editable(editable => editable.Mode(GridEditMode.InCell))
                          .Resizable(resize => resize.Columns(true))
                          .Events(events => events.Edit("onEditGridMatrizCorteItens")))
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" aria-hidden="true">Cancelar</button>
                    <button id="botaook" class="btn btn-primary" type="button">Ok</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    var dataItemAtual;

    $(function () {

        $("#QuantidadeItem").on("change", function () {
            recalculeTotalEnfestos();
            recalculeQuantidade();
        });

        $("#botaook").click(function () {

            if (!$('#QuantidadeItem').valid()) {
                return false;
            }
            
            var dataGridItens = obtenhaGridMatrizCorteItens().dataSource.data();
            
            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.QuantidadeVezes != 0 && dataItem.QuantidadeVezes != null) {
                    if (!isInt(dataItem.Quantidade)) {
                        exibaAlertaErroMatrizCorte("Não é permitido valores decimais na matriz de corte.");
                        return false;
                    }
                }
            }

            dataItemAtual.set("MatrizCorteJson", obtenhaJsonString());
            dataItemAtual.set("Quantidade", $("#QuantidadeItem").val());
            $('#modal-matrizcorte').modal('hide');

            obtenhaGridMatrizCorteItens().dataSource.data([]);

            atualizeQuantidadeTotalProgramacao();
        });
    });

    function onChangeGridMatrizCorteItens(e) {
        $("#GridMatrizCorteItens").data("kendoGrid").refresh();
    }

    var currentIndex;

    function onEditGridMatrizCorteItens(e) {

        if (e.container.index() == 1 || e.container.index() == 3) {
            this.closeCell();
        }

        currentIndex = $(".k-grid-edit-row").index();
        
        e.container.find("#QuantidadeVezes").blur(function () {
            recalculeTotalNumeroVezes();
            recalculeTotalEnfestos();
            recalculeQuantidade();
        });

        e.container.find("#QuantidadeVezes").on("keydown", function (ev) {
            if ((ev.keyCode ? ev.keyCode : ev.which) == 13 || (ev.keyCode ? ev.keyCode : ev.which) == kendo.keys.TAB) {
                $(ev.target).trigger("blur");
                proximaCell();
            }
        });
    }

    function proximaCell() {
        var grid = obtenhaGridMatrizCorteItens();
        //grid.closeCell();
        grid.editCell(grid.tbody.find(">tr:eq(" + (currentIndex + 1) + ")").find("td:eq(2)"));
    }

    function obtenhaListaProgramacaoMatrizCorteItens(referenciaFichaTecnica) {
        var url = "/Producao/Producao/ObtenhaListaProgramacaoProducaoMatrizCorteItemModel?referenciaFichaTecnica=" + referenciaFichaTecnica;
        $.getJSON(url, function (result) {
            obtenhaGridMatrizCorteItens().dataSource.data(result);
            recalculeTotalNumeroVezes();
            recalculeTotalEnfestos();
            recalculeQuantidade();
        }).fail(function (jqXhr, textStatus, errorThrown) {
            alert(errorThrown);
        });
    }

    $('#modal-matrizcorte').on('show.bs.modal', function () {
        var referenciaFichaTecnica = dataItemAtual.Referencia;
        var matrizCorte = dataItemAtual.MatrizCorteJson;

        if (!matrizCorte) {
            $("#QuantidadeItem").data("kendoNumericTextBox").value("");
            $("#TotalEnfesto").val(0);
            $("#TipoEnfestoTecido").val(0);
            $("#TotalNumeroVezes").val(0);
            obtenhaListaProgramacaoMatrizCorteItens(referenciaFichaTecnica);
        } else {
            var matrizCorteObject = JSON.parse(matrizCorte);
            $("#QuantidadeItem").data("kendoNumericTextBox").value(matrizCorteObject.QuantidadeItem);
            $("#TotalEnfesto").val(matrizCorteObject.TotalEnfesto);
            $("#TipoEnfestoTecido").val(matrizCorteObject.TipoEnfestoTecido);
            $("#TotalNumeroVezes").val(matrizCorteObject.TotalNumeroVezes);
            obtenhaGridMatrizCorteItens().dataSource.data(matrizCorteObject.GridMatrizCorteItens);

            recalculeTotalNumeroVezes();
            recalculeTotalEnfestos();
            recalculeQuantidade();
        }

        if ($("#SituacaoProducao").val() != "INICIADA") {
            $("#TipoEnfestoTecido").prop("disabled", true);
            $("#QuantidadeItem").prop("disabled", true);
        }
    });

    function chamarMatrizCorteModal(e) {
        dataItemAtual = obtenhaGridProducaoItens().dataItem($(e.currentTarget).closest("tr"));

        $('#modal-matrizcorte').modal();
    }

    function recalculeQuantidade() {
        var totalEnfesto = $("#TotalEnfesto").val();

        var dataItens = obtenhaGridMatrizCorteItens().dataSource.data();
        for (var i = 0; i < dataItens.length; i++) {
            var dataItem = dataItens[i];
            if (dataItem.QuantidadeVezes != null) {
                var novaQuantidade = totalEnfesto * dataItem.QuantidadeVezes;
                dataItem.set("Quantidade", parseFloat(novaQuantidade));
            } else {
                dataItem.set("Quantidade", "");
            }
        }
    }

    function recalculeTotalNumeroVezes() {
        var dataItens = obtenhaGridMatrizCorteItens().dataSource.data();
        var quantidadeTotal = 0;

        for (var i = 0; i < dataItens.length; i++) {
            var dataItem = dataItens[i];
            quantidadeTotal = quantidadeTotal + dataItem.QuantidadeVezes;
        }
        $("#TotalNumeroVezes").val(quantidadeTotal);
    }

    function recalculeTotalEnfestos() {
        var quantidade = $("#QuantidadeItem").val();
        var totalNumeroVezes = $("#TotalNumeroVezes").val();

        if (quantidade == null || quantidade == 0 || totalNumeroVezes == null || totalNumeroVezes == 0) {
            $("#TotalEnfesto").val(0);
            return;
        }

        $("#TotalEnfesto").val(quantidade / totalNumeroVezes);
    }

    function indexGridMatrizCorteItens(dataItem) {
        var data = obtenhaGridMatrizCorteItens().dataSource.data();
        return data.indexOf(dataItem);
    }

    function isInt(n) {
        return n % 1 === 0;
    }

    function obtenhaGridMatrizCorteItens() {
        return $("#GridMatrizCorteItens").data("kendoGrid");
    }

    function obtenhaJsonString() {
        
        var objectJson = $("#formMatrizCorte").serializeObject();
        objectJson.GridMatrizCorteItens = obtenhaGridMatrizCorteItens().dataSource.data();
        
        return JSON.stringify(objectJson);
    }

    function exibaAlertaErroMatrizCorte(mensagem) {
        $("#marcadormatrizcorte-alert-error").append("<div class='alert alert-error'>\
            <a class='close' data-dismiss='alert' href='javascript:void(0)'>&times;</a>" +
            mensagem + "</div>");
    }

</script>