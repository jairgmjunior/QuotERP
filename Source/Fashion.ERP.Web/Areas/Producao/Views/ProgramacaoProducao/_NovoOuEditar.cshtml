@using Fashion.ERP.Web.Areas.Producao.Models
@model ProgramacaoProducaoModel

@Html.HiddenFor(x => x.Id)

<fieldset>
    <legend><small>Dados da Programação de Produção</small></legend>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Lote)
                <div class='controls'>
                    <div class="input-append">
                        @Html.TextBoxFor(x => x.Lote, new { @class = "input-mini numeric-only" })
                        @Html.TextBoxFor(x => x.Ano, new { @class = "input-mini  numeric-only" })
                        @if (ViewContext.RouteData.GetRequiredString("action") != "Editar")
                        {
                            <button id="editarlote" class="btn" type="button"><i class="icon-edit"></i></button> 
                        }
                    </div>
                    @Html.HiddenFor(x => x.Lote)
                    @Html.HiddenFor(x => x.Ano)
                    @Html.ValidationMessageFor(x => x.Lote, null, new {@class = "help-block"})
                    @Html.ValidationMessageFor(x => x.Ano, null, new {@class = "help-block"})
                </div>
            </div>
        </div>
        @if (ViewContext.RouteData.GetRequiredString("action") == "Editar")
        {
            <div class="span4">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Data)
                    <div class='controls'>
                        @Html.EditorFor(x => x.Data)
                        @Html.HiddenFor(x => x.Data)
                        @Html.ValidationMessageFor(x => x.Data, string.Empty, new { @class = "help-block" })
                    </div>
                </div>
            </div>  
        }
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Colecao)
                <div class="controls">
                    @Html.DropDownListFor(x => x.Colecao, null, "-- Selecione --", new { @class = "input-large" })                    
                    @Html.ValidationMessageFor(x => x.Colecao, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span4">
            <div class="control-group">
                @Html.LabelForRequired(x => x.DataProgramada, new { @class = "control-label " })
                <div class="controls">
                    @(Html.Kendo().DatePickerFor(x => x.DataProgramada))                 
                    @Html.ValidationMessageFor(x => x.DataProgramada, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Responsavel)
                <div class="controls">
                    @Html.HiddenFor(x => x.Responsavel, new { id = "funcionario" })
                    <div class="input-append">
                        <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                        <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                        <span id="descricao-funcionario" class="add-on"></span>
                    </div>
                    @Html.ValidationMessageFor(x => x.Responsavel, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span4">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Quantidade, new {@class = "title-label"})
                <div class="controls">
                    @Html.TextBoxFor(x => x.Quantidade,  new { @class = "input-medium" })
                    @Html.HiddenFor(x => x.Quantidade)
                </div>
            </div>
        </div>
    </div>  
    <div class="row">
        <div class="span6">
            <div class="control-group">
                @Html.LabelForRequired(x => x.Observacao)
                <div class="controls">
                    @Html.EditorFor(x => x.Observacao)
                    @Html.ValidationMessageFor(x => x.Observacao, string.Empty, new { @class = "help-block" })
                </div>
            </div>
        </div>
        <div class="span4">
            <div class="control-group">
                @Html.LabelForRequired(x => x.SituacaoProgramacaoProducao)
                <div class="controls">
                    @Html.EditorFor(x => x.SituacaoProgramacaoProducao)
                </div>
            </div>
        </div>
    </div>
</fieldset>

<fieldset>
    <legend><small>Fichas Técnicas Programadas</small></legend>
        @(Html.Kendo().Grid(Model.GridProgramacaoProducaoItens)
            .Name("GridProgramacaoProducaoItens")
            .Editable(e => e.Mode(GridEditMode.InCell))
            .Navigatable()
            .Columns(columns =>
            {
                columns.Bound(x => x.Id).Hidden()
                    .ClientTemplate("<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Id' value='#= Id #' />");
                columns.Bound(x => x.MatrizCorteJson).Hidden()
                    .ClientTemplate("<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].MatrizCorteJson' value='#= MatrizCorteJson #' />");
                columns.Bound(x => x.TagAno)
                    .ClientTemplate("#= TagAno #<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].TagAno' value='#= TagAno #' />");
                columns.Bound(x => x.Referencia)
                    .ClientTemplate("#= Referencia #<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Referencia' value='#= Referencia #' />");
                columns.Bound(x => x.Descricao)
                    .ClientTemplate("#= Descricao #<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Descricao' value='#= Descricao #' />");
                columns.Bound(x => x.Estilista)
                    .ClientTemplate("#= Estilista #<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Estilista' value='#= Estilista #' />");
                columns.Bound(x => x.Quantidade).Width(120)
                    .ClientTemplate("#= Quantidade #<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Quantidade' value='#= Quantidade #' />");
                columns.Bound(p => p.Foto).ClientTemplate( "#if(Foto != null  && Foto != '') {#" + 
                    "<a href='" + "#= Foto #" + "' data-lightbox='foto' title='Foto'><img src='" + "#= Foto #" + "' class='img-rounded' style='width: 48px; height: 48px;'/></a>"+ 
                        "#}#" +
                    "<input type='hidden' name='GridProgramacaoProducaoItens[#= index(data)#].Foto' value='#= Foto #' />").Width(60);
                columns.Command(command => command.Custom("Matriz de Corte").Click("chamarMatrizCorteModal")).Width(125);                
                columns.Command(command => command.Destroy().Text("Excluir")).Width(100);
            }
            )
            .DataSource(dataSource => dataSource
                .Ajax()
                .Events(events => events.Error("onKendoGridError").Change("atualizeQuantidadeTotalProgramacaoProgramacao"))
                .Model(model =>
                {
                    model.Id(item => item.Id);
                    model.Field(item => item.Id).DefaultValue(0);
                    model.Field(item => item.Foto).Editable(false); 
                })
            )
            .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new {@id = "pesquisarvarios-fichatecnica", @href = "javascript:void(0)", @class = "btn-primary"}))
            .Events(events => events.Edit("onEdit"))
            )
</fieldset>

<script>
    $(document).ready(function() {

        $('#form').submit(function(e) {
            limpeMensagensAlerta();

            var formValido = formularioEhValido();

            if (!$("#form").valid() || !formValido) {
                e.preventDefault();
                $('#btnSubmit').button('reset');
                return false;
            }

            if (!$('#Quantidade').valid()) {
                e.preventDefault();
                $('#btnSubmit').button('reset');
                return false;
            }

            var dataGridItens = $("#GridProgramacaoProducaoItens").data("kendoGrid").dataSource.data();

            var mensagem = "";
            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Quantidade == 0 || dataItem.Quantidade == null) {
                    mensagem += "A ficha técnica de referência "+ dataItem.Referencia+" não possui valor para a coluna quantidade</br>";
                }
            }

            if (mensagem != "") {
                e.preventDefault();
                exibaAlertaErro(mensagem);
                $('#btnSubmit').button('reset');
                return false;
            }

            return true;
        });

        $("#selecionar-fichatecnica").on("pesquisar", function(ev, itens) {
            if (itens.DataItemsSelecionados.length == 0) {
                return;
            }

            var grid = obtenhaGridProgramacaoProducaoItens();
            var model = grid.dataSource.options.schema.model;
            var dadosAtuais = grid.dataSource.data();
            var novosDados = itens.DataItemsSelecionados;

            for (var i = 0; i < novosDados.length; i++) {
                var dataItemNovo = novosDados[i];

                for (var j = 0; j < dadosAtuais.length; j++) {
                    var dataItemAtual = dadosAtuais[j];
                    if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                        dataItemNovo.Descartado = true;
                    }
                }
                if (!dataItemNovo.Descartado) {
                    var dataItemNovoFinal = {
                        Referencia: dataItemNovo.Referencia,
                        Descricao: dataItemNovo.Descricao,
                        TagAno: dataItemNovo.Tag + '/' + dataItemNovo.Ano,
                        Id: 0,
                        Quantidade: 0,
                        Estilista: dataItemNovo.Estilista,
                        Foto: dataItemNovo.Foto,
                        MatrizCorteJson: ""
                    };

                    dadosAtuais.unshift(dataItemNovoFinal);
                }
            }

            var dataSource = new kendo.data.DataSource({
                data: dadosAtuais,
                schema: {
                    model: model
                }
            });
            dataSource.read();
            grid.setDataSource(dataSource);
            grid.refresh();
        });

        $("#editarlote").click(function()
        {
            if ($("#Lote").prop("disabled") == false) {
                $("#Lote").prop("disabled", true);
                $("#Ano").prop("disabled", true);
                $("#Lote").val("");
                $("#Ano").val("");
                
                $("#Lote").rules("remove", "required");
                $("#Ano").rules("remove", "required");

                $('#form').validate().resetForm();
                $(".control-group").removeClass("error");
                $(".input-validation-error").removeClass("input-validation-error");
                $("label[for='Lote']").removeClass("required-label");
            } else {
                $("#Lote").prop("disabled", false);
                $("#Lote").focus();
                $("#Ano").prop("disabled", false);
                $("#Ano").val(new Date().getFullYear());

                $("#Lote").rules("add", {
                    required: true,
                    messages: {
                        required: "Informe o lote ou desabilite o campo."
                    }
                });

                $("#Ano").rules("add", {
                    required: true,
                    messages: {
                        required: "Informe o ano ou desabilite o campo."
                    }
                });

                $("label[for='Lote']").addClass("required-label");
            }
        });

        $("#Lote").prop("disabled", true);
        $("#Ano").prop("disabled", true);
        $("label[for='Lote']").removeClass("required-label");
        
    });

    function atualizeQuantidadeTotalProgramacaoProgramacao() {
        var dataItensGridProgramacaoProducao = window.obtenhaGridProgramacaoProducaoItens().dataSource.data();

        var quantidade = 0;
        for (var i = 0; i < dataItensGridProgramacaoProducao.length; i++) {
            var dataItem = dataItensGridProgramacaoProducao[i];
            quantidade += dataItem.Quantidade;
        }

        $('[id=Quantidade]').val(quantidade);
    }

    function formularioEhValido() {
        var retorno = true;

        // Responsavel 
        if ($("#codigo-funcionario").val() == false) {
            $('#funcionario').val("");
            $('#funcionario').valid();
            $('#descricao-funcionario').text("");
            retorno = false;
        }

        $(".k-input.k-invalid").parent(".k-numeric-wrap").css("border", "1px solid red");
        return retorno;
    }

    $('#pesquisarvarios-fichatecnica').on('click', function (e) {
        $('#modal-fichatecnica').modal('show').one('hidden', function () {
            $('#ColunaPesquisa')[0].selectedIndex = 0;
            $('input[name$="ValorPesquisa"]').val('');
            $('#grid-pesquisa-fichatecnica').empty();
        });
        return false;
    });

    function index(dataItem) {
        var data = obtenhaGridProgramacaoProducaoItens().dataSource.data();
        return data.indexOf(dataItem);
    }

    function onEdit(e) {
        this.closeCell();
    }

    function obtenhaGridProgramacaoProducaoItens() {
        return $("#GridProgramacaoProducaoItens").data("kendoGrid");
    }
</script>
