@using Fashion.ERP.Web.Areas.Producao.Models
@model FichaTecnicaMaterialModel

@using (Html.BeginForm(MVC.Producao.FichaTecnica.Material(), FormMethod.Post, new {id = "formMaterial", @class = "form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)
    <input type="hidden" id="DepartamentoProducaosDicionario_Material" data-value = "@ViewBag.DepartamentoProducaosDicionarioJson_Material" />
    <input type="hidden" id="VariacaosDicionario_Material" data-value = "@ViewBag.VariacaosDicionarioJson_Material" />
    <input type="hidden" id="TamanhosDicionario_Material" data-value = "@ViewBag.TamanhosDicionarioJson_Material" />

    <ul class="nav nav-tabs">
        <li>@Html.ActionLinkAuth("Básicos", MVC.Producao.FichaTecnica.Basicos(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Processos", MVC.Producao.FichaTecnica.Processos(Model.Id.GetValueOrDefault()))</li>
        <li class="active">@Html.ActionLinkAuth("Materiais", MVC.Producao.FichaTecnica.Material(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Modelagem", MVC.Producao.FichaTecnica.Modelagem(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Fotos", MVC.Producao.FichaTecnica.Fotos(Model.Id.GetValueOrDefault()))</li>
    </ul>
    <br/>

    <a id="atualizarCustoUnitarios" href="javascript:void(0)" class="pull-right">Atualizar custos unitários</a>
    <br/>

    <div class="container-fluid">
        <fieldset>
            <legend><small>Materiais de Consumo Geral</small></legend>
            <div class="table-responsive">
                @(Html.Kendo().Grid(Model.GridMaterialConsumoMatriz)
                      .Name("GridMaterialConsumoMatriz")
                      .Editable(e => e.Mode(GridEditMode.InCell).DisplayDeleteConfirmation("Tem certeza que deseja excluir esse item?"))
                      .Navigatable()
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Id).Hidden()
                              .ClientTemplate("<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Id' value='#= Id #' />");
                          columns.Bound(x => x.Referencia)
                              .ClientTemplate("#= Referencia #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Referencia' value='#= Referencia #' />");
                          columns.Bound(x => x.Descricao)
                              .ClientTemplate("#= Descricao #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Descricao' value='#= Descricao #' />");
                          columns.Bound(x => x.UnidadeMedida)
                              .ClientTemplate("#= UnidadeMedida #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].UnidadeMedida' value='#= UnidadeMedida #' />");
                          columns.Bound(x => x.Quantidade).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(Quantidade, \"n5\") #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Quantidade' value='#= formateDecimalGrid(Quantidade) #' />").Width(130);
                          columns.Bound(x => x.Custo).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(Custo, \"n5\") #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Custo' value='#= formateDecimalGrid(Custo) #' />").Width(130);
                          columns.Bound(x => x.CustoTotal).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(CustoTotal, \"n5\") #");
                          columns.Bound(x => x.DepartamentoProducao).EditorTemplateName("DepartamentoProducaoList")
                              .ClientTemplate("#= displayDepartamentoProducao_Material(DepartamentoProducao) #<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].DepartamentoProducao' value='#= DepartamentoProducao #' />");
                          columns.Bound(p => p.Foto).ClientTemplate( "#if(Foto != null  && Foto != '') {#" + 
                                                                     "<a href='" + "#= Foto #" + "' data-lightbox='foto' title='Material'><img src='" + "#= Foto #" + "' class='img-rounded' style='width: 48px; height: 48px;'/></a>"+ 
                                                                     "#}#" +
                                                                     "<input type='hidden' name='GridMaterialConsumoMatriz[#= indexGridMaterialConsumoMatriz(data)#].Foto' value='#= Foto #' />").Width(60);
                          columns.Command(command => command.Destroy().Text("Excluir")).Width(105);
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Events(events => events.Error("error_handler"))
                          .Model(model =>
                          {
                              model.Id(item => item.Id);
                              model.Field(item => item.Id).DefaultValue(0);
                              model.Field(product => product.Foto).Editable(false); 
                          })
                      )
                      .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new {@id = "pesquisarvarios-material",@name = "pesquisarvarios-material-gridmaterialconsumomatriz", @href = "javascript:void(0)", @class = "btn-primary"}))
                      .Events(events => events.Edit("onEditGridMaterialConsumoMatriz")))
            </div>
        </fieldset>
        <hr />
        <fieldset>
            <legend><small>Materiais de Consumo Por Variação</small></legend>
            <div class="table-responsive">
                @(Html.Kendo().Grid(Model.GridMaterialConsumoItem)
                      .Name("GridMaterialConsumoItem")
                      .Editable(e => e.Mode(GridEditMode.InCell).DisplayDeleteConfirmation("Tem certeza que deseja excluir esse item?"))
                      .Navigatable()
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Id).Hidden()
                              .ClientTemplate("<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Id' value='#= Id #' />");
                          columns.Bound(x => x.Variacao).EditorTemplateName("VariacaoFichaTecnicaList")
                              .ClientTemplate("#= displayVariacao_Material(Variacao) #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Variacao' value='#= Variacao #' />");
                          columns.Bound(x => x.Tamanho).EditorTemplateName("TamanhoGradeList")
                              .ClientTemplate("#= displayTamanho_Material(Tamanho) #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Tamanho' value='#= Tamanho #' />");
                          columns.Bound(x => x.Referencia)
                              .ClientTemplate("#= Referencia #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Referencia' value='#= Referencia #' />");
                          columns.Bound(x => x.Descricao)
                              .ClientTemplate("#= Descricao #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Descricao' value='#= Descricao #' />");
                          columns.Bound(x => x.UnidadeMedida)
                              .ClientTemplate("#= UnidadeMedida #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].UnidadeMedida' value='#= UnidadeMedida #' />");
                          columns.Bound(x => x.Quantidade).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(Quantidade, \"n5\") #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Quantidade' value='#= formateDecimalGrid(Quantidade) #' />").Width(130);
                          columns.Bound(x => x.Custo).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(Custo, \"n5\") #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Custo' value='#= formateDecimalGrid(Custo) #' />").Width(130);
                          columns.Bound(x => x.CustoTotal).EditorTemplateName("numeric2casasdecimais")
                              .ClientTemplate("#= kendo.toString(CustoTotal, \"n5\") #");
                          columns.Bound(x => x.CompoeCusto)
                              .ClientTemplate("#= CompoeCusto == false ? 'Não' : 'Sim' #<input id='CompoeCusto' type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].CompoeCusto' value='#= CompoeCusto #' />");                            
                          columns.Bound(x => x.DepartamentoProducao).EditorTemplateName("DepartamentoProducaoList")
                              .ClientTemplate("#= displayDepartamentoProducao_Material(DepartamentoProducao) #<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].DepartamentoProducao' value='#= DepartamentoProducao #' />");
                          columns.Bound(p => p.Foto).ClientTemplate( "#if(Foto != null  && Foto != '') {#" + 
                                                                     "<a href='" + "#= Foto #" + "' data-lightbox='foto' title='Material'><img src='" + "#= Foto #" + "' class='img-rounded' style='width: 48px; height: 48px;'/></a>"+ 
                                                                     "#}#" +
                                                                     "<input type='hidden' name='GridMaterialConsumoItem[#= indexGridMaterialConsumoItem(data)#].Foto' value='#= Foto #' />").Width(60);
                          columns.Command(command => command.Destroy().Text("Excluir")).Width(105);
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Events(events => events.Error("error_handler"))
                          .Model(model =>
                          {
                              model.Id(item => item.Id);
                              model.Field(item => item.Id).DefaultValue(0);
                              model.Field(product => product.Foto).Editable(false); 
                          })
                      )
                      .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new {@id = "pesquisarvarios-material",@name = "pesquisarvarios-material-gridmaterialconsumoitem", @href = "javascript:void(0)", @class = "btn-primary"}))
                      .Events(events => events.Edit("onEditGridMaterialConsumoItem"))
                      )
            </div>
        </fieldset>
        <hr />
        <fieldset>
            <legend><small>Materiais de Composição de Custo</small></legend>
            <div class="table-responsive">
                @(Html.Kendo().Grid(Model.GridMaterialComposicaoCustoMatriz)
                      .Name("GridMaterialComposicaoCustoMatriz")
                      .Editable(e => e.Mode(GridEditMode.InCell).DisplayDeleteConfirmation("Tem certeza que deseja excluir esse item?"))
                      .Navigatable()
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Id).Hidden()
                              .ClientTemplate("<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].Id' value='#= Id #' />");
                          columns.Bound(x => x.Referencia)
                              .ClientTemplate("#= Referencia #<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].Referencia' value='#= Referencia #' />");
                          columns.Bound(x => x.Descricao)
                              .ClientTemplate("#= Descricao #<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].Descricao' value='#= Descricao #' />");
                          columns.Bound(x => x.UnidadeMedida)
                              .ClientTemplate("#= UnidadeMedida #<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].UnidadeMedida' value='#= UnidadeMedida #' />");
                          columns.Bound(x => x.Custo).EditorTemplateName("numeric5casasdecimais")
                              .ClientTemplate("#= kendo.toString(Custo, \"n5\") #<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].Custo' value='#= formateDecimalGrid(Custo) #' />").Width(130);
                          columns.Bound(p => p.Foto).ClientTemplate( "#if(Foto != null  && Foto != '') {#" + 
                                                                     "<a href='" + "#= Foto #" + "' data-lightbox='foto' title='Material'><img src='" + "#= Foto #" + "' class='img-rounded' style='width: 48px; height: 48px;'/></a>"+ 
                                                                     "#}#" +
                                                                     "<input type='hidden' name='GridMaterialComposicaoCustoMatriz[#= indexGridMaterialComposicaoCustoMatriz(data)#].Foto' value='#= Foto #' />").Width(60);
                          columns.Command(command => command.Destroy().Text("Excluir") ).Width(105);
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Events(events => events.Error("error_handler"))
                          .Model(model =>
                          {
                              model.Id(item => item.Id);
                              model.Field(item => item.Id).DefaultValue(0);
                              model.Field(product => product.Foto).Editable(false); 
                          })
                      )
                      .ToolBar(toolbar => toolbar.Custom().Text("Incluir").HtmlAttributes(new {@id = "pesquisarvarios-material",@name = "pesquisarvarios-material-gridmaterialcomposicaocustoMatriz", @href = "javascript:void(0)", @class = "btn-primary"}))
                      .Events(events => events.Edit("onEditGridMaterialComposicaoCustoMatriz")))
            </div>
        </fieldset>
    </div>

    <hr />

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
                    @Html.SubmitButtonAuth(MVC.Producao.FichaTecnica.Material(), "btnSubmitMaterial")        
                </div>
            </div>
        </div>     
    </div>
}

@{
    Html.RenderAction("PesquisarVarios", "Material", new { area = "Almoxarifado" });
}
<script>

    $(document).ready(function() {
        reparseForm();

        $("[name='pesquisarvarios-material-gridmaterialconsumomatriz']").on("click", function () {
            configureParametroPesquisarVariosMateriaisPorTipoItem("2");
            configureIdRequisicao("gridmaterialconsumomatriz");
        });

        $("[name='pesquisarvarios-material-gridmaterialconsumoitem']").on("click", function () {
            configureParametroPesquisarVariosMateriaisPorTipoItem("2");
            configureIdRequisicao("gridmaterialconsumoitem");
        });

        $("[name='pesquisarvarios-material-gridmaterialcomposicaocustoMatriz']").on("click", function () {
            configureIdRequisicao("gridmaterialcomposicaocustoMatriz");
        });

        $("#selecionar-material").on("pesquisar", function (ev, itens) {

            if ($("#IdRequisicao").val() == "gridmaterialconsumomatriz") {
                carregueGridMaterialConsumoMatriz(itens);
            } else if ($("#IdRequisicao").val() == "gridmaterialconsumoitem") {
                carregueGridMaterialConsumoItem(itens);
            } else if ($("#IdRequisicao").val() == "gridmaterialcomposicaocustoMatriz") {
                carregueGridMaterialComposicaoCustoMatriz(itens);
            }
        });

        $('#formMaterial').submit(function (e) {
            //e.preventDefault();
            limpeMensagensAlerta();

            var dataGridItens = $("#GridMaterialConsumoMatriz").data("kendoGrid").dataSource.data();

            var mensagem = "";
            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Quantidade == 0 || dataItem.Quantidade == null) {
                    mensagem += "Na grid de materiais de consumo geral o item de referência: " + dataItem.Referencia + " não tem valor na coluna quantidade.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Custo == 0 || dataItem.Custo == null) {
                    mensagem += "Na grid de materiais de consumo geral o item de referência: " + dataItem.Referencia + " não tem valor na coluna custo unitário.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.DepartamentoProducao == '' || dataItem.DepartamentoProducao == null) {
                    mensagem += "Na grid de materiais de consumo geral o item de referência: " + dataItem.Referencia + " não tem valor na coluna departamento.<br/>";
                }
            }

            dataGridItens = $("#GridMaterialConsumoItem").data("kendoGrid").dataSource.data();

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Quantidade == 0 || dataItem.Quantidade == null) {
                    mensagem += "Na grid de materiais de consumo por variação o item de referência: " + dataItem.Referencia + " não tem valor na coluna quantidade.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Custo == 0 || dataItem.Custo == null) {
                    mensagem += "Na grid de materiais de consumo por variação o item de referência: " + dataItem.Referencia + " não tem valor na coluna custo unitário.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Tamanho == '' || dataItem.Tamanho == null) {
                    mensagem += "Na grid de materiais de consumo por variação o item de referência: " + dataItem.Referencia + " não tem valor na coluna tamanho.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Variacao == '' || dataItem.Variacao == null) {
                    mensagem += "Na grid de materiais de consumo por variação o item de referência: " + dataItem.Referencia + " não tem valor na coluna variação.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.DepartamentoProducao == '' || dataItem.DepartamentoProducao == null) {
                    mensagem += "Na grid de materiais de consumo por variação o item de referência: " + dataItem.Referencia + " não tem valor na coluna departamento.<br/>";
                }
            }

            dataGridItens = $("#GridMaterialComposicaoCustoMatriz").data("kendoGrid").dataSource.data();

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Custo == 0 || dataItem.Custo == null) {
                    mensagem += "Na grid de materiais de composição de custo o item de referência: " + dataItem.Referencia + " não tem valor na coluna custo.<br/>";
                }
            }

            if (mensagem != "") {
                e.preventDefault();
                exibaAlertaErro(mensagem);
                $('#btnSubmit').button('reset');
                return false;
            }

            return true;
        });

        $("#atualizarCustoUnitarios").click(function () {
            var url = '/Producao/FichaTecnica/ObtenhaGridMaterialConsumoMatriz?fichaTecnicaId=' + $("#Id").val();
            $.getJSON(url, atualizeGridMaterialConsumoMatriz);

            var url = '/Producao/FichaTecnica/ObtenhaGridMaterialConsumoVariacao?fichaTecnicaId=' + $("#Id").val();
            $.getJSON(url, atualizeGridMaterialConsumoVariacao);
        });
    });

    function displayVariacao_Material(id) {
        var variacaosDicionario = $("#VariacaosDicionario_Material").data("value");
        var nome = "";
        $.each(variacaosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function displayTamanho_Material(id) {
        var tamanhosDicionario = $("#TamanhosDicionario_Material").data("value");
        var nome = "";
        $.each(tamanhosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function displayDepartamentoProducao_Material(id) {
        var departamentoProducaosDicionario = $("#DepartamentoProducaosDicionario_Material").data("value");
        var nome = "";
        $.each(departamentoProducaosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function indexGridMaterialConsumoMatriz(dataItem) {
        var data = $("#GridMaterialConsumoMatriz").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onContentLoadMaterial(e) {

        var tabStrip = $("#tabstrip").data("kendoTabStrip");
        var tab = $('li[aria-controls="tabstrip-3"]');

        if ($("#Id").val() != '') {
            tabStrip.enable(tab, true);
        } else {
            tabStrip.enable(tab, false);
        }

        
    }

    function atualizeGridMaterialConsumoMatriz(dados) {
        if (dados.Error) {
            console.log(dados.Error);
            return;
        }

        $('#GridMaterialConsumoMatriz').data("kendoGrid").dataSource.data(dados);
    }

    function atualizeGridMaterialConsumoVariacao(dados) {
        if (dados.Error) {
            console.log(dados.Error);
            return;
        }

        $('#GridMaterialConsumoItem').data("kendoGrid").dataSource.data(dados);
    }

    function carregueGridMaterialConsumoMatriz(itens) {
        if (itens.DataItemsSelecionados.length == 0) {
            return;
        }

        var grid = $('#GridMaterialConsumoMatriz').data("kendoGrid");
        var model = grid.dataSource.options.schema.model;
        var dadosAtuais = grid.dataSource.data();
        var novosDados = itens.DataItemsSelecionados;


        for (var i = 0; i < novosDados.length; i++) {
            var dataItemNovo = novosDados[i];

            for (var j = 0; j < dadosAtuais.length; j++) {
                var dataItemAtual = dadosAtuais[j];
                if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                    dataItemNovo.Descartado = true;
                }
            }
            if (!dataItemNovo.Descartado) {
                var dataItemNovoFinal = {
                    Referencia: dataItemNovo.Referencia,
                    Descricao: dataItemNovo.Descricao,
                    UnidadeMedida: dataItemNovo.UnidadeMedida,
                    Id: 0,
                    Quantidade: 0,
                    Custo: 0,
                    CustoTotal: 0,
                    DepartamentoProducao: '',
                    Foto: dataItemNovo.Foto
                };

                dadosAtuais.unshift(dataItemNovoFinal);
            }
        }

        var dataSource = new kendo.data.DataSource({
            data: dadosAtuais,
            schema: {
                model: model
            }
        });
        dataSource.read();
        grid.setDataSource(dataSource);
        grid.refresh();
    }

    function carregueGridMaterialConsumoItem(itens) {
        if (itens.DataItemsSelecionados.length == 0) {
            return;
        }

        var grid = $('#GridMaterialConsumoItem').data("kendoGrid");
        var model = grid.dataSource.options.schema.model;
        var dadosAtuais = grid.dataSource.data();
        var novosDados = itens.DataItemsSelecionados;


        for (var i = 0; i < novosDados.length; i++) {
            var dataItemNovo = novosDados[i];

            for (var j = 0; j < dadosAtuais.length; j++) {
                var dataItemAtual = dadosAtuais[j];
                if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                    dataItemNovo.Descartado = true;
                }
            }
            if (!dataItemNovo.Descartado) {
                var dataItemNovoFinal = {
                    Referencia: dataItemNovo.Referencia,
                    Descricao: dataItemNovo.Descricao,
                    UnidadeMedida: dataItemNovo.UnidadeMedida,
                    Id: 0,
                    Quantidade: 0,
                    Custo: 0,
                    CustoTotal: 0,
                    DepartamentoProducao: '',
                    Tamanho: '',
                    Variacao: '',
                    CompoeCusto: '',
                    Foto: dataItemNovo.Foto
                };

                dadosAtuais.unshift(dataItemNovoFinal);
            }
        }

        var dataSource = new kendo.data.DataSource({
            data: dadosAtuais,
            schema: {
                model: model
            }
        });
        dataSource.read();
        grid.setDataSource(dataSource);
        grid.refresh();
    }

    function carregueGridMaterialComposicaoCustoMatriz(itens) {
        if (itens.DataItemsSelecionados.length == 0) {
            return;
        }

        var grid = $('#GridMaterialComposicaoCustoMatriz').data("kendoGrid");
        var model = grid.dataSource.options.schema.model;
        var dadosAtuais = grid.dataSource.data();
        var novosDados = itens.DataItemsSelecionados;


        for (var i = 0; i < novosDados.length; i++) {
            var dataItemNovo = novosDados[i];

            for (var j = 0; j < dadosAtuais.length; j++) {
                var dataItemAtual = dadosAtuais[j];
                if (dataItemNovo.Referencia == dataItemAtual.Referencia) {
                    dataItemNovo.Descartado = true;
                }
            }
            if (!dataItemNovo.Descartado) {
                var dataItemNovoFinal = {
                    Referencia: dataItemNovo.Referencia,
                    Descricao: dataItemNovo.Descricao,
                    UnidadeMedida: dataItemNovo.UnidadeMedida,
                    Id: 0,
                    Quantidade: 0,
                    Custo: 0,
                    CustoTotal: 0,
                    DepartamentoProducao: '',
                    Tamanho: '',
                    Variacao: '',
                    CompoeCusto: '',
                    Foto: dataItemNovo.Foto
                };

                dadosAtuais.unshift(dataItemNovoFinal);
            }
        }

        var dataSource = new kendo.data.DataSource({
            data: dadosAtuais,
            schema: {
                model: model
            }
        });
        dataSource.read();
        grid.setDataSource(dataSource);
        grid.refresh();
    }

    function reparseForm() {
        var form = $("#formMaterial")
            .removeData("validator")
            .removeData("unobtrusiveValidation");

        $.validator.unobtrusive.parse(form);
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function onEditGridMaterialConsumoMatriz(e) {

        if (e.container.index() == 1 || e.container.index() == 2 || e.container.index() == 3 || e.container.index() == 6) {
            this.closeCell();
        }

        registreScriptsGridMaterialConsumoMatriz();
    }

    function registreScriptsGridMaterialConsumoMatriz() {
        $("#formMaterial #Quantidade").blur(function (e) {
            atualizeCustoTotalGridMaterialConsumoMatriz(e.target);
        });

        $("#formMaterial #Custo").blur(function (e) {
            atualizeCustoTotalGridMaterialConsumoMatriz(e.target);
        });
    }

    function atualizeCustoTotalGridMaterialConsumoMatriz(target) {
        var item = obtenhaDataItemGridMaterialConsumoMatriz(target);
        var custoTotal = item.Quantidade * item.Custo;
        item.set("CustoTotal", custoTotal);
    }

    function obtenhaDataItemGridMaterialConsumoMatriz(target) {
        var row = $(target).closest("tr");
        var grid = $('#formMaterial #GridMaterialConsumoMatriz').data("kendoGrid");
        return grid.dataItem(row);
    }

    function indexGridMaterialConsumoItem(dataItem) {
        var data = $("#GridMaterialConsumoItem").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function onEditGridMaterialConsumoItem(e) {

        if (e.container.index() == 3 || e.container.index() == 4 || e.container.index() == 5 || e.container.index() == 8) {
            this.closeCell();
        }

        registreScriptsGridMaterialConsumoItem();
    }

    function registreScriptsGridMaterialConsumoItem() {
        $("#formMaterial #Quantidade.k-input").blur(function (e) {
            atualizeCustoTotalGridMaterialConsumoMatriz(e.target);
        });

        $("#formMaterial #Custo.k-input").blur(function (e) {
            atualizeCustoTotalGridMaterialConsumoItem(e.target);
        });
    }

    function atualizeCustoTotalGridMaterialConsumoItem(target) {
        var item = obtenhaDataItemGridMaterialConsumoItem(target);
        var custoTotal = item.Quantidade * item.Custo;
        item.set("CustoTotal", custoTotal);
    }

    function obtenhaDataItemGridMaterialConsumoItem(target) {
        var row = $(target).closest("tr");
        var grid = $('#formMaterial #GridMaterialConsumoItem').data("kendoGrid");
        return grid.dataItem(row);
    }

    function onEditGridMaterialComposicaoCustoMatriz(e) {

        if (e.container.index() == 1 || e.container.index() == 2 || e.container.index() == 3) {
            this.closeCell();
        }
    }

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                quantidadevalidation: function (input, params) {
                    if (input.is("[name='Quantidade']") && input.val()) {
                        return input.val() != 0 && input.val() != '';
                    }
                    return true;
                },
                custovalidation: function (input, params) {
                    if (input.is("[name='Custo']")) {
                        return input.val() != 0 && input.val() != '';
                    }
                    return true;
                }
            },
            messages: {
                quantidadevalidation: function (input) {
                    input.attr("data-quantidadevalidation-msg", "A Qtd. não pode ser 0.");
                    return input.attr("data-quantidadevalidation-msg");
                },
                custovalidation: function (input) {
                    input.attr("data-custovalidation-msg", "O custo não pode ser 0.");
                    return input.attr("data-custovalidation-msg");
                }
            }
        });
    })(jQuery, kendo);

    function indexGridMaterialComposicaoCustoMatriz(dataItem) {
        var data = $("#GridMaterialComposicaoCustoMatriz").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function formateDecimalGrid(valor) {
        if (valor == null) {
            return null;
        }
        return valor.toString().replace(".", ",");
    }

</script>