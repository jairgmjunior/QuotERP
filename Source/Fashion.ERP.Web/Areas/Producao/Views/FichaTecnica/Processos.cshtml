@using Fashion.ERP.Web.Areas.Producao.Models
@model FichaTecnicaProcessosModel

@using (Html.BeginForm(MVC.Producao.FichaTecnica.Processos(), FormMethod.Post, new {id = "formProcessos", @class = "form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)

    <ul class="nav nav-tabs">
        <li>@Html.ActionLinkAuth("Básicos", MVC.Producao.FichaTecnica.Basicos(Model.Id.GetValueOrDefault()))</li>
        <li class="active">@Html.ActionLinkAuth("Processos", MVC.Producao.FichaTecnica.Processos(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Materiais", MVC.Producao.FichaTecnica.Material(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Modelagem", MVC.Producao.FichaTecnica.Modelagem(Model.Id.GetValueOrDefault()))</li>
        <li>@Html.ActionLinkAuth("Fotos", MVC.Producao.FichaTecnica.Fotos(Model.Id.GetValueOrDefault()))</li>
    </ul>
    <br/>

    <fieldset>
        <input type="hidden" id="DepartamentoProducaosDicionario" data-value = "@ViewBag.DepartamentoProducaosDicionarioJson" />
        <input type="hidden" id="SetorProducaosDicionario" data-value = "@ViewBag.SetorProducaosDicionarioJson" />
        <input type="hidden" id="OperacaoProducaosDicionario" data-value = "@ViewBag.OperacaoProducaosDicionarioJson" />

        <div class="container-fluid">
            <legend><small>Processos Operacionais</small></legend>
            <div class="form-group form-group-sm">
                @(Html.Kendo().Grid(Model.GridFichaTecnicaProcessos)
                      .Name("GridFichaTecnicaProcessos")
                      .Editable(e => e.Mode(GridEditMode.InCell).DisplayDeleteConfirmation("Tem certeza que deseja excluir esse item?"))
                      .Navigatable()
                      .Columns(columns =>
                      {
                          columns.Bound(x => x.Id).Hidden()
                              .ClientTemplate("<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].Id' value='#= Id #' />");
                          columns.Bound(x => x.DepartamentoProducao).EditorTemplateName("DepartamentoProducaoList")
                              .ClientTemplate("#= displayDepartamentoProducao(DepartamentoProducao) #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].DepartamentoProducao' value='#= DepartamentoProducao #' />");
                          columns.Bound(x => x.SetorProducao).EditorTemplateName("SetorProducaoList2")
                              .ClientTemplate("#= displaySetorProducao(SetorProducao) #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].SetorProducao' value='#= SetorProducao #' />");
                          columns.Bound(x => x.OperacaoProducao).EditorTemplateName("OperacaoProducaoList2")
                              .ClientTemplate("#= displayOperacaoProducao(OperacaoProducao) #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].OperacaoProducao' value='#= OperacaoProducao #' />");
                          columns.Bound(x => x.Custo).EditorTemplateName("numeric3casasdecimais")
                              .ClientTemplate("#= kendo.toString(Custo, \"n3\") #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].Custo' value='#= formateDecimalGrid(Custo) #' />");
                          columns.Bound(x => x.Tempo).EditorTemplateName("numeric3casasdecimais")
                              .ClientTemplate("#= kendo.toString(Tempo, \"n3\") #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].Tempo' value='#= formateDecimalGrid(Tempo) #' />");
                          columns.Bound(x => x.PesoProdutividade).EditorTemplateName("numeric3casasdecimais")
                              .ClientTemplate("#= kendo.toString(PesoProdutividade, \"n3\") #<input type='hidden' name='GridFichaTecnicaProcessos[#= indexGridFichaTecnicaProcessos(data)#].PesoProdutividade' value='#= formateDecimalGrid(PesoProdutividade) #' />");
                          columns.Command(command => command.Destroy().Text("Excluir"));
                      })
                      .DataSource(dataSource => dataSource
                          .Ajax()
                          .Model(model =>
                          {
                              model.Id(item => item.Id);
                              model.Field(product => product.DepartamentoProducao).DefaultValue("0");
                              model.Field(product => product.SetorProducao).DefaultValue("0");
                              model.Field(product => product.OperacaoProducao).DefaultValue("0");
                              model.Field(product => product.Custo).DefaultValue(null);
                              model.Field(product => product.Tempo).DefaultValue(null);
                              model.Field(product => product.PesoProdutividade).DefaultValue(null);
                              model.Field(product => product.Id).DefaultValue(0);
                          })
                      )
                      .ToolBar(toolbar => toolbar.Create().Text("Incluir"))
                      .Events(events => events.Edit("onEditGrid")))
            </div>
        </div>
    </fieldset>

    <hr />

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group form-group-sm">
                <div class="col-sm-offset-4 col-md-offset-3 col-sm-8 col-md-9">
                    @Html.SubmitButtonAuth(MVC.Producao.FichaTecnica.Processos(), "btnSubmitProcessos")        
                </div>
            </div>
        </div>     
    </div>
}

<script>
    $(document).ready(function () {
        $('#formProcessos').submit(function (ev) {
            var dataGridItens = $("#GridFichaTecnicaProcessos").data("kendoGrid").dataSource.data();

            if (dataGridItens.length == 0) {
                alert("Insira pelo menos um item na grid.");
                $('#btnSubmitProcessos').button('reset');
                e.preventDefault();
                return false;
            }

            var mensagem = "";

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.DepartamentoProducao == '' || dataItem.DepartamentoProducao == null) {
                    mensagem += "Um item não tem valor para departamento.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.SetorProducao == '' || dataItem.SetorProducao == null) {
                    mensagem += "Um item não tem valor para setor.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.OperacaoProducao == '' || dataItem.OperacaoProducao == null) {
                    mensagem += "Um item não tem valor para operação.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Custo == 0 || dataItem.Custo == null) {
                    mensagem += "Um item não tem valor na coluna custo.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.Tempo == 0 || dataItem.Tempo == null) {
                    mensagem += "Um item não tem valor na coluna tempo.<br/>";
                }
            }

            for (var i = 0; i < dataGridItens.length; i++) {
                var dataItem = dataGridItens[i];
                if (dataItem.PesoProdutividade == 0 || dataItem.PesoProdutividade == null) {
                    mensagem += "O item de referência: " + dataItem.Referencia + " não tem valor na coluna peso produtividade.<br/>";
                }
            }

            if (mensagem != "") {
                e.preventDefault();
                exibaAlertaErro(mensagem);
                $('#btnSubmit').button('reset');
                return false;
            }

            return true;
        });
    });

    function displayDepartamentoProducao(id) {
        if (id == '' || id == null) {
            return '';
        }
        var departamentoProducaosDicionario = $("#DepartamentoProducaosDicionario").data("value");
        var nome = "";
        $.each(departamentoProducaosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function displaySetorProducao(id) {
        if (id == '' || id == null) {
            return '';
        }
        var setorProducaosDicionario = $("#SetorProducaosDicionario").data("value");
        var nome = "";
        $.each(setorProducaosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function displayOperacaoProducao(id) {
        if (id == '' || id == null) {
            return '';
        }
        var operacaoProducaosDicionario = $("#OperacaoProducaosDicionario").data("value");
        var nome = "";
        $.each(operacaoProducaosDicionario, function (index) {
            if (index == id) {
                nome = this;
                return false;
            }
            return true;
        });
        return nome;
    }

    function indexGridFichaTecnicaProcessos(dataItem) {
        var data = $("#GridFichaTecnicaProcessos").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

    function filtroSetores() {
        var grid = $("#GridFichaTecnicaProcessos").data("kendoGrid");
        var editRow = grid.tbody.find("tr:has(.k-edit-cell)");
        var model = grid.dataItem(editRow);
        return {
            IdDepartamento: model.DepartamentoProducao
        };
    }

    function filtroOperacoes() {
        var grid = $("#GridFichaTecnicaProcessos").data("kendoGrid");
        var editRow = grid.tbody.find("tr:has(.k-edit-cell)");
        var model = grid.dataItem(editRow);
        return {
            setorProducaoId: model.SetorProducao
        };
    }

    function onEditGrid(e) {

        $('#DepartamentoProducao').change(function (evt) {
            var item = ObtenhaDataItemGridItensProcessos(evt.target);
            item.set("SetorProducao", null);
            item.set("OperacaoProducao", null);
            item.set("Custo", 0);
            item.set("Tempo", 0);
            item.set("PesoProdutividade", 0);
        });

        $('#DepartamentoProducao').change(function (evt) {
            var item = ObtenhaDataItemGridItensProcessos(evt.target);
            item.set("OperacaoProducao", null);
            item.set("Custo", 0);
            item.set("Tempo", 0);
            item.set("PesoProdutividade", 0);
        });

        $('#OperacaoProducao').change(function (evt) {
            var operacaoProducaoId = $("#OperacaoProducao").val();
            if (operacaoProducaoId != '') {
                var url = '/Comum/OperacaoProducao/ObtenhaOperacaoProducao?operacaoProducaoId=' + operacaoProducaoId;
                $.getJSON(url, function (result) {
                    var item = ObtenhaDataItemGridItensProcessos(evt.target);
                    item.set("Custo", result.Custo);
                    item.set("Tempo", result.Tempo);
                    item.set("PesoProdutividade", result.PesoProdutividade);
                }).fail(function (jqXhr, textStatus, errorThrown) {
                    alert(errorThrown);
                });
            }
        });
    }

    function ObtenhaDataItemGridItensProcessos(target) {
        var row = $(target).closest("tr");
        var grid = $('#GridFichaTecnicaProcessos').data("kendoGrid");
        return grid.dataItem(row);
    }

    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: {
                custovalidation: function (input, params) {
                    if (input.is("[name='Custo']")) {
                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                tempovalidation: function (input, params) {
                    if (input.is("[name='Tempo']")) {
                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                pesoprodutividadevalidation: function (input, params) {
                    if (input.is("[name='PesoProdutividade']")) {
                        return input.val() != '' && input.val() != 0;
                    }
                    return true;
                },
                operacaoproducaoduplicadavalidation: function (input, params) {
                    if (input.is("[name='OperacaoProducao']")) {
                        var dataItem = ObtenhaDataItemGridItensProcessos(input);

                        if (dataItem.OperacaoProducao == null) {
                            return true;
                        }

                        var dadosGrid = $('#GridFichaTecnicaProcessos').data("kendoGrid").dataSource.data();

                        for (var i = 0; dadosGrid.length > i; i++) {
                            var dataItemAtual = dadosGrid[i];
                            if (dataItem.OperacaoProducao == dataItemAtual.OperacaoProducao &&
                                dataItem.SetorProducao == dataItemAtual.SetorProducao &&
                                dataItem.DepartamentoProducao == dataItemAtual.DepartamentoProducao &&
                                dataItem.uid != dataItemAtual.uid) {
                                //dataItemAtual.OperacaoProducao = '';
                                return false;
                            }
                        }
                    }
                    return true;
                }
            },
            messages: {
                custovalidation: function (input) {
                    input.attr("data-custovalidation-msg", "O Custo não pode ser 0.");
                    return input.attr("data-custovalidation-msg");
                },
                tempovalidation: function (input) {
                    input.attr("data-tempovalidation-msg", "O Tempo não pode ser 0.");
                    return input.attr("data-custovalidation-msg");
                },
                pesoprodutividadevalidation: function (input) {
                    input.attr("data-pesoprodutividadevalidation-msg", "O Peso Produtividade não pode ser 0.");
                    return input.attr("data-pesoprodutividadevalidation-msg");
                },
                operacaoproducaoduplicadavalidation: function (input) {
                    input.attr("data-operacaoproducaoduplicadavalidation-msg", "Essa operação já foi informada para esse departamento e setor.");
                    return input.attr("data-operacaoproducaoduplicadavalidation-msg");
                }
            }
        });
    })(jQuery, kendo);

    function formateDecimalGrid(valor) {
        if (valor == null) {
            return null;
        }
        return valor.toString().replace(".", ",");
    }
</script>