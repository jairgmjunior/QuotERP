@using Fashion.ERP.Web.Areas.Producao.Models
@model FichaTecnicaModelagemModel

@using (Html.BeginForm(MVC.Producao.FichaTecnica.Modelagem(), FormMethod.Post, new {id = "formModelagem", @class = "form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummaryEx()
    @Html.HiddenFor(x => x.Id)
    <input type="hidden" id="TamanhosDicionario_Modelagem" data-value = "@ViewBag.TamanhosDicionarioJson_Modelagem" />
    <fieldset>
        <legend><small>Dados da Modelagem</small></legend>
        <div class="row">
            <div class="span4">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.DataModelagem)
                    <div class="controls">
                        @Html.EditorFor(x => x.DataModelagem) 
                    </div>
                </div>
            </div>  
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Modelista)
                    <div class="controls">
                        @Html.HiddenFor(x => x.Modelista, new { id = "funcionario" })
                        <div class="input-append">
                            <input id="codigo-funcionario" class="input-small numeric-only" type="text" />
                            <button id="pesquisar-funcionario" class="btn" type="button"><i class="icon-search"></i></button>
                            <span id="descricao-funcionario" class="add-on"></span>
                        </div>
                        @Html.ValidationMessageFor(x => x.Modelista, string.Empty, new { @class = "help-block" })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="span4">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.Observacao)
                    <div class="controls">
                        @Html.EditorFor(x => x.Observacao) 
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="control-group">
                    @Html.LabelForRequired(x => x.NomeArquivoUpload)
                    <div class="controls">
                        <div class="fileupload fileupload-new" data-provides="fileupload">
                            <div class="input-append">
                                <div class="uneditable-input span3">
                                    <i class="icon-file fileupload-exists"></i>
                                    <span class="fileupload-preview">@Html.ValueFor(x => x.NomeArquivoUpload)</span>
                                </div>
                                <span class="btn btn-file">
                                    <span class="fileupload-new">Selecione</span>
                                    <span class="fileupload-exists">Alterar</span>
                                    <input type="file" name="Arquivo" />
                                    @Html.HiddenFor(x => x.NomeArquivoUpload)
                                </span>
                                <a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Remover</a>
                            </div>
                            @{
                                if (@Model.Arquivo.HasValue)
                                {
                                    @Html.ActionLink("download", MVC.Arquivo.Download(Model.Arquivo.GetValueOrDefault()), new { download= "", target = "_blank" });
                                }
                            }
                        </div>
                        <div class="progress" style="display: none">
                            <div class="bar"></div>
                        </div>
                        @Html.ValidationMessageFor(x => x.NomeArquivoUpload, null, new { @class="help-block" })
                    </div>
                </div>
            </div>  
        </div>
    </fieldset>    
    <hr />
    <fieldset>
        <legend><small>Medidas da Modelagem</small></legend>
            @(Html.Kendo().Grid(Model.GridMedidas)
                .Name("GridMedidas").HtmlAttributes(new { style="width:400px"})
                .Editable(e => e.Mode(GridEditMode.InCell))
                .Navigatable()
                .Columns(columns =>
                {
                    columns.Bound(x => x.Id).Hidden()
                        .ClientTemplate("<input type='hidden' name='GridMedidas[#= index(data)#].Id' value='#= Id #' />");
                    columns.Bound(p => p.DescricaoMedida).ClientTemplate("#= DescricaoMedida #" +
                        "<input type='hidden' name='GridMedidas[#= index(data)#].DescricaoMedida' value='#= DescricaoMedida #' />");
                    columns.Bound(x => x.Tamanho).EditorTemplateName("TamanhoGradeList")
                        .ClientTemplate("#= displayTamanho_Modelagem(Tamanho) #" + "<input type='hidden' name='GridMedidas[#= index(data)#].Tamanho' value='#= Tamanho #' />");
                    columns.Bound(x => x.Medida).EditorTemplateName("numeric2casasdecimais")
                        .ClientTemplate("#= kendo.toString(Medida, \"n2\") #"+"<input type='hidden' name='GridMedidas[#= index(data)#].Medida' value='#= formateDecimalGrid(Medida) #' />");
                    columns.Command(command => command.Destroy()).Width(100);
                }
                )
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Events(events => events.Error("onKendoGridError"))
                    .Model(model =>
                    {
                        model.Id(item => item.Id);
                        model.Field(item => item.DescricaoMedida).Editable(true);
                        model.Field(item => item.Id).Editable(false).DefaultValue(0);                    
                    })
                )
                .ToolBar(toolbar => toolbar.Create())
                .Events(events => events.Edit("onEditGridMedidas"))
            )
    </fieldset>    

    <hr />
    <div class="form-actions">
        @Html.SubmitButtonAuth(MVC.Producao.FichaTecnica.Modelagem(), "btnSubmitModelagem")        
    </div>
}

@{
    Html.RenderAction("Pesquisar", "Funcionario", new { area = "Comum" }); 
}